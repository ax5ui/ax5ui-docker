{"version":3,"sources":["ax5docker.min.js","ax5docker.js","ax5docker-tmpl.js"],"names":["UI","ax5","ui","U","util","addClass","className","version","ax5docker","_this","this","cfg","instanceId","getGuid","config","theme","animateTime","columnKeys","control","panels","panelId","modules","getPanelId","defaultModule","init","container","state","html","name","active","deactive","destroy","getPanelPath","parent","pIndex","paths","panelPath","push","join","getPanel","_root","_panelPath","path","_path","concat","split","forEach","n","replace","Function","call","setPanel","_value","controlPanel","_panel","_control","moduleState","jQuery","extend","moduleContainer","$element","$item","module","processor","builded","moduleName","$label","remove","inspectionPanel","that","panel","controlType","runProcessor","isFunction","after","before","repaintPanels","appendProcessor","stack","$parent","myself","$dom","activeIndex","append","isArray","P","_pIndex","type","icons","close","find","resizeHandel","row","column","$root","$target","off","on","e","closePanel","$","parents","stopEvent","changeActivePanel","clickedLabel","$clickedLabel","$pane","labelIndex","attr","hasClass","removeClass","newObj","length","p","pl","console","log","_config","target","onStateChanged","onClick","onLoad","onDataChanged","info","getError","setPanels","_panels","addModule","isObject","repaint","main","arguments","setConfig","apply","DOCKER","docker","tmpl","get","tmplName","data","mustache","render"],"mappings":"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","file":"ax5docker.min.js","sourcesContent":["\"use strict\";\n\n/*\n * Copyright (c) 2017. tom@axisj.com\n * - github.com/thomasjang\n * - www.axisj.com\n */\n\n(function () {\n\n    var UI = ax5.ui,\n        U = ax5.util;\n\n    UI.addClass({\n        className: \"docker\",\n        version: \"${VERSION}\"\n    }, function () {\n\n        /**\n         * @class ax5docker\n         * @classdesc\n         * @author tom@axisj.com\n         * @example\n         * ```\n         * var ax5docker = new ax5.ui.ax5docker();\n         * ```\n         */\n        var ax5docker = function ax5docker() {\n            var _this = this;\n\n            var self = this,\n                cfg = void 0;\n\n            this.instanceId = ax5.getGuid();\n            this.config = {\n                theme: 'default',\n                animateTime: 250,\n                columnKeys: {},\n                control: {}\n            };\n            // 패널 정보\n            this.panels = [];\n            this.panelId = 0;\n\n            // 패널의 컨텐츠 모듈\n            this.modules = {};\n\n            cfg = this.config;\n\n            var getPanelId = function getPanelId() {\n                return _this.panelId++;\n            },\n                defaultModule = {\n                init: function init(container, state) {\n                    container[\"$element\"].html(state.name);\n                },\n                active: function active(container, state) {},\n                deactive: function deactive(container, state) {},\n                destroy: function destroy(container, state) {}\n            },\n                getPanelPath = function getPanelPath(parent, pIndex) {\n                var paths = [];\n                if (parent && typeof parent.panelPath !== \"undefined\") {\n                    paths.push(parent.panelPath);\n                }\n\n                paths.push('panels[' + (pIndex || 0) + ']');\n                return paths.join(\".\");\n            },\n                getPanel = function getPanel(_root, _panelPath) {\n                var path = [],\n                    _path = [].concat(_panelPath.split(/[\\.\\[\\]]/g));\n                _path.forEach(function (n) {\n                    if (n !== \"\") path.push(\"[\\\"\" + n.replace(/['\\\"]/g, \"\") + \"\\\"]\");\n                });\n\n                return Function(\"\", \"return this\" + path.join('') + \";\").call(_root);\n                // return (Function(\"val\", \"this\" + _path.join('') + \" = val;\")).call(this.model, value);\n            },\n                setPanel = function setPanel(_root, _panelPath, _value) {\n                var path = [],\n                    _path = [].concat(_panelPath.split(/[\\.\\[\\]]/g));\n                _path.forEach(function (n) {\n                    if (n !== \"\") path.push(\"[\\\"\" + n.replace(/['\\\"]/g, \"\") + \"\\\"]\");\n                });\n\n                return Function(\"val\", \"this\" + path.join('') + \" = val;\").call(_root, _value);\n            };\n\n            var controlPanel = function controlPanel(_panel, _control) {\n                var moduleState = jQuery.extend(_panel.moduleState, {\n                    name: _panel.name\n                }),\n                    moduleContainer = {\n                    '$element': _panel.$item\n                },\n                    module = void 0;\n\n                var processor = {\n                    init: function init() {\n                        _panel.builded = true;\n                        module = _panel.moduleName in _this.modules && 'init' in _this.modules[_panel.moduleName] ? _this.modules[_panel.moduleName] : defaultModule;\n                        module.init(moduleContainer, moduleState);\n                    },\n                    active: function active() {\n                        module = _panel.moduleName in _this.modules && 'active' in _this.modules[_panel.moduleName] ? _this.modules[_panel.moduleName] : defaultModule;\n                        module.active(moduleContainer, moduleState);\n                    },\n                    deactive: function deactive() {\n                        module = _panel.moduleName in _this.modules && 'deactive' in _this.modules[_panel.moduleName] ? _this.modules[_panel.moduleName] : defaultModule;\n                        module.deactive(moduleContainer, moduleState);\n                    },\n                    destroy: function destroy() {\n                        module = _panel.moduleName in _this.modules && 'destroy' in _this.modules[_panel.moduleName] ? _this.modules[_panel.moduleName] : defaultModule;\n                        module.destroy(moduleContainer, moduleState);\n\n                        _panel.$label.remove();\n                        _panel.$item.remove();\n\n                        // 패널 데이터 제거.\n                        setPanel(_this, _panel.panelPath, null);\n\n                        // 현재 패널 정보를 검사하여 패널 정보를 재 구성합니다.\n                        inspectionPanel();\n                    }\n                };\n\n                // 사용자정의 함수 control.before, control.after에 전달할 인자 = that\n                var that = {\n                    panel: _panel,\n                    controlType: _control\n                };\n\n                // 비동기 처리 상황에 대응하기 위해 runProcessor를 별도 처리\n                var runProcessor = function runProcessor() {\n                    processor[_control]();\n                    module = null;\n\n                    if (U.isFunction(cfg.control.after)) {\n                        cfg.control.after.call(that, that);\n                    }\n                };\n\n                if (processor[_control]) {\n                    if (U.isFunction(cfg.control.before)) {\n                        cfg.control.before.call(that, that, function () {\n                            runProcessor();\n                        });\n                    } else {\n                        runProcessor();\n                    }\n                }\n            };\n\n            var repaintPanels = function repaintPanels() {\n                var appendProcessor = {\n                    stack: function stack($parent, parent, myself, pIndex) {\n\n                        var $dom = void 0,\n                            activeIndex = -1;\n                        myself.panelPath = getPanelPath(parent, pIndex);\n\n                        $dom = jQuery('<div data-ax5docker-pane=\"\" data-ax5docker-path=\"' + myself.panelPath + '\">' + '<ul data-ax5docker-pane-tabs=\"\"></ul>' + '<div data-ax5docker-pane-item-views=\"\"></div>' + '</div>');\n                        $parent.append($dom);\n\n                        if (U.isArray(myself.panels)) {\n                            myself.panels.forEach(function (P, pIndex) {\n                                if (myself.active) activeIndex = pIndex;\n                            });\n                            if (activeIndex === -1) activeIndex = 0;\n                            myself.panels[activeIndex].active = true;\n\n                            myself.panels.forEach(function (P, _pIndex) {\n                                appendProcessor[P.type]($dom, myself, P, _pIndex);\n                            });\n                        }\n\n                        $dom = null;\n                        activeIndex = null;\n                    },\n                    panel: function panel($parent, parent, myself, pIndex) {\n                        var $dom = void 0;\n                        myself.panelPath = getPanelPath(parent, pIndex);\n                        myself.$label = jQuery('<li data-ax5docker-pane-tab=\"' + pIndex + '\" data-ax5docker-path=\"' + myself.panelPath + '\">' + '<div class=\"title\">' + myself.name + '</div>' + '<div class=\"close-icon\">' + cfg.icons.close + '</div>' + '</li>');\n\n                        if (!myself.$item) {\n                            myself.$item = jQuery('<div data-ax5docker-pane-item=\"' + pIndex + '\" data-ax5docker-pane-id=\"' + getPanelId() + '\" data-ax5docker-path=\"' + myself.panelPath + '\"></div>');\n                        }\n\n                        if (parent && parent.type == \"stack\") {\n                            if (myself.active) {\n                                controlPanel(myself, \"init\");\n                                myself.$label.addClass(\"active\");\n                                myself.$item.addClass(\"active\");\n                            }\n                            $parent.find('[data-ax5docker-pane-tabs]').append(myself.$label);\n                            $parent.find('[data-ax5docker-pane-item-views]').append(myself.$item);\n                        } else {\n                            $dom = jQuery('<div data-ax5docker-pane=\"\" data-ax5docker-path=\"' + myself.panelPath + '\">' + '<ul data-ax5docker-pane-tabs=\"\"></ul>' + '<div data-ax5docker-pane-item-views=\"\"></div>' + '</div>');\n\n                            controlPanel(myself, \"init\");\n                            myself.$label.addClass(\"active\");\n                            myself.$item.addClass(\"active\");\n\n                            $dom.find('[data-ax5docker-pane-tabs]').append(myself.$label);\n                            $dom.find('[data-ax5docker-pane-item-views]').append(myself.$item);\n\n                            $parent.append($dom);\n                        }\n\n                        $dom = null;\n                    },\n                    resizeHandel: function resizeHandel($parent, parent, myself) {\n                        var $dom = jQuery('<div data-ax5docker-resize-handle=\"\"></div>');\n                        $parent.append($dom);\n                        $dom = null;\n                    },\n                    row: function row($parent, parent, myself, pIndex) {\n                        var $dom = void 0;\n                        myself.panelPath = getPanelPath(parent, pIndex);\n                        if (parent && parent.type == \"stack\") {\n                            throw \"The 'stack' type child nodes are allowed only for the 'panel' type.\";\n                        }\n                        $dom = jQuery('<div data-ax5docker-pane-axis=\"row\" data-ax5docker-path=\"' + myself.panelPath + '\"></div>');\n                        $parent.append($dom);\n\n                        if (U.isArray(myself.panels)) {\n                            myself.panels.forEach(function (P, _pIndex) {\n                                if (_pIndex > 0) appendProcessor[\"resizeHandel\"]($dom, P, myself, _pIndex);\n                                appendProcessor[P.type]($dom, myself, P, _pIndex);\n                            });\n                        }\n\n                        $dom = null;\n                    },\n                    column: function column($parent, parent, myself, pIndex) {\n                        var $dom = void 0;\n                        myself.panelPath = getPanelPath(parent, pIndex);\n                        if (parent && parent.type == \"stack\") {\n                            throw \"The 'stack' type child nodes are allowed only for the 'panel' type.\";\n                        }\n                        $dom = jQuery('<div data-ax5docker-pane-axis=\"column\" data-ax5docker-path=\"' + myself.panelPath + '\"></div>');\n                        $parent.append($dom);\n\n                        if (U.isArray(myself.panels)) {\n                            myself.panels.forEach(function (P, _pIndex) {\n                                if (pIndex > 0) appendProcessor[\"resizeHandel\"]($dom, P, myself, _pIndex);\n                                appendProcessor[P.type]($dom, myself, P, _pIndex);\n                            });\n                        }\n\n                        $dom = null;\n                    }\n                };\n\n                var $root = jQuery('<div data-ax5docker-panes=\"\"></div>');\n                appendProcessor[_this.panels[0].type]($root, null, _this.panels[0], 0);\n                _this.$target.html($root);\n\n                _this.$target.off(\"click\").on(\"click\", \"[data-ax5docker-pane-tab] .close-icon\", function (e) {\n                    closePanel($(this).parents('[data-ax5docker-pane-tab]'));\n                    U.stopEvent(e);\n                }).on(\"click\", \"[data-ax5docker-pane-tab]\", function (e) {\n                    changeActivePanel(this);\n                    U.stopEvent(e);\n                });\n                $root = null;\n            };\n\n            /**\n             * 액티브 패널 변경(stack인 상황에서)\n             * @param clickedLabel\n             * @returns {boolean}\n             */\n            var changeActivePanel = function changeActivePanel(clickedLabel) {\n                var $clickedLabel = jQuery(clickedLabel),\n                    $pane = $clickedLabel.parents('[data-ax5docker-pane]'),\n                    labelIndex = $clickedLabel.attr(\"data-ax5docker-pane-tab\"),\n                    panel = getPanel(_this, $clickedLabel.attr(\"data-ax5docker-path\"));\n\n                if ($clickedLabel.hasClass(\"active\")) {\n                    return false;\n                } else {\n                    $pane.find(\".active\").removeClass(\"active\");\n                    //labelIndex\n\n                    $pane.find('[data-ax5docker-pane-tab=\"' + labelIndex + '\"]').addClass(\"active\");\n                    $pane.find('[data-ax5docker-pane-item=\"' + labelIndex + '\"]').addClass(\"active\");\n\n                    controlPanel(panel, panel.builded ? \"active\" : \"init\");\n                }\n                return _this;\n            };\n\n            /**\n             * 패널 삭제하기\n             * @param clickedLabel\n             * @returns {ax5docker}\n             */\n            var closePanel = function closePanel(clickedLabel) {\n                var $clickedLabel = jQuery(clickedLabel),\n                    panelPath = $clickedLabel.attr(\"data-ax5docker-path\"),\n                    panel = getPanel(_this, panelPath);\n\n                controlPanel(panel, \"destroy\");\n                return _this;\n            };\n\n            var inspectionPanel = function inspectionPanel() {\n                // console.log(this.$target.find('[data-ax5docker-pane]'));\n                var panels = [];\n                var processor = {\n                    stack: function stack(myself) {\n                        if (!U.isArray(myself.panels)) return false;\n\n                        var newObj = {\n                            type: \"stack\",\n                            panels: []\n                        };\n\n                        myself.panels.forEach(function (P, _pIndex) {\n                            if (P) {\n                                newObj.panels.push(P);\n                            }\n                        });\n\n                        if (newObj.panels.length < 2) {\n                            newObj = newObj.panels[0];\n                        }\n\n                        if (U.isArray(newObj.panels)) {\n                            for (var p = 0, pl = newObj.panels.length; p < pl; p++) {\n                                newObj.panels[p] = processor[newObj.panels[p].type](newObj.panels[p]);\n                            }\n                        }\n\n                        return newObj;\n                    },\n                    panel: function panel(myself) {\n                        //console.log(myself);\n                        return myself;\n                    },\n                    row: function row(myself) {\n\n                        if (!U.isArray(myself.panels)) return false;\n\n                        var newObj = {\n                            type: \"row\",\n                            panels: []\n                        };\n\n                        myself.panels.forEach(function (P, _pIndex) {\n                            if (P) {\n                                newObj.panels.push(P);\n                            }\n                        });\n\n                        if (newObj.panels.length < 2) {\n                            newObj = newObj.panels[0];\n                        }\n\n                        if (U.isArray(newObj.panels)) {\n                            for (var p = 0, pl = newObj.panels.length; p < pl; p++) {\n                                newObj.panels[p] = processor[newObj.panels[p].type](newObj.panels[p]);\n                            }\n                        }\n\n                        return newObj;\n                    },\n                    column: function column(myself) {\n                        if (!U.isArray(myself.panels)) return false;\n\n                        var newObj = {\n                            type: \"column\",\n                            panels: []\n                        };\n\n                        myself.panels.forEach(function (P, _pIndex) {\n                            if (P) {\n                                newObj.panels.push(P);\n                            }\n                        });\n\n                        if (newObj.panels.length < 2) {\n                            newObj = newObj.panels[0];\n                        }\n\n                        if (U.isArray(newObj.panels)) {\n                            for (var p = 0, pl = newObj.panels.length; p < pl; p++) {\n                                newObj.panels[p] = processor[newObj.panels[p].type](newObj.panels[p]);\n                            }\n                        }\n\n                        return newObj;\n                    }\n                };\n\n                _this.panels[0] = processor[_this.panels[0].type](_this.panels[0]);\n\n                console.log(_this.panels[0]);\n\n                repaintPanels();\n            };\n\n            /**\n             * @method ax5docker.setConfig\n             * @param {Object} config\n             * @param {Array} config.panels\n             */\n            this.init = function (_config) {\n                cfg = jQuery.extend(true, {}, cfg, _config);\n                if (!cfg.target) {\n                    console.log(ax5.info.getError(\"ax5docker\", \"401\", \"init\"));\n                    return this;\n                }\n                // memory target\n                this.$target = jQuery(cfg.target);\n                // set panels\n                this.panels = cfg.panels || [];\n                // event Functions\n                this.onStateChanged = cfg.onStateChanged;\n                this.onClick = cfg.onClick;\n                this.onLoad = cfg.onLoad;\n                this.onDataChanged = cfg.onDataChanged;\n            };\n\n            /**\n             * @method ax5docker.setPanels\n             * @returns {ax5docker}\n             */\n            this.setPanels = function (_panels) {\n                // set panels\n                this.panels = _panels || [];\n\n                // 패널 다시 그리기\n                repaintPanels();\n                return this;\n            };\n\n            /**\n             * @method ax5docker.addModule\n             * @param modules\n             * @returns {ax5docker}\n             */\n            this.addModule = function (modules) {\n                if (U.isObject(modules)) {\n                    jQuery.extend(true, this.modules, modules);\n                }\n                return this;\n            };\n\n            this.repaint = function () {\n                // 패널 다시 그리기\n                repaintPanels();\n            };\n\n            // 클래스 생성자\n            this.main = function () {\n                if (arguments && U.isObject(arguments[0])) {\n                    this.setConfig(arguments[0]);\n                }\n            }.apply(this, arguments);\n        };\n\n        return ax5docker;\n    }());\n})();\n\n// todo : active 된 패널만 표시하기 -- ok\n// todo : row > stack 구현 -- ok\n// todo : stack 패널 active change -- ok\n// todo : 패널삭제하기 -- ok\n// todo : 패널추가하기\n// todo : 패널 재구성\n// todo : 패널 drag & drop\n\n// ax5.ui.docker.tmpl\n(function () {\n\n    var DOCKER = ax5.ui.docker;\n\n    var panels = function panels(columnKeys) {\n        return \" \\n{{#panels}}\\n{{#panels}}\\n{{/panels}}\\n{{^panels}}\\n{{/panels}}\\n{{/panels}}\\n        \";\n    };\n\n    DOCKER.tmpl = {\n        \"panels\": panels,\n        get: function get(tmplName, data, columnKeys) {\n            return ax5.mustache.render(DOCKER.tmpl[tmplName].call(this, columnKeys), data);\n        }\n    };\n})();","/*\n * Copyright (c) 2017. tom@axisj.com\n * - github.com/thomasjang\n * - www.axisj.com\n */\n\n(function () {\n\n    let UI = ax5.ui,\n        U = ax5.util;\n\n    UI.addClass({\n        className: \"docker\",\n        version: \"${VERSION}\"\n    }, (function () {\n\n        /**\n         * @class ax5docker\n         * @classdesc\n         * @author tom@axisj.com\n         * @example\n         * ```\n         * var ax5docker = new ax5.ui.ax5docker();\n         * ```\n         */\n        let ax5docker = function () {\n            let self = this,\n                cfg;\n\n            this.instanceId = ax5.getGuid();\n            this.config = {\n                theme: 'default',\n                animateTime: 250,\n                columnKeys: {},\n                control: {}\n            };\n            // 패널 정보\n            this.panels = [];\n            this.panelId = 0;\n\n            // 패널의 컨텐츠 모듈\n            this.modules = {};\n\n            cfg = this.config;\n\n            const getPanelId = () => {\n                    return this.panelId++;\n                },\n                defaultModule = {\n                    init(container, state){\n                        container[\"$element\"].html(state.name);\n                    },\n                    active(container, state){\n\n                    },\n                    deactive(container, state){\n\n                    },\n                    destroy(container, state){\n\n                    }\n                },\n                getPanelPath = (parent, pIndex) => {\n                    let paths = [];\n                    if (parent && typeof parent.panelPath !== \"undefined\") {\n                        paths.push(parent.panelPath);\n                    }\n\n                    paths.push('panels[' + (pIndex || 0) + ']');\n                    return paths.join(\".\");\n                },\n                getPanel = (_root, _panelPath) => {\n                    let path = [], _path = [].concat(_panelPath.split(/[\\.\\[\\]]/g));\n                    _path.forEach(function (n) {\n                        if (n !== \"\") path.push(\"[\\\"\" + n.replace(/['\\\"]/g, \"\") + \"\\\"]\");\n                    });\n\n                    return (Function(\"\", \"return this\" + path.join('') + \";\")).call(_root);\n                    // return (Function(\"val\", \"this\" + _path.join('') + \" = val;\")).call(this.model, value);\n                },\n                setPanel = (_root, _panelPath, _value) => {\n                    let path = [], _path = [].concat(_panelPath.split(/[\\.\\[\\]]/g));\n                    _path.forEach(function (n) {\n                        if (n !== \"\") path.push(\"[\\\"\" + n.replace(/['\\\"]/g, \"\") + \"\\\"]\");\n                    });\n\n                    return (Function(\"val\", \"this\" + path.join('') + \" = val;\")).call(_root, _value);\n                };\n\n            const controlPanel = (_panel, _control) => {\n                let moduleState = jQuery.extend(_panel.moduleState, {\n                        name: _panel.name\n                    }),\n                    moduleContainer = {\n                        '$element': _panel.$item\n                    },\n                    module;\n\n                let processor = {\n                    init: () => {\n                        _panel.builded = true;\n                        module = (_panel.moduleName in this.modules && 'init' in this.modules[_panel.moduleName]) ? this.modules[_panel.moduleName] : defaultModule;\n                        module.init(moduleContainer, moduleState);\n                    },\n                    active: () => {\n                        module = (_panel.moduleName in this.modules && 'active' in this.modules[_panel.moduleName]) ? this.modules[_panel.moduleName] : defaultModule;\n                        module.active(moduleContainer, moduleState);\n                    },\n                    deactive: () => {\n                        module = (_panel.moduleName in this.modules && 'deactive' in this.modules[_panel.moduleName]) ? this.modules[_panel.moduleName] : defaultModule;\n                        module.deactive(moduleContainer, moduleState);\n                    },\n                    destroy: () => {\n                        module = (_panel.moduleName in this.modules && 'destroy' in this.modules[_panel.moduleName]) ? this.modules[_panel.moduleName] : defaultModule;\n                        module.destroy(moduleContainer, moduleState);\n\n                        _panel.$label.remove();\n                        _panel.$item.remove();\n\n                        // 패널 데이터 제거.\n                        setPanel(this, _panel.panelPath, null);\n\n                        // 현재 패널 정보를 검사하여 패널 정보를 재 구성합니다.\n                        inspectionPanel();\n                    }\n                };\n\n                // 사용자정의 함수 control.before, control.after에 전달할 인자 = that\n                let that = {\n                    panel: _panel,\n                    controlType: _control\n                };\n\n                // 비동기 처리 상황에 대응하기 위해 runProcessor를 별도 처리\n                let runProcessor = () => {\n                    processor[_control]();\n                    module = null;\n\n                    if (U.isFunction(cfg.control.after)) {\n                        cfg.control.after.call(that, that);\n                    }\n                };\n\n                if (processor[_control]) {\n                    if (U.isFunction(cfg.control.before)) {\n                        cfg.control.before.call(that, that, function () {\n                            runProcessor();\n                        });\n                    }\n                    else {\n                        runProcessor();\n                    }\n                }\n            };\n\n            const repaintPanels = () => {\n                const appendProcessor = {\n                    stack($parent, parent, myself, pIndex){\n\n                        let $dom, activeIndex = -1;\n                        myself.panelPath = getPanelPath(parent, pIndex);\n\n                        $dom = jQuery('<div data-ax5docker-pane=\"\" data-ax5docker-path=\"' + myself.panelPath + '\">' +\n                            '<ul data-ax5docker-pane-tabs=\"\"></ul>' +\n                            '<div data-ax5docker-pane-item-views=\"\"></div>' +\n                            '</div>');\n                        $parent.append($dom);\n\n                        if (U.isArray(myself.panels)) {\n                            myself.panels.forEach(function (P, pIndex) {\n                                if (myself.active) activeIndex = pIndex;\n                            });\n                            if (activeIndex === -1) activeIndex = 0;\n                            myself.panels[activeIndex].active = true;\n\n                            myself.panels.forEach(function (P, _pIndex) {\n                                appendProcessor[P.type]($dom, myself, P, _pIndex);\n                            });\n                        }\n\n                        $dom = null;\n                        activeIndex = null;\n                    },\n                    panel($parent, parent, myself, pIndex){\n                        let $dom;\n                        myself.panelPath = getPanelPath(parent, pIndex);\n                        myself.$label = jQuery('<li data-ax5docker-pane-tab=\"' + pIndex + '\" data-ax5docker-path=\"' + myself.panelPath + '\">' +\n                            '<div class=\"title\">' + myself.name + '</div>' +\n                            '<div class=\"close-icon\">' + cfg.icons.close + '</div>' +\n                            '</li>');\n\n                        if (!myself.$item) {\n                            myself.$item = jQuery('<div data-ax5docker-pane-item=\"' + pIndex + '\" data-ax5docker-pane-id=\"' + getPanelId() + '\" data-ax5docker-path=\"' + myself.panelPath + '\"></div>');\n                        }\n\n                        if (parent && parent.type == \"stack\") {\n                            if (myself.active) {\n                                controlPanel(myself, \"init\");\n                                myself.$label.addClass(\"active\");\n                                myself.$item.addClass(\"active\");\n                            }\n                            $parent.find('[data-ax5docker-pane-tabs]').append(myself.$label);\n                            $parent.find('[data-ax5docker-pane-item-views]').append(myself.$item);\n                        } else {\n                            $dom = jQuery('<div data-ax5docker-pane=\"\" data-ax5docker-path=\"' + myself.panelPath + '\">' +\n                                '<ul data-ax5docker-pane-tabs=\"\"></ul>' +\n                                '<div data-ax5docker-pane-item-views=\"\"></div>' +\n                                '</div>');\n\n                            controlPanel(myself, \"init\");\n                            myself.$label.addClass(\"active\");\n                            myself.$item.addClass(\"active\");\n\n                            $dom.find('[data-ax5docker-pane-tabs]').append(myself.$label);\n                            $dom.find('[data-ax5docker-pane-item-views]').append(myself.$item);\n\n                            $parent.append($dom);\n                        }\n\n                        $dom = null;\n                    },\n                    resizeHandel($parent, parent, myself){\n                        let $dom = jQuery('<div data-ax5docker-resize-handle=\"\"></div>');\n                        $parent.append($dom);\n                        $dom = null;\n                    },\n                    row($parent, parent, myself, pIndex){\n                        let $dom;\n                        myself.panelPath = getPanelPath(parent, pIndex);\n                        if (parent && parent.type == \"stack\") {\n                            throw \"The 'stack' type child nodes are allowed only for the 'panel' type.\";\n                        }\n                        $dom = jQuery('<div data-ax5docker-pane-axis=\"row\" data-ax5docker-path=\"' + myself.panelPath + '\"></div>');\n                        $parent.append($dom);\n\n                        if (U.isArray(myself.panels)) {\n                            myself.panels.forEach(function (P, _pIndex) {\n                                if (_pIndex > 0) appendProcessor[\"resizeHandel\"]($dom, P, myself, _pIndex);\n                                appendProcessor[P.type]($dom, myself, P, _pIndex);\n                            });\n                        }\n\n                        $dom = null;\n                    },\n                    column($parent, parent, myself, pIndex){\n                        let $dom;\n                        myself.panelPath = getPanelPath(parent, pIndex);\n                        if (parent && parent.type == \"stack\") {\n                            throw \"The 'stack' type child nodes are allowed only for the 'panel' type.\";\n                        }\n                        $dom = jQuery('<div data-ax5docker-pane-axis=\"column\" data-ax5docker-path=\"' + myself.panelPath + '\"></div>');\n                        $parent.append($dom);\n\n                        if (U.isArray(myself.panels)) {\n                            myself.panels.forEach(function (P, _pIndex) {\n                                if (pIndex > 0) appendProcessor[\"resizeHandel\"]($dom, P, myself, _pIndex);\n                                appendProcessor[P.type]($dom, myself, P, _pIndex);\n                            });\n                        }\n\n                        $dom = null;\n                    }\n                };\n\n                let $root = jQuery('<div data-ax5docker-panes=\"\"></div>');\n                appendProcessor[this.panels[0].type]($root, null, this.panels[0], 0);\n                this.$target.html($root);\n\n                this.$target\n                    .off(\"click\")\n                    .on(\"click\", \"[data-ax5docker-pane-tab] .close-icon\", function (e) {\n                        closePanel($(this).parents('[data-ax5docker-pane-tab]'));\n                        U.stopEvent(e);\n                    })\n                    .on(\"click\", \"[data-ax5docker-pane-tab]\", function (e) {\n                        changeActivePanel(this);\n                        U.stopEvent(e);\n                    });\n                $root = null;\n            };\n\n            /**\n             * 액티브 패널 변경(stack인 상황에서)\n             * @param clickedLabel\n             * @returns {boolean}\n             */\n            const changeActivePanel = (clickedLabel) => {\n                let $clickedLabel = jQuery(clickedLabel),\n                    $pane = $clickedLabel.parents('[data-ax5docker-pane]'),\n                    labelIndex = $clickedLabel.attr(\"data-ax5docker-pane-tab\"),\n                    panel = getPanel(this, $clickedLabel.attr(\"data-ax5docker-path\"));\n\n                if ($clickedLabel.hasClass(\"active\")) {\n                    return false;\n                } else {\n                    $pane.find(\".active\").removeClass(\"active\");\n                    //labelIndex\n\n                    $pane.find('[data-ax5docker-pane-tab=\"' + labelIndex + '\"]').addClass(\"active\");\n                    $pane.find('[data-ax5docker-pane-item=\"' + labelIndex + '\"]').addClass(\"active\");\n\n\n                    controlPanel(panel, panel.builded ? \"active\" : \"init\");\n                }\n                return this;\n            };\n\n            /**\n             * 패널 삭제하기\n             * @param clickedLabel\n             * @returns {ax5docker}\n             */\n            const closePanel = (clickedLabel) => {\n                let $clickedLabel = jQuery(clickedLabel),\n                    panelPath = $clickedLabel.attr(\"data-ax5docker-path\"),\n                    panel = getPanel(this, panelPath);\n\n                controlPanel(panel, \"destroy\");\n                return this;\n            };\n\n            const inspectionPanel = () => {\n                // console.log(this.$target.find('[data-ax5docker-pane]'));\n                const panels = [];\n                const processor = {\n                    stack(myself){\n                        if (!U.isArray(myself.panels)) return false;\n\n                        let newObj = {\n                            type: \"stack\",\n                            panels: []\n                        };\n\n                        myself.panels.forEach(function (P, _pIndex) {\n                            if (P) {\n                                newObj.panels.push(P);\n                            }\n                        });\n\n                        if (newObj.panels.length < 2) {\n                            newObj = newObj.panels[0];\n                        }\n\n                        if(U.isArray(newObj.panels)) {\n                            for (let p = 0, pl = newObj.panels.length; p < pl; p++) {\n                                newObj.panels[p] = processor[newObj.panels[p].type](newObj.panels[p]);\n                            }\n                        }\n\n                        return newObj;\n                    },\n                    panel(myself){\n                        //console.log(myself);\n                        return myself;\n                    },\n                    row(myself){\n\n                        if (!U.isArray(myself.panels)) return false;\n\n                        let newObj = {\n                            type: \"row\",\n                            panels: []\n                        };\n\n                        myself.panels.forEach(function (P, _pIndex) {\n                            if (P) {\n                                newObj.panels.push(P);\n                            }\n                        });\n\n                        if (newObj.panels.length < 2) {\n                            newObj = newObj.panels[0];\n                        }\n\n                        if(U.isArray(newObj.panels)) {\n                            for (let p = 0, pl = newObj.panels.length; p < pl; p++) {\n                                newObj.panels[p] = processor[newObj.panels[p].type](newObj.panels[p]);\n                            }\n                        }\n\n                        return newObj;\n                    },\n                    column(myself){\n                        if (!U.isArray(myself.panels)) return false;\n\n                        let newObj = {\n                            type: \"column\",\n                            panels: []\n                        };\n\n                        myself.panels.forEach(function (P, _pIndex) {\n                            if (P) {\n                                newObj.panels.push(P);\n                            }\n                        });\n\n                        if (newObj.panels.length < 2) {\n                            newObj = newObj.panels[0];\n                        }\n\n                        if(U.isArray(newObj.panels)) {\n                            for (let p = 0, pl = newObj.panels.length; p < pl; p++) {\n                                newObj.panels[p] = processor[newObj.panels[p].type](newObj.panels[p]);\n                            }\n                        }\n\n                        return newObj;\n                    },\n                };\n\n                this.panels[0] = processor[this.panels[0].type](this.panels[0]);\n\n                console.log(this.panels[0]);\n                \n                repaintPanels();\n            };\n\n            /**\n             * @method ax5docker.setConfig\n             * @param {Object} config\n             * @param {Array} config.panels\n             */\n            this.init = function (_config) {\n                cfg = jQuery.extend(true, {}, cfg, _config);\n                if (!cfg.target) {\n                    console.log(ax5.info.getError(\"ax5docker\", \"401\", \"init\"));\n                    return this;\n                }\n                // memory target\n                this.$target = jQuery(cfg.target);\n                // set panels\n                this.panels = cfg.panels || [];\n                // event Functions\n                this.onStateChanged = cfg.onStateChanged;\n                this.onClick = cfg.onClick;\n                this.onLoad = cfg.onLoad;\n                this.onDataChanged = cfg.onDataChanged;\n            };\n\n            /**\n             * @method ax5docker.setPanels\n             * @returns {ax5docker}\n             */\n            this.setPanels = function (_panels) {\n                // set panels\n                this.panels = _panels || [];\n\n                // 패널 다시 그리기\n                repaintPanels();\n                return this;\n            };\n\n            /**\n             * @method ax5docker.addModule\n             * @param modules\n             * @returns {ax5docker}\n             */\n            this.addModule = function (modules) {\n                if (U.isObject(modules)) {\n                    jQuery.extend(true, this.modules, modules);\n                }\n                return this;\n            };\n\n            this.repaint = function () {\n                // 패널 다시 그리기\n                repaintPanels();\n            };\n\n            // 클래스 생성자\n            this.main = (function () {\n                if (arguments && U.isObject(arguments[0])) {\n                    this.setConfig(arguments[0]);\n                }\n            }).apply(this, arguments);\n\n        };\n\n        return ax5docker;\n    })());\n\n})();\n\n// todo : active 된 패널만 표시하기 -- ok\n// todo : row > stack 구현 -- ok\n// todo : stack 패널 active change -- ok\n// todo : 패널삭제하기 -- ok\n// todo : 패널추가하기\n// todo : 패널 재구성\n// todo : 패널 drag & drop\n","// ax5.ui.docker.tmpl\n(function () {\n\n    let DOCKER = ax5.ui.docker;\n\n    let panels = function (columnKeys) {\n        return ` \n{{#panels}}\n{{#panels}}\n{{/panels}}\n{{^panels}}\n{{/panels}}\n{{/panels}}\n        `;\n    };\n\n    DOCKER.tmpl = {\n        \"panels\": panels,\n        get: function (tmplName, data, columnKeys) {\n            return ax5.mustache.render(DOCKER.tmpl[tmplName].call(this, columnKeys), data);\n        }\n    };\n\n})();"]}