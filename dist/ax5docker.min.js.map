{"version":3,"sources":["ax5docker.min.js","ax5docker.js","ax5docker-tmpl.js"],"names":["UI","ax5","ui","U","util","addClass","className","version","ax5docker","_this","this","cfg","instanceId","getGuid","config","theme","animateTime","columnKeys","panels","panelId","modules","getPanelId","defaultModuleInit","container","state","html","name","getPanelPath","parent","pIndex","paths","panelPath","push","join","repaintPanels","buildPanel","_pane","moduleState","jQuery","extend","moduleContainer","$element","$item","moduleName","init","appendProcessor","stack","$parent","myself","$dom","activeIndex","append","isArray","forEach","P","active","_pIndex","type","panel","$label","icons","close","find","resizeHandel","row","column","$root","$target","off","on","e","console","log","stopEvent","$","parents","_config","target","onStateChanged","onClick","onLoad","onDataChanged","info","getError","setPanels","_panels","addModule","isObject","repaint","main","arguments","setConfig","apply","DOCKER","docker","tmpl","get","tmplName","data","mustache","render","call"],"mappings":"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","file":"ax5docker.min.js","sourcesContent":["\"use strict\";\n\n/*\n * Copyright (c) 2017. tom@axisj.com\n * - github.com/thomasjang\n * - www.axisj.com\n */\n\n(function () {\n\n    var UI = ax5.ui,\n        U = ax5.util;\n\n    UI.addClass({\n        className: \"docker\",\n        version: \"${VERSION}\"\n    }, function () {\n\n        /**\n         * @class ax5docker\n         * @classdesc\n         * @author tom@axisj.com\n         * @example\n         * ```\n         * var ax5docker = new ax5.ui.ax5docker();\n         * ```\n         */\n        var ax5docker = function ax5docker() {\n            var _this = this;\n\n            var self = this,\n                cfg = void 0;\n\n            this.instanceId = ax5.getGuid();\n            this.config = {\n                theme: 'default',\n                animateTime: 250,\n                columnKeys: {}\n            };\n            // 패널 정보\n            this.panels = [];\n            this.panelId = 0;\n\n            // 패널의 컨텐츠 모듈\n            this.modules = {};\n\n            cfg = this.config;\n\n            var getPanelId = function getPanelId() {\n                return _this.panelId++;\n            };\n\n            var defaultModuleInit = function defaultModuleInit(container, state) {\n                container[\"$element\"].html(state.name);\n            };\n\n            var getPanelPath = function getPanelPath(parent, pIndex) {\n                var paths = [];\n                if (parent && typeof parent.panelPath !== \"undefined\") {\n                    paths.push(parent.panelPath);\n                }\n\n                paths.push(pIndex || 0);\n                return paths.join(\".\");\n            };\n\n            var repaintPanels = function repaintPanels() {\n                var buildPanel = function buildPanel(_pane) {\n                    var moduleState = jQuery.extend(_pane.moduleState, {\n                        name: _pane.name\n                    }),\n                        moduleContainer = {\n                        '$element': _pane.$item\n                    };\n                    if (_pane.moduleName in _this.modules && 'init' in _this.modules[_pane.moduleName]) {\n                        _this.modules[_pane.moduleName].init(moduleContainer, moduleState);\n                    } else {\n                        defaultModuleInit(moduleContainer, moduleState);\n                    }\n                };\n\n                var appendProcessor = {\n                    stack: function stack($parent, parent, myself, pIndex) {\n\n                        var $dom = void 0,\n                            activeIndex = -1;\n                        myself.panelPath = getPanelPath(parent, pIndex);\n\n                        $dom = jQuery('<div data-ax5docker-pane=\"\" data-ax5docker-path=\"' + myself.panelPath + '\">' + '<ul data-ax5docker-pane-tabs=\"\"></ul>' + '<div data-ax5docker-pane-item-views=\"\"></div>' + '</div>');\n                        $parent.append($dom);\n\n                        if (U.isArray(myself.panels)) {\n                            myself.panels.forEach(function (P, pIndex) {\n                                if (myself.active) activeIndex = pIndex;\n                            });\n                            if (activeIndex === -1) activeIndex = 0;\n                            myself.panels[activeIndex].active = true;\n\n                            myself.panels.forEach(function (P, _pIndex) {\n                                appendProcessor[P.type]($dom, myself, P, _pIndex);\n                            });\n                        }\n\n                        $dom = null;\n                        activeIndex = null;\n                    },\n                    panel: function panel($parent, parent, myself, pIndex) {\n                        var $dom = void 0;\n                        myself.panelPath = getPanelPath(parent, pIndex);\n                        myself.$label = jQuery('<li data-ax5docker-pane-tab=\"' + pIndex + '\" data-ax5docker-path=\"' + myself.panelPath + '\">' + '<div class=\"title\">' + myself.name + '</div>' + '<div class=\"close-icon\">' + cfg.icons.close + '</div>' + '</li>');\n\n                        if (!myself.$item) {\n                            myself.$item = jQuery('<div data-ax5docker-pane-item=\"' + pIndex + '\" data-ax5docker-pane-id=\"' + getPanelId() + '\" data-ax5docker-path=\"' + myself.panelPath + '\"></div>');\n                        }\n\n                        if (parent && parent.type == \"stack\") {\n                            if (myself.active) {\n                                buildPanel(myself);\n                                myself.$label.addClass(\"active\");\n                                myself.$item.addClass(\"active\");\n                            }\n                            $parent.find('[data-ax5docker-pane-tabs]').append(myself.$label);\n                            $parent.find('[data-ax5docker-pane-item-views]').append(myself.$item);\n                        } else {\n                            $dom = jQuery('<div data-ax5docker-pane=\"\" data-ax5docker-path=\"' + myself.panelPath + '\">' + '<ul data-ax5docker-pane-tabs=\"\"></ul>' + '<div data-ax5docker-pane-item-views=\"\"></div>' + '</div>');\n\n                            buildPanel(myself);\n                            myself.$label.addClass(\"active\");\n                            myself.$item.addClass(\"active\");\n\n                            $dom.find('[data-ax5docker-pane-tabs]').append(myself.$label);\n                            $dom.find('[data-ax5docker-pane-item-views]').append(myself.$item);\n\n                            $parent.append($dom);\n                        }\n\n                        $dom = null;\n                    },\n                    resizeHandel: function resizeHandel($parent, parent, myself) {\n                        var $dom = jQuery('<div data-ax5docker-resize-handle=\"\"></div>');\n                        $parent.append($dom);\n                        $dom = null;\n                    },\n                    row: function row($parent, parent, myself, pIndex) {\n                        var $dom = void 0;\n                        myself.panelPath = getPanelPath(parent, pIndex);\n                        if (parent && parent.type == \"stack\") {\n                            throw \"The 'stack' type child nodes are allowed only for the 'panel' type.\";\n                        }\n                        $dom = jQuery('<div data-ax5docker-pane-axis=\"row\" data-ax5docker-path=\"' + myself.panelPath + '\"></div>');\n                        $parent.append($dom);\n\n                        if (U.isArray(myself.panels)) {\n                            myself.panels.forEach(function (P, _pIndex) {\n                                if (_pIndex > 0) appendProcessor[\"resizeHandel\"]($dom, P, myself, _pIndex);\n                                appendProcessor[P.type]($dom, myself, P, _pIndex);\n                            });\n                        }\n\n                        $dom = null;\n                    },\n                    column: function column($parent, parent, myself, pIndex) {\n                        var $dom = void 0;\n                        myself.panelPath = getPanelPath(parent, pIndex);\n                        if (parent && parent.type == \"stack\") {\n                            throw \"The 'stack' type child nodes are allowed only for the 'panel' type.\";\n                        }\n                        $dom = jQuery('<div data-ax5docker-pane-axis=\"column\" data-ax5docker-path=\"' + myself.panelPath + '\"></div>');\n                        $parent.append($dom);\n\n                        if (U.isArray(myself.panels)) {\n                            myself.panels.forEach(function (P, _pIndex) {\n                                if (pIndex > 0) appendProcessor[\"resizeHandel\"]($dom, P, myself, _pIndex);\n                                appendProcessor[P.type]($dom, myself, P, _pIndex);\n                            });\n                        }\n\n                        $dom = null;\n                    }\n                };\n\n                var $root = jQuery('<div data-ax5docker-panes=\"\"></div>');\n                appendProcessor[_this.panels[0].type]($root, null, _this.panels[0], 0);\n                _this.$target.html($root);\n\n                _this.$target.off(\"click\").on(\"click\", \"[data-ax5docker-pane-tab] .close-icon\", function (e) {\n                    console.log(\"close icon\");\n                    U.stopEvent(e);\n                }).on(\"click\", \"[data-ax5docker-pane-tab]\", function (e) {\n                    //console.log(e.originalEvent.target);\n                    console.log(\"click pane-tab\");\n\n                    console.log($(this).parents('[data-ax5docker-pane]'));\n\n                    U.stopEvent(e);\n                });\n                $root = null;\n            };\n\n            /**\n             * @method ax5docker.setConfig\n             * @param {Object} config\n             * @param {Array} config.panels\n             */\n            this.init = function (_config) {\n                cfg = jQuery.extend(true, {}, cfg, _config);\n                if (!cfg.target) {\n                    console.log(ax5.info.getError(\"ax5docker\", \"401\", \"init\"));\n                    return this;\n                }\n                // memory target\n                this.$target = jQuery(cfg.target);\n                // set panels\n                this.panels = cfg.panels || [];\n                // event Functions\n                this.onStateChanged = cfg.onStateChanged;\n                this.onClick = cfg.onClick;\n                this.onLoad = cfg.onLoad;\n                this.onDataChanged = cfg.onDataChanged;\n            };\n            /**\n             * @method ax5docker.setPanels\n             * @returns {ax5docker}\n             */\n            this.setPanels = function (_panels) {\n                // set panels\n                this.panels = _panels || [];\n\n                // 패널 다시 그리기\n                repaintPanels();\n                return this;\n            };\n\n            this.addModule = function (modules) {\n                if (U.isObject(modules)) {\n                    jQuery.extend(true, this.modules, modules);\n                }\n                return this;\n            };\n\n            this.repaint = function () {\n                // 패널 다시 그리기\n                repaintPanels();\n            };\n\n            // 클래스 생성자\n            this.main = function () {\n                if (arguments && U.isObject(arguments[0])) {\n                    this.setConfig(arguments[0]);\n                }\n            }.apply(this, arguments);\n        };\n\n        return ax5docker;\n    }());\n})();\n\n// todo : active 된 패널만 표시하기 -- ok\n// todo : row > stack 구현 -- ok\n// todo : stack 패널 active change\n// todo : resize\n// todo : 패널 추가 / 삭제 / 재구성\n// todo : 패널 drag & drop\n\n// ax5.ui.docker.tmpl\n(function () {\n\n    var DOCKER = ax5.ui.docker;\n\n    var panels = function panels(columnKeys) {\n        return \" \\n{{#panels}}\\n{{#panels}}\\n{{/panels}}\\n{{^panels}}\\n{{/panels}}\\n{{/panels}}\\n        \";\n    };\n\n    DOCKER.tmpl = {\n        \"panels\": panels,\n        get: function get(tmplName, data, columnKeys) {\n            return ax5.mustache.render(DOCKER.tmpl[tmplName].call(this, columnKeys), data);\n        }\n    };\n})();","/*\n * Copyright (c) 2017. tom@axisj.com\n * - github.com/thomasjang\n * - www.axisj.com\n */\n\n(function () {\n\n    let UI = ax5.ui,\n        U = ax5.util;\n\n    UI.addClass({\n        className: \"docker\",\n        version: \"${VERSION}\"\n    }, (function () {\n\n        /**\n         * @class ax5docker\n         * @classdesc\n         * @author tom@axisj.com\n         * @example\n         * ```\n         * var ax5docker = new ax5.ui.ax5docker();\n         * ```\n         */\n        let ax5docker = function () {\n            let self = this,\n                cfg;\n\n            this.instanceId = ax5.getGuid();\n            this.config = {\n                theme: 'default',\n                animateTime: 250,\n                columnKeys: {}\n            };\n            // 패널 정보\n            this.panels = [];\n            this.panelId = 0;\n\n            // 패널의 컨텐츠 모듈\n            this.modules = {};\n\n            cfg = this.config;\n\n            const getPanelId = () => {\n                return this.panelId++;\n            };\n\n            const defaultModuleInit = (container, state) => {\n                container[\"$element\"].html(state.name);\n            };\n\n            const getPanelPath = (parent, pIndex) => {\n                let paths = [];\n                if (parent && typeof parent.panelPath !== \"undefined\") {\n                    paths.push(parent.panelPath);\n                }\n\n                paths.push(pIndex || 0);\n                return paths.join(\".\");\n            };\n\n            const repaintPanels = () => {\n                const buildPanel = (_pane) => {\n                    let moduleState = jQuery.extend(_pane.moduleState, {\n                            name: _pane.name\n                        }),\n                        moduleContainer = {\n                            '$element': _pane.$item\n                        };\n                    if (_pane.moduleName in this.modules && 'init' in this.modules[_pane.moduleName]) {\n                        this.modules[_pane.moduleName].init(moduleContainer, moduleState);\n                    } else {\n                        defaultModuleInit(moduleContainer, moduleState);\n                    }\n                };\n\n                const appendProcessor = {\n                    stack($parent, parent, myself, pIndex){\n\n                        let $dom, activeIndex = -1;\n                        myself.panelPath = getPanelPath(parent, pIndex);\n\n                        $dom = jQuery('<div data-ax5docker-pane=\"\" data-ax5docker-path=\"' + myself.panelPath + '\">' +\n                            '<ul data-ax5docker-pane-tabs=\"\"></ul>' +\n                            '<div data-ax5docker-pane-item-views=\"\"></div>' +\n                            '</div>');\n                        $parent.append($dom);\n\n                        if (U.isArray(myself.panels)) {\n                            myself.panels.forEach(function (P, pIndex) {\n                                if (myself.active) activeIndex = pIndex;\n                            });\n                            if (activeIndex === -1) activeIndex = 0;\n                            myself.panels[activeIndex].active = true;\n\n                            myself.panels.forEach(function (P, _pIndex) {\n                                appendProcessor[P.type]($dom, myself, P, _pIndex);\n                            });\n                        }\n\n                        $dom = null;\n                        activeIndex = null;\n                    },\n                    panel($parent, parent, myself, pIndex){\n                        let $dom;\n                        myself.panelPath = getPanelPath(parent, pIndex);\n                        myself.$label = jQuery('<li data-ax5docker-pane-tab=\"' + pIndex + '\" data-ax5docker-path=\"' + myself.panelPath + '\">' +\n                            '<div class=\"title\">' + myself.name + '</div>' +\n                            '<div class=\"close-icon\">' + cfg.icons.close + '</div>' +\n                            '</li>');\n\n                        if (!myself.$item) {\n                            myself.$item = jQuery('<div data-ax5docker-pane-item=\"' + pIndex + '\" data-ax5docker-pane-id=\"' + getPanelId() + '\" data-ax5docker-path=\"' + myself.panelPath + '\"></div>');\n                        }\n\n                        if (parent && parent.type == \"stack\") {\n                            if (myself.active) {\n                                buildPanel(myself);\n                                myself.$label.addClass(\"active\");\n                                myself.$item.addClass(\"active\");\n                            }\n                            $parent.find('[data-ax5docker-pane-tabs]').append(myself.$label);\n                            $parent.find('[data-ax5docker-pane-item-views]').append(myself.$item);\n                        } else {\n                            $dom = jQuery('<div data-ax5docker-pane=\"\" data-ax5docker-path=\"' + myself.panelPath + '\">' +\n                                '<ul data-ax5docker-pane-tabs=\"\"></ul>' +\n                                '<div data-ax5docker-pane-item-views=\"\"></div>' +\n                                '</div>');\n\n                            buildPanel(myself);\n                            myself.$label.addClass(\"active\");\n                            myself.$item.addClass(\"active\");\n\n                            $dom.find('[data-ax5docker-pane-tabs]').append(myself.$label);\n                            $dom.find('[data-ax5docker-pane-item-views]').append(myself.$item);\n\n                            $parent.append($dom);\n                        }\n\n                        $dom = null;\n                    },\n                    resizeHandel($parent, parent, myself){\n                        let $dom = jQuery('<div data-ax5docker-resize-handle=\"\"></div>');\n                        $parent.append($dom);\n                        $dom = null;\n                    },\n                    row($parent, parent, myself, pIndex){\n                        let $dom;\n                        myself.panelPath = getPanelPath(parent, pIndex);\n                        if (parent && parent.type == \"stack\") {\n                            throw \"The 'stack' type child nodes are allowed only for the 'panel' type.\";\n                        }\n                        $dom = jQuery('<div data-ax5docker-pane-axis=\"row\" data-ax5docker-path=\"' + myself.panelPath + '\"></div>');\n                        $parent.append($dom);\n\n                        if (U.isArray(myself.panels)) {\n                            myself.panels.forEach(function (P, _pIndex) {\n                                if (_pIndex > 0) appendProcessor[\"resizeHandel\"]($dom, P, myself, _pIndex);\n                                appendProcessor[P.type]($dom, myself, P, _pIndex);\n                            });\n                        }\n\n                        $dom = null;\n                    },\n                    column($parent, parent, myself, pIndex){\n                        let $dom;\n                        myself.panelPath = getPanelPath(parent, pIndex);\n                        if (parent && parent.type == \"stack\") {\n                            throw \"The 'stack' type child nodes are allowed only for the 'panel' type.\";\n                        }\n                        $dom = jQuery('<div data-ax5docker-pane-axis=\"column\" data-ax5docker-path=\"' + myself.panelPath + '\"></div>');\n                        $parent.append($dom);\n\n                        if (U.isArray(myself.panels)) {\n                            myself.panels.forEach(function (P, _pIndex) {\n                                if (pIndex > 0) appendProcessor[\"resizeHandel\"]($dom, P, myself, _pIndex);\n                                appendProcessor[P.type]($dom, myself, P, _pIndex);\n                            });\n                        }\n\n                        $dom = null;\n                    }\n                };\n\n                let $root = jQuery('<div data-ax5docker-panes=\"\"></div>');\n                appendProcessor[this.panels[0].type]($root, null, this.panels[0], 0);\n                this.$target.html($root);\n\n\n                this.$target\n                    .off(\"click\")\n                    .on(\"click\", \"[data-ax5docker-pane-tab] .close-icon\", function (e) {\n                        console.log(\"close icon\");\n                        U.stopEvent(e);\n                    })\n                    .on(\"click\", \"[data-ax5docker-pane-tab]\", function (e) {\n                        //console.log(e.originalEvent.target);\n                        console.log(\"click pane-tab\");\n\n                        console.log($(this).parents('[data-ax5docker-pane]'));\n\n                        U.stopEvent(e);\n                    });\n                $root = null;\n            };\n\n\n            /**\n             * @method ax5docker.setConfig\n             * @param {Object} config\n             * @param {Array} config.panels\n             */\n            this.init = function (_config) {\n                cfg = jQuery.extend(true, {}, cfg, _config);\n                if (!cfg.target) {\n                    console.log(ax5.info.getError(\"ax5docker\", \"401\", \"init\"));\n                    return this;\n                }\n                // memory target\n                this.$target = jQuery(cfg.target);\n                // set panels\n                this.panels = cfg.panels || [];\n                // event Functions\n                this.onStateChanged = cfg.onStateChanged;\n                this.onClick = cfg.onClick;\n                this.onLoad = cfg.onLoad;\n                this.onDataChanged = cfg.onDataChanged;\n            };\n            /**\n             * @method ax5docker.setPanels\n             * @returns {ax5docker}\n             */\n            this.setPanels = function (_panels) {\n                // set panels\n                this.panels = _panels || [];\n\n                // 패널 다시 그리기\n                repaintPanels();\n                return this;\n            };\n\n            this.addModule = function (modules) {\n                if (U.isObject(modules)) {\n                    jQuery.extend(true, this.modules, modules);\n                }\n                return this;\n            };\n\n            this.repaint = function () {\n                // 패널 다시 그리기\n                repaintPanels();\n            };\n\n            // 클래스 생성자\n            this.main = (function () {\n                if (arguments && U.isObject(arguments[0])) {\n                    this.setConfig(arguments[0]);\n                }\n            }).apply(this, arguments);\n\n        };\n\n        return ax5docker;\n    })());\n\n})();\n\n// todo : active 된 패널만 표시하기 -- ok\n// todo : row > stack 구현 -- ok\n// todo : stack 패널 active change\n// todo : resize\n// todo : 패널 추가 / 삭제 / 재구성\n// todo : 패널 drag & drop\n","// ax5.ui.docker.tmpl\n(function () {\n\n    let DOCKER = ax5.ui.docker;\n\n    let panels = function (columnKeys) {\n        return ` \n{{#panels}}\n{{#panels}}\n{{/panels}}\n{{^panels}}\n{{/panels}}\n{{/panels}}\n        `;\n    };\n\n    DOCKER.tmpl = {\n        \"panels\": panels,\n        get: function (tmplName, data, columnKeys) {\n            return ax5.mustache.render(DOCKER.tmpl[tmplName].call(this, columnKeys), data);\n        }\n    };\n\n})();"]}