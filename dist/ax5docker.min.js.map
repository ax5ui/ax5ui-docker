{"version":3,"sources":["ax5docker.js","ax5docker-tmpl.js"],"names":["UI","ax5","ui","U","util","DOCKER","addClass","className","version","ax5docker","_this","this","self","cfg","instanceId","getGuid","config","theme","animateTime","columnKeys","control","icons","close","more","labelDirection","disableClosePanel","disableDragPanel","resizeDebounceTime","panelDebounceTime","xvar","menu","onResize","panels","panelId","modules","debouncer","resizeDebounceFn","debounce","fn","panelDebounceFn","fireEvent","event","eventProcessor","resize","e","that","resizer","target","resizedDom","prev","next","call","bind","eventName","getPanelId","defaultModule","init","container","state","html","name","active","deactive","destroy","getPanelPath","parent","pIndex","paths","panelPath","push","join","getPanel","_panelPath","path","_path","isArray","concat","split","forEach","n","replace","Function","getPanelParent","_panel","substr","lastIndexOf","setPanel","_value","getMousePosition","mouseObj","originalEvent","changedTouches","clientX","pageX","clientY","pageY","controlPanel","_control","moduleState","jQuery","extend","moduleContainer","$element","$item","module","processor","builded","moduleName","$label","$pane","get","clientWidth","scrollWidth","animate","scrollLeft","position","left","removeClass","arrangePanel","remove","panel","controlType","runProcessor","isFunction","after","before","repaintPanels","appendProcessor","stack","$parent","myself","$dom","activeIndex","tmpl","append","P","_pIndex","panelIndex","type","attr","find","flexGrow","resizeHandle","row","column","$root","$target","off","on","removePanel","$","parents","stopEvent","$clickedLabel","pane","hasClass","changeActiveStackPanel","openStackPanelMore","panelTabDragEvent","datas","getAttribute","mousePosition","resizerType","resizerPath","resizerIndex","resizer$dom","resizerParent$dom","resizerPrevGrow","number","css","resizerNextGrow","resizerCanvasWidth","innerWidth","width","resizerCanvasHeight","innerHeight","height","panelResizerEvent","alignStackPane","p","pl","length","stackPane","$stackPane","panePath","console","log","menuItems","map","index","label","setConfig","items","onClick","popup","_resizer","document","body","da_grow","resizerLived","__da","round","flex-grow","$prevPanel","$nextPanel","prevPane","nextPane","removeAttr","dragPanel","dragger","dragOverVertical","dragOverHorizontal","dragover","dragoverDom","$dragoverDom","box","mouse","offset","halfWidth","draggerProcessor","right","threeQuarterHeight","threeQuarterWidth","top","left-top","right-top","center-top","left-middle","right-middle","center-middle","left-bottom","right-bottom","center-bottom","isDrop","appendType","appendPanel","each","$this","panelsDeactive","newObj","_p","_config","onStateChanged","onLoad","onDataChanged","arrow","window","id","info","getError","setPanels","_panels","addModule","isObject","repaint","addPanel","_addPath","_addType","_panelIndex","addPath","a","b","panelProcessor","_pane","copyPanel","addProcessor","stack-left","splice","stack-right","Number","row-left","parentPath","parentPane","row-right","column-top","column-bottom","_appendPath","_appendType","copiedPanel","addType","removePanelPath","appendPanelIndex","undefined","align","main","docker_instance","arguments","apply","docker","stack_panel","data","panel_label","stack-panel","panel-label","tmplName","mustache","render"],"mappings":"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","file":"ax5docker.min.js","sourcesContent":["/*\n * Copyright (c) 2017. tom@axisj.com\n * - github.com/thomasjang\n * - www.axisj.com\n */\n\n(function () {\n\n\n    const UI = ax5.ui,\n        U = ax5.util;\n\n    let DOCKER;\n\n    UI.addClass({\n            className: \"docker\",\n            version: \"${VERSION}\"\n        }, (function () {\n\n            /**\n             * @class ax5docker\n             * @classdesc\n             * @author tom@axisj.com\n             * @example\n             * ```\n             * var ax5docker = new ax5.ui.ax5docker();\n             * ```\n             */\n            let ax5docker = function () {\n\n                let self = this,\n                    cfg;\n\n                this.instanceId = ax5.getGuid();\n\n                /**\n                 * @member {Object} ax5docker.config\n                 */\n                this.config = {\n                    theme: 'default',\n                    animateTime: 250,\n                    columnKeys: {},\n                    control: {},\n                    icons: {\n                        close: 'X',\n                        more: '...'\n                    },\n                    labelDirection: 'top',\n                    disableClosePanel: false,\n                    disableDragPanel: false,\n                    resizeDebounceTime: 100,\n                    panelDebounceTime: 300,\n                };\n\n                /**\n                 * @member {Object} ax5docker.xvar\n                 */\n                this.xvar = {};\n                /**\n                 * @member {Object} ax5docker.menu\n                 */\n                this.menu = null;\n\n                this.onResize = null;\n\n                // 패널 정보\n                /**\n                 * @member {Array} ax5docker.panels\n                 */\n                this.panels = [];\n                /**\n                 * @member {Number} ax5docker.panelId\n                 */\n                this.panelId = 0;\n\n                // 패널의 컨텐츠 모듈\n                /**\n                 * @member {Object} ax5docker.modules\n                 */\n                this.modules = {};\n\n                cfg = this.config;\n\n                /**\n                 * @private {Object} ax5docker.debouncer\n                 */\n                const debouncer = {\n                    resizeDebounceFn: ax5.util.debounce(function (fn) {\n                        fn();\n                    }, cfg.resizeDebounceTime),\n                    panelDebounceFn: ax5.util.debounce(function (fn) {\n                        fn();\n                    }, cfg.panelDebounceTime)\n                };\n\n                /**\n                 * @private {Function} fireEvent\n                 * @param event\n                 * @returns {ax5docker}\n                 */\n                const fireEvent = (event) => {\n                    const eventProcessor = {\n                        \"resize\"(e){\n                            if (this.onResize) {\n\n\n                                debouncer.resizeDebounceFn((function () {\n                                    let that = {\n                                        self: this,\n                                        resizer: e.target,\n                                        resizedDom: [e.target.prev(), e.target.next()]\n                                    };\n                                    this.onResize.call(that, that);\n                                }).bind(this));\n                            }\n                        }\n                    };\n\n                    if (event.eventName in eventProcessor) {\n                        eventProcessor[event.eventName].call(this, event);\n                    }\n\n                    return this;\n                };\n\n                const getPanelId = () => {\n                    return this.panelId++;\n                };\n\n                /**\n                 * defaultModule은 패널의 모듈이 정의되지 않은 경우를 위해 준비된 오브젝트\n                 */\n                const defaultModule = {\n                    init(container, state){\n                        container[\"$element\"].html(state.name);\n                    },\n                    active(container, state){\n\n                    },\n                    deactive(container, state){\n\n                    },\n                    destroy(container, state){\n\n                    }\n                };\n\n                /**\n                 * 부모패널과 패널인덱스 값으로 패널 패스를 구합니다.\n                 * @param parent\n                 * @param pIndex\n                 * @returns {string}\n                 */\n                const getPanelPath = (parent, pIndex) => {\n                    let paths = [];\n                    if (parent && typeof parent.panelPath !== \"undefined\") {\n                        paths.push(parent.panelPath);\n                    }\n\n                    paths.push('panels[' + (pIndex || 0) + ']');\n                    return paths.join(\".\");\n                };\n\n                /**\n                 * 패널패스를 이용하여 패널을 가져옵니다\n                 * @param _panelPath\n                 * @returns {*}\n                 */\n                const getPanel = (_panelPath) => {\n                    let path = [],\n                        _path = (U.isArray(_panelPath)) ? [].concat(_panelPath) : [].concat(_panelPath.split(/[\\.\\[\\]]/g));\n\n                    _path.forEach(function (n) {\n                        if (n !== \"\") path.push(\"[\\\"\" + n.replace(/['\\\"]/g, \"\") + \"\\\"]\");\n                    });\n\n                    try {\n                        return (Function(\"\", \"return this\" + path.join('') + \";\")).call(this);\n                    } catch (e) {\n                        return;\n                    }\n                };\n\n                /**\n                 * 패널을 이용하여 패널의 부모 패널을 가져옵니다\n                 * @param _panel\n                 */\n                const getPanelParent = (_panel) => {\n                    try {\n                        let _path = _panel.panelPath.substr(0, _panel.panelPath.lastIndexOf(\".\"));\n                        return (Function(\"\", \"return this.\" + _path + \";\")).call(this);\n                    } catch (e) {\n                        return;\n                    }\n                };\n\n                /**\n                 * 패널패스를 이용하여 패널오브젝트에 값을 부여합니다.\n                 * @param _panelPath\n                 * @param _value\n                 * @returns {*}\n                 */\n                const setPanel = (_panelPath, _value) => {\n                    let path = [],\n                        _path = (U.isArray(_panelPath)) ? [].concat(_panelPath) : [].concat(_panelPath.split(/[\\.\\[\\]]/g));\n\n                    _path.forEach(function (n) {\n                        if (n !== \"\") path.push(\"[\\\"\" + n.replace(/['\\\"]/g, \"\") + \"\\\"]\");\n                    });\n\n                    return (Function(\"val\", \"return this\" + path.join('') + \" = val;\")).call(this, _value);\n                };\n\n                /**\n                 * get mouse position\n                 * @param e\n                 * @returns {{clientX, clientY}}\n                 */\n                const getMousePosition = (e) => {\n                    let mouseObj, originalEvent = (e.originalEvent) ? e.originalEvent : e;\n                    mouseObj = ('changedTouches' in originalEvent) ? originalEvent.changedTouches[0] : originalEvent;\n                    // clientX, Y 쓰면 스크롤에서 문제 발생\n                    return {\n                        clientX: mouseObj.pageX,\n                        clientY: mouseObj.pageY\n                    }\n                };\n\n                /**\n                 * 패널의 모듈이 초기화, 활성화, 비활성, 제거 되는 일들을 제어하는 함수.\n                 * 모든 컨트롤은 실행되기전에 사용자가 정의한 control.before 함수의 결과에 따라 실행 여부를 결정합니다. 사용자가 control.before를 정의하지 않으면 무조건 실행합니다.\n                 * @param {Object} _panel\n                 * @param {String} _control - \"init\",\"active\",\"deactive\",\"destroy\"\n                 */\n                const controlPanel = (_panel, _control) => {\n                    let moduleState = jQuery.extend(_panel.moduleState, {\n                            name: _panel.name\n                        }),\n                        moduleContainer = {\n                            '$element': _panel.$item\n                        },\n                        module;\n\n                    let processor = {\n                        init: () => {\n                            _panel.builded = true;\n                            module = (_panel.moduleName in this.modules && 'init' in this.modules[_panel.moduleName]) ? this.modules[_panel.moduleName] : defaultModule;\n                            module.init(moduleContainer, moduleState);\n                        },\n                        active: () => {\n                            _panel.active = true;\n                            _panel.$label.addClass(\"active\");\n                            _panel.$item.addClass(\"active\");\n\n                            let $pane = _panel.$label.parent();\n                            if ($pane.get(0) && $pane.get(0).clientWidth !== $pane.get(0).scrollWidth) {\n                                $pane.animate({scrollLeft: _panel.$label.position().left}, 300);\n                            }\n\n                            module = (_panel.moduleName in this.modules && 'active' in this.modules[_panel.moduleName]) ? this.modules[_panel.moduleName] : defaultModule;\n                            module.active(moduleContainer, moduleState);\n                            $pane = null;\n                        },\n                        deactive: () => {\n                            _panel.active = false;\n                            _panel.$label.removeClass(\"active\");\n                            _panel.$item.removeClass(\"active\");\n                            module = (_panel.moduleName in this.modules && 'deactive' in this.modules[_panel.moduleName]) ? this.modules[_panel.moduleName] : defaultModule;\n                            module.deactive(moduleContainer, moduleState);\n                        },\n                        destroy: () => {\n                            module = (_panel.moduleName in this.modules && 'destroy' in this.modules[_panel.moduleName]) ? this.modules[_panel.moduleName] : defaultModule;\n                            module.destroy(moduleContainer, moduleState);\n\n                            // 패널 데이터 제거.\n                            setPanel(_panel.panelPath, null);\n                            // 현재 패널 정보를 검사하여 패널 정보를 재 구성합니다.\n                            arrangePanel();\n                        },\n                        remove: () => {\n                            module = (_panel.moduleName in this.modules && 'destroy' in this.modules[_panel.moduleName]) ? this.modules[_panel.moduleName] : defaultModule;\n                            module.destroy(moduleContainer, moduleState);\n\n                            // 패널 데이터 제거.\n                            setPanel(_panel.panelPath, null);\n                            // 현재 패널 정보를 검사하여 패널 정보를 재 구성합니다.\n                            arrangePanel();\n                        },\n                    };\n\n                    // 사용자정의 함수 control.before, control.after에 전달할 인자 = that\n                    let that = {\n                        panel: _panel,\n                        controlType: _control\n                    };\n\n                    // 비동기 처리 상황에 대응하기 위해 runProcessor를 별도 처리\n                    let runProcessor = () => {\n                        processor[_control]();\n                        module = null;\n\n                        if (U.isFunction(cfg.control.after)) {\n                            cfg.control.after.call(that, that);\n                        }\n                    };\n\n                    if (processor[_control]) {\n                        if (U.isFunction(cfg.control.before)) {\n                            cfg.control.before.call(that, that, function () {\n                                runProcessor();\n                            });\n                        }\n                        else {\n                            runProcessor();\n                        }\n                    }\n                };\n\n                /**\n                 * 패널들의 패널 데이터 구조에 맞게 다시 그리기\n                 */\n                const repaintPanels = () => {\n                    const appendProcessor = {\n                        stack($parent, parent, myself, pIndex){\n\n                            let $dom, activeIndex = -1;\n                            myself.panelPath = getPanelPath(parent, pIndex);\n\n                            $dom = jQuery(DOCKER.tmpl.get.call(this, \"stack-panel\", {\n                                name: myself.name,\n                                panelPath: myself.panelPath,\n                                icons: cfg.icons,\n                                labelDirection: myself.labelDirection || cfg.labelDirection,\n                                disableClosePanel: cfg.disableClosePanel,\n                                disableDragPanel: cfg.disableDragPanel,\n                            }, {}));\n                            $parent.append($dom);\n\n                            if (U.isArray(myself.panels)) {\n                                myself.panels.forEach(function (P, pIndex) {\n                                    if (P.active) activeIndex = pIndex;\n                                });\n                                if (activeIndex === -1) activeIndex = 0;\n                                myself.panels[activeIndex].active = true;\n\n                                myself.panels.forEach(function (P, _pIndex) {\n                                    P.panelIndex = _pIndex;\n                                    appendProcessor[P.type]($dom, myself, P, _pIndex);\n                                });\n                            }\n\n                            $dom = null;\n                            activeIndex = null;\n                        },\n                        panel($parent, parent, myself, pIndex){\n                            let $dom;\n                            myself.panelPath = getPanelPath(parent, pIndex);\n                            myself.$label = jQuery(DOCKER.tmpl.get.call(this, \"panel-label\", {\n                                pIndex: pIndex,\n                                name: myself.name,\n                                panelPath: myself.panelPath,\n                                icons: cfg.icons,\n                                disableClosePanel: cfg.disableClosePanel,\n                                disableDragPanel: cfg.disableDragPanel,\n                            }, {}));\n\n                            if (!myself.$item) {\n                                myself.$item = jQuery('<div data-ax5docker-pane-item=\"' + pIndex + '\" data-ax5docker-pane-id=\"' + getPanelId() + '\" data-ax5docker-path=\"' + myself.panelPath + '\"></div>');\n                            } else {\n                                myself.$item.attr(\"data-ax5docker-path\", myself.panelPath);\n                                myself.$item.attr(\"data-ax5docker-pane-item\", pIndex);\n                            }\n\n                            if (parent && parent.type == \"stack\") {\n                                if (myself.active) {\n                                    if (!myself.builded) controlPanel(myself, \"init\");\n                                    controlPanel(myself, \"active\");\n                                }\n                                $parent.find('[data-ax5docker-pane-tabs]').append(myself.$label);\n                                $parent.find('[data-ax5docker-pane-item-views]').append(myself.$item);\n                            } else {\n                                $dom = jQuery(DOCKER.tmpl.get.call(this, \"stack-panel\", {\n                                    name: myself.name,\n                                    panelPath: myself.panelPath,\n                                    flexGrow: myself.flexGrow,\n                                    icons: cfg.icons,\n                                    labelDirection: myself.labelDirection || cfg.labelDirection,\n                                    disableClosePanel: cfg.disableClosePanel,\n                                    disableDragPanel: cfg.disableDragPanel,\n                                }, {}));\n\n                                if (!myself.builded) controlPanel(myself, \"init\");\n                                controlPanel(myself, \"active\");\n\n                                $dom.find('[data-ax5docker-pane-tabs]').append(myself.$label);\n                                $dom.find('[data-ax5docker-pane-item-views]').append(myself.$item);\n\n                                $parent.append($dom);\n                            }\n\n                            $dom = null;\n                        },\n                        resizeHandle($parent, parent, myself, pIndex){\n                            let $dom = jQuery('<div data-ax5docker-resize-handle=\"' + parent.type + \"/\" + parent.panelPath + \"/\" + pIndex + '\"></div>');\n                            $parent.append($dom);\n                            $dom = null;\n                        },\n                        row($parent, parent, myself, pIndex){\n                            let $dom;\n                            myself.panelPath = getPanelPath(parent, pIndex);\n                            if (parent && parent.type == \"stack\") {\n                                throw \"The 'stack' type child nodes are allowed only for the 'panel' type.\";\n                            }\n                            $dom = jQuery('<div data-ax5docker-pane-axis=\"row\" data-ax5docker-path=\"' + myself.panelPath + '\" style=\"flex-grow: ' + (myself.flexGrow || 1) + ';\"></div>');\n                            $parent.append($dom);\n\n                            if (U.isArray(myself.panels)) {\n                                myself.panels.forEach(function (P, _pIndex) {\n                                    if (_pIndex > 0) appendProcessor[\"resizeHandle\"]($dom, myself, P, _pIndex);\n                                    P.panelIndex = _pIndex;\n                                    appendProcessor[P.type]($dom, myself, P, _pIndex);\n                                });\n                            }\n\n                            $dom = null;\n                        },\n                        column($parent, parent, myself, pIndex){\n                            let $dom;\n                            myself.panelPath = getPanelPath(parent, pIndex);\n                            if (parent && parent.type == \"stack\") {\n                                throw \"The 'stack' type child nodes are allowed only for the 'panel' type.\";\n                            }\n                            $dom = jQuery('<div data-ax5docker-pane-axis=\"column\" data-ax5docker-path=\"' + myself.panelPath + '\" style=\"flex-grow: ' + (myself.flexGrow || 1) + ';\"></div>');\n                            $parent.append($dom);\n\n                            if (U.isArray(myself.panels)) {\n                                myself.panels.forEach(function (P, _pIndex) {\n                                    if (_pIndex > 0) appendProcessor[\"resizeHandle\"]($dom, myself, P, _pIndex);\n                                    P.panelIndex = _pIndex;\n                                    appendProcessor[P.type]($dom, myself, P, _pIndex);\n                                });\n                            }\n\n                            $dom = null;\n                        }\n                    };\n\n                    let $root = jQuery('<div data-ax5docker-panes=\"\"></div>');\n                    if (this.panels[0]) appendProcessor[this.panels[0].type]($root, null, this.panels[0], 0);\n                    this.$target.html($root);\n\n                    this.$target\n                        .off(\"click.ax5docker-pane\")\n                        .on(\"click.ax5docker-pane\", \"[data-ax5docker-pane-tab] .close-icon\", function (e) {\n                            self.removePanel($(this).parents('[data-ax5docker-pane-tab]').attr(\"data-ax5docker-path\"));\n                            U.stopEvent(e);\n                        })\n                        .on(\"click.ax5docker-pane\", \"[data-ax5docker-pane-tab]\", function (e) {\n                            // pane, panelIndex 인자 변경.\n                            let $clickedLabel = jQuery(this);\n                            let pane = getPanel($clickedLabel.parents('[data-ax5docker-pane]').attr(\"data-ax5docker-path\"));\n                            let panelIndex = $clickedLabel.attr(\"data-ax5docker-pane-tab\");\n\n                            if (!$clickedLabel.hasClass(\"active\")) {\n                                changeActiveStackPanel(pane, panelIndex);\n                            }\n\n                            $clickedLabel = null;\n                            pane = null;\n                            panelIndex = null;\n                            U.stopEvent(e);\n                        })\n                        .on(\"click.ax5docker-pane\", \"[data-ax5docker-pane-tabs-more]\", function (e) {\n                            openStackPanelMore($(this).parents('[data-ax5docker-pane]'), e);\n                            U.stopEvent(e);\n                        });\n\n                    this.$target\n                        .off(\"mousedown.ax5docker-pane-resize\")\n                        .off(\"dragstart.ax5docker-pane-resize\")\n                        .on(\"dragstart.ax5docker-pane-resize\", \"[data-ax5docker-pane-tab]\", function (e) {\n                            if (!cfg.disableDragPanel) {\n                                panelTabDragEvent.on(this);\n                            }\n                        })\n                        .on(\"mousedown.ax5docker-pane-resize\", \"[data-ax5docker-resize-handle]\", function (e) {\n                            let datas = this.getAttribute(\"data-ax5docker-resize-handle\").split(/\\//g);\n\n                            // panelResizerEvent.init\n                            self.xvar.mousePosition = getMousePosition(e);\n                            self.xvar.resizerType = datas[0];\n                            self.xvar.resizerPath = datas[1];\n                            self.xvar.resizerIndex = datas[2];\n                            // 주변 패널들\n                            self.xvar.resizer$dom = $(this);\n                            self.xvar.resizerParent$dom = self.xvar.resizer$dom.parent();\n                            self.xvar.resizerPrevGrow = U.number(self.xvar.resizer$dom.prev().css(\"flex-grow\"));\n                            self.xvar.resizerNextGrow = U.number(self.xvar.resizer$dom.next().css(\"flex-grow\"));\n\n                            if (self.xvar.resizerType == \"row\") {\n                                //self.xvar.resizerCanvasWidth = self.xvar.resizerParent$dom.innerWidth();\n                                self.xvar.resizerCanvasWidth = self.xvar.resizer$dom.prev().innerWidth() + self.xvar.resizer$dom.next().innerWidth() + self.xvar.resizer$dom.width();\n                            } else {\n                                //self.xvar.resizerCanvasHeight = self.xvar.resizerParent$dom.innerHeight();\n                                self.xvar.resizerCanvasHeight = self.xvar.resizer$dom.prev().innerHeight() + self.xvar.resizer$dom.next().innerHeight() + self.xvar.resizer$dom.height();\n                            }\n\n                            panelResizerEvent.on(this);\n                            U.stopEvent(e);\n                        })\n                        .on(\"dragstart.ax5docker-pane-resize\", \"[data-ax5docker-resize-handle]\", function (e) {\n                            U.stopEvent(e);\n                            return false;\n                        });\n\n                    // stackPane tabs 스크롤처리\n                    alignStackPane();\n                    $root = null;\n                };\n\n                /**\n                 * 액티브 패널 변경(stack인 상황에서)\n                 * @param pane\n                 * @param panelIndex\n                 * @returns {boolean}\n                 */\n                const changeActiveStackPanel = (pane, panelIndex) => {\n                    let panel = pane.panels[panelIndex];\n\n                    for (let p = 0, pl = pane.panels.length; p < pl; p++) {\n                        if (pane.panels[p].active) {\n                            controlPanel(pane.panels[p], \"deactive\");\n                        }\n                    }\n\n                    if (!panel.builded) controlPanel(panel, \"init\");\n                    controlPanel(panel, \"active\");\n\n                    pane = null;\n                    panelIndex = null;\n                    panel = null;\n                    return this;\n                };\n\n                /**\n                 * stackTab의 더보기 아이콘이 클릭되면~~~\n                 * @param stackPane\n                 * @param e\n                 * @returns {ax5docker}\n                 */\n                const openStackPanelMore = (stackPane, e) => {\n                    let $stackPane = jQuery(stackPane),\n                        panePath = $stackPane.attr(\"data-ax5docker-path\"),\n                        pane = getPanel(panePath);\n\n                    if (this.menu) {\n                        let menuItems = U.map(pane.panels, function (index) {\n                            return {\n                                label: this.name,\n                                index: index,\n                                panePath: panePath\n                            }\n                        });\n\n                        this.menu.setConfig({\n                            items: menuItems,\n                            onClick: function () {\n                                //console.log(pane);\n                                changeActiveStackPanel(getPanel(this.panePath), this.index);\n                            }\n                        });\n\n                        this.menu.popup(e);\n                    } else {\n                        console.log(pane.panels);\n                        throw \"'ax5ui-menu' is required to implement the function.\";\n                    }\n\n                    $stackPane = null;\n                    panePath = null;\n                    pane = null;\n                    return this;\n                };\n\n                /**\n                 * repaintPanels이 작동할 때. 리사이저에 mousedown 이벤트를 연결합니다.\n                 * 발생된 이벤트가 panelResizerEvent.on 을 작동시켜 리사이저를 움직이게 합니다\n                 */\n                const panelResizerEvent = {\n                    \"on\": (_resizer) => {\n\n                        jQuery(document.body)\n                            .on(\"mousemove.ax5docker-\" + this.instanceId, function (e) {\n                                let mouseObj = getMousePosition(e),\n                                    da_grow;\n\n                                if (self.xvar.resizerLived) {\n                                    if (self.xvar.resizerType == \"row\") {\n                                        self.xvar.__da = mouseObj.clientX - self.xvar.mousePosition.clientX;\n                                        da_grow = U.number(self.xvar.__da * 2 / self.xvar.resizerCanvasWidth, {round: 6});\n\n                                        self.xvar.resizer$dom.prev().css({\"flex-grow\": self.xvar.resizerPrevGrow + da_grow});\n                                        self.xvar.resizer$dom.next().css({\"flex-grow\": self.xvar.resizerNextGrow - da_grow});\n                                    } else {\n                                        self.xvar.__da = mouseObj.clientY - self.xvar.mousePosition.clientY;\n                                        da_grow = U.number(self.xvar.__da * 2 / self.xvar.resizerCanvasHeight, {round: 6});\n\n                                        self.xvar.resizer$dom.prev().css({\"flex-grow\": self.xvar.resizerPrevGrow + da_grow});\n                                        self.xvar.resizer$dom.next().css({\"flex-grow\": self.xvar.resizerNextGrow - da_grow});\n                                    }\n\n                                    fireEvent({\n                                        eventName: \"resize\",\n                                        target: self.xvar.resizer$dom\n                                    });\n                                } else {\n                                    self.xvar.resizerLived = true;\n                                }\n\n                                mouseObj = null;\n                                da_grow = null;\n                            })\n                            .on(\"mouseup.ax5docker-\" + this.instanceId, function (e) {\n                                panelResizerEvent.off();\n                                U.stopEvent(e);\n                            })\n                            .on(\"mouseleave.ax5docker-\" + this.instanceId, function (e) {\n                                panelResizerEvent.off();\n                                U.stopEvent(e);\n                            });\n\n                        jQuery(document.body)\n                            .attr('unselectable', 'on')\n                            .css('user-select', 'none')\n                            .on('selectstart', false);\n                    },\n                    \"off\": () => {\n                        self.xvar.resizerLived = false;\n\n                        if (typeof this.xvar.__da === \"undefined\") {\n\n                        }\n                        else {\n                            let $prevPanel = self.xvar.resizer$dom.prev(),\n                                $nextPanel = self.xvar.resizer$dom.next(),\n                                prevPane = getPanel($prevPanel.attr(\"data-ax5docker-path\")),\n                                nextPane = getPanel($nextPanel.attr(\"data-ax5docker-path\"));\n\n                            prevPane.flexGrow = U.number($prevPanel.css(\"flex-grow\"));\n                            nextPane.flexGrow = U.number($nextPanel.css(\"flex-grow\"));\n\n                            $prevPanel = null;\n                            $nextPanel = null;\n                            prevPane = null;\n                            nextPane = null;\n                        }\n\n                        jQuery(document.body)\n                            .off(\"mousemove.ax5docker-\" + this.instanceId)\n                            .off(\"mouseup.ax5docker-\" + this.instanceId)\n                            .off(\"mouseleave.ax5docker-\" + this.instanceId);\n\n                        jQuery(document.body)\n                            .removeAttr('unselectable')\n                            .css('user-select', 'auto')\n                            .off('selectstart');\n                    }\n                };\n\n                /**\n                 * repaintPanels이 작동할 때. 패널탭에 dragStart 이벤트를 연결합니다.\n                 * 발생된 이벤트가 panelTabDragEvent.on를 작동.\n                 */\n                const panelTabDragEvent = {\n                    \"on\": (dragPanel) => {\n                        if (this.panels[0] && this.panels[0].panels && this.panels[0].panels.length) {\n\n                            this.xvar.dragger = {\n                                dragPanel: dragPanel,\n                                target: null,\n                                dragOverVertical: null,\n                                dragOverHorizontal: null,\n                            };\n\n                            this.$target\n                                .on(\"dragover.ax5docker-\" + this.instanceId, '[data-ax5docker-path]', function (e) {\n                                    // todo : dragover 구현\n                                    // console.log(\"dargover\", getMousePosition(e));\n                                    // console.log(e.target);\n                                    panelTabDragEvent.dragover(this, e);\n                                    U.stopEvent(e);\n                                })\n                                .on(\"drop.ax5docker-\" + this.instanceId, function (e) {\n                                    panelTabDragEvent.off(\"drop\");\n                                    U.stopEvent(e);\n                                })\n                                .on(\"dragend.ax5docker-\" + this.instanceId, function (e) {\n                                    panelTabDragEvent.off();\n                                    U.stopEvent(e);\n                                });\n                        }\n                    },\n                    \"dragover\": (dragoverDom, e) => {\n\n                        let $dragoverDom = jQuery(dragoverDom),\n                            box = {},\n                            mouse = getMousePosition(e),\n                            dragOverVertical,\n                            dragOverHorizontal;\n\n                        if (this.xvar.dragger.target == null || this.xvar.dragger.target.get(0) != $dragoverDom.get(0)) {\n                            if (this.xvar.dragger.target) this.xvar.dragger.target.removeAttr(\"data-dropper\");\n\n                            this.xvar.dragger.target = $dragoverDom;\n                            this.xvar.dragger.dragOverVertical = null;\n                            this.xvar.dragger.dragOverHorizontal = null;\n                        }\n\n                        box = $dragoverDom.offset();\n                        box.width = $dragoverDom.width();\n                        box.height = $dragoverDom.height();\n\n                        if ($dragoverDom.attr(\"data-ax5docker-pane-tab\")) {\n                            let halfWidth = box.width / 2;\n                            if (box.left <= mouse.clientX && (box.left + halfWidth) >= mouse.clientX) {\n                                dragOverHorizontal = \"left\";\n                            }\n                            else if ((box.left + halfWidth) <= mouse.clientX && (box.left + halfWidth * 2) >= mouse.clientX) {\n                                dragOverHorizontal = \"right\";\n                            }\n                            if (this.xvar.dragger.dragOverHorizontal != dragOverHorizontal && typeof dragOverHorizontal != \"undefined\") {\n                                this.xvar.dragger.dragOverHorizontal = dragOverHorizontal;\n                                const draggerProcessor = {\n                                    \"left\"($target){\n                                        $target.attr(\"data-dropper\", \"left\");\n                                    },\n                                    \"right\"($target){\n                                        $target.attr(\"data-dropper\", \"right\");\n                                    },\n                                };\n                                if (this.xvar.dragger.dragOverHorizontal in draggerProcessor) {\n                                    draggerProcessor[this.xvar.dragger.dragOverHorizontal](this.xvar.dragger.target);\n                                }\n                            }\n                            halfWidth = null;\n                        }\n                        else if ($dragoverDom.attr(\"data-ax5docker-pane-tabs\")) {\n                            //this.xvar.dragger.dragOverVertical = \"center\";\n                            this.xvar.dragger.dragOverHorizontal = \"right\";\n                            this.xvar.dragger.target.attr(\"data-dropper\", \"true\");\n                        }\n                        else if ($dragoverDom.attr(\"data-ax5docker-pane-item\")) {\n                            // panel dragover 포지션 구하기\n                            let threeQuarterHeight = box.height / 3;\n                            let threeQuarterWidth = box.width / 3;\n\n                            if (box.top <= mouse.clientY && (box.top + threeQuarterHeight) >= mouse.clientY) {\n                                dragOverVertical = \"top\";\n                            }\n                            else if ((box.top + threeQuarterHeight) <= mouse.clientY && (box.top + threeQuarterHeight * 2) >= mouse.clientY) {\n                                dragOverVertical = \"middle\";\n                            }\n                            else if ((box.top + threeQuarterHeight * 2) <= mouse.clientY && (box.top + threeQuarterHeight * 3) >= mouse.clientY) {\n                                dragOverVertical = \"bottom\";\n                            }\n\n                            if (box.left <= mouse.clientX && (box.left + threeQuarterWidth) >= mouse.clientX) {\n                                dragOverHorizontal = \"left\";\n                            }\n                            else if ((box.left + threeQuarterWidth) <= mouse.clientX && (box.left + threeQuarterWidth * 2) >= mouse.clientX) {\n                                dragOverHorizontal = \"center\";\n                            }\n                            else if ((box.left + threeQuarterWidth * 2) <= mouse.clientX && (box.left + threeQuarterWidth * 3) >= mouse.clientX) {\n                                dragOverHorizontal = \"right\";\n                            }\n\n                            if (this.xvar.dragger.dragOverVertical != dragOverVertical || this.xvar.dragger.dragOverHorizontal != dragOverHorizontal) {\n                                this.xvar.dragger.dragOverVertical = dragOverVertical;\n                                this.xvar.dragger.dragOverHorizontal = dragOverHorizontal;\n\n                                var draggerProcessor = {\n                                    \"left-top\"($target){\n                                        $target.attr(\"data-dropper\", \"left\");\n                                    },\n                                    \"right-top\"($target){\n                                        $target.attr(\"data-dropper\", \"right\");\n                                    },\n                                    \"center-top\"($target){\n                                        $target.attr(\"data-dropper\", \"top\");\n                                    },\n                                    \"left-middle\"($target){\n                                        $target.attr(\"data-dropper\", \"left\");\n                                    },\n                                    \"right-middle\"($target){\n                                        $target.attr(\"data-dropper\", \"right\");\n                                    },\n                                    \"center-middle\"($target){\n                                        $target.attr(\"data-dropper\", \"center\");\n                                    },\n                                    \"left-bottom\"($target){\n                                        $target.attr(\"data-dropper\", \"left\");\n                                    },\n                                    \"right-bottom\"($target){\n                                        $target.attr(\"data-dropper\", \"right\");\n                                    },\n                                    \"center-bottom\"($target){\n                                        $target.attr(\"data-dropper\", \"bottom\");\n                                    },\n                                };\n                                if (this.xvar.dragger.dragOverHorizontal + \"-\" + this.xvar.dragger.dragOverVertical in draggerProcessor) {\n                                    draggerProcessor[this.xvar.dragger.dragOverHorizontal + \"-\" + this.xvar.dragger.dragOverVertical](this.xvar.dragger.target);\n                                }\n                            }\n\n                            threeQuarterHeight = null;\n                            threeQuarterWidth = null;\n                        }\n\n\n                    },\n                    \"off\": (isDrop) => {\n                        if (isDrop) {\n                            let dragPanel = getPanel(this.xvar.dragger.dragPanel.getAttribute(\"data-ax5docker-path\")),\n                                appendType = [];\n\n                            if (this.xvar.dragger.dragOverHorizontal) appendType.push(this.xvar.dragger.dragOverHorizontal);\n                            if (this.xvar.dragger.dragOverVertical) appendType.push(this.xvar.dragger.dragOverVertical);\n\n                            this.appendPanel(dragPanel, this.xvar.dragger.target.attr(\"data-ax5docker-path\"), appendType);\n\n                            dragPanel = null;\n                            appendType = null;\n                        }\n\n                        this.$target\n                            .off(\"dragover.ax5docker-\" + this.instanceId)\n                            .off(\"drop.ax5docker-\" + this.instanceId)\n                            .off(\"dragend.ax5docker-\" + this.instanceId);\n\n                        this.xvar.dragger.target.removeAttr(\"data-dropper\");\n                    }\n                };\n\n\n                /**\n                 * stackPane이 리사이즈 되면 탭을 스크롤여부를 판단해야 합니다.\n                 */\n                const alignStackPane = () => {\n                    debouncer.panelDebounceFn((function () {\n                        this.$target.find('[data-ax5docker-pane-tabs]').each(function () {\n                            let $this = jQuery(this).parent();\n                            if (this.scrollWidth > this.clientWidth) {\n                                $this.addClass(\"tabs-scrolled\");\n                            } else {\n                                $this.removeClass(\"tabs-scrolled\");\n                            }\n                            $this = null;\n                        });\n                    }).bind(this));\n                };\n\n                const panelsDeactive = (panels) => {\n                    if (U.isArray(panels)) {\n                        panels.forEach(function (p) {\n                            //p.active = false;\n                            //p.$item.removeClass(\"active\");\n                            controlPanel(p, \"deactive\");\n                        });\n                    } else {\n                        //panels.active = false;\n                        //panels.$item.removeClass(\"active\");\n                        controlPanel(panels, \"deactive\");\n                    }\n                };\n\n                /**\n                 * 패널중에 null이 된 요소를 찾아 panels를 정리 합니다.\n                 * @returns {*}\n                 */\n                const arrangePanel = () => {\n                    // console.log(this.$target.find('[data-ax5docker-pane]'));\n                    const panels = [];\n                    const processor = {\n                        stack(myself){\n                            if (!U.isArray(myself.panels)) return false;\n\n                            let newObj = {\n                                type: \"stack\",\n                                panels: []\n                            };\n\n                            myself.panels.forEach(function (P, _pIndex) {\n                                if (P) {\n                                    let _p = processor[P.type](P);\n                                    if (_p) newObj.panels.push(_p);\n                                    _p = null;\n                                }\n                            });\n\n                            if (newObj.panels.length == 0) {\n                                return null;\n                            } else if (newObj.panels.length < 2) {\n                                newObj = newObj.panels[0];\n                            }\n\n                            return newObj;\n                        },\n                        panel(myself){\n                            //console.log(myself);\n                            return myself;\n                        },\n                        row(myself){\n\n                            if (!U.isArray(myself.panels)) return false;\n\n                            let newObj = {\n                                type: \"row\",\n                                panels: []\n                            };\n\n                            myself.panels.forEach(function (P, _pIndex) {\n                                if (P) {\n                                    let _p = processor[P.type](P);\n                                    if (_p) newObj.panels.push(_p);\n                                    _p = null;\n                                }\n                            });\n\n                            if (newObj.panels.length == 0) {\n                                return null;\n                            } else if (newObj.panels.length < 2) {\n                                newObj = newObj.panels[0];\n                            }\n\n                            return newObj;\n                        },\n                        column(myself){\n                            if (!U.isArray(myself.panels)) return false;\n\n                            let newObj = {\n                                type: \"column\",\n                                panels: []\n                            };\n\n                            myself.panels.forEach(function (P, _pIndex) {\n                                if (P) {\n                                    let _p = processor[P.type](P);\n                                    if (_p) newObj.panels.push(_p);\n                                    _p = null;\n                                }\n                            });\n\n                            if (newObj.panels.length == 0) {\n                                return null;\n                            } else if (newObj.panels.length < 2) {\n                                newObj = newObj.panels[0];\n                            }\n\n                            return newObj;\n                        },\n                    };\n\n                    if (this.panels[0]) {\n                        this.panels[0] = processor[this.panels[0].type](this.panels[0]);\n                    } else {\n                        this.panels = [];\n                    }\n\n                    repaintPanels();\n                };\n\n                /**\n                 * @method ax5docker.setConfig\n                 * @param {Object} config\n                 * @param {Element} config.target\n                 * @param {Array} config.panels\n                 * @param {Object} [config.icons]\n                 * @param {String} [config.icons.close]\n                 * @param {String} [config.icons.more]\n                 * @param {Boolean} [config.disableClosePanel=false]\n                 * @param {Boolean} [config.disableDragPanel=false]\n                 * @param {Object} [config.control]\n                 * @param {Function} [config.control.before]\n                 * @param {Function} [config.control.after]\n                 * @param {Object} [config.menu]\n                 * @param {String} [config.menu.theme=\"default\"]\n                 * @param {String} [config.menu.position=\"absolute\"]\n                 * @param {Object} [config.menu.icons]\n                 * @param {String} [config.menu.icons.arrow]\n                 * @param {Number} [config.resizeDebounceTime=100]\n                 * @param {Number} [config.panelDebounceTime=300]\n                 * @example\n                 * ```js\n                 * var myDocker = new ax5.ui.docker();\n                 * myDocker.setConfig({\n                 *      target: $('[data-ax5docker=\"docker1\"]'),\n                 *      panels: [\n                 *          {\n                 *              type: \"panel\",\n                 *              name: \"panel name\",\n                 *              moduleName: \"content\",\n                 *              moduleState:{\n                 *                  data: \"data1\"\n                 *              }\n                 *          }\n                 *      ]\n                 * });\n                 * ```\n                 */\n                this.init = function (_config) {\n                    cfg = jQuery.extend(true, {}, cfg, _config);\n                    if (!cfg.target) {\n                        console.log(ax5.info.getError(\"ax5docker\", \"401\", \"init\"));\n                        return this;\n                    }\n\n                    // 이벤트 정의 영역\n                    this.onResize = cfg.onResize;\n\n                    // memory target\n                    this.$target = jQuery(cfg.target);\n                    // set panels\n                    this.panels = cfg.panels || [];\n                    // event Functions\n                    this.onStateChanged = cfg.onStateChanged;\n                    this.onClick = cfg.onClick;\n                    this.onLoad = cfg.onLoad;\n                    this.onDataChanged = cfg.onDataChanged;\n\n                    if (ax5.ui.menu) {\n                        this.menu = new ax5.ui.menu({\n                            theme: 'default',\n                            position: \"absolute\",\n                            icons: {\n                                'arrow': '▸'\n                            }\n                        });\n                    }\n\n                    jQuery(window).bind(\"resize.ax5docker-\" + this.id, function () {\n                        // stackPane tabs 스크롤처리\n                        alignStackPane();\n                    });\n                };\n\n                /**\n                 * @method ax5docker.setPanels\n                 * @returns {ax5docker}\n                 */\n                this.setPanels = function (_panels) {\n                    // set panels\n                    this.panels = _panels || [];\n\n                    // 패널 다시 그리기\n                    repaintPanels();\n                    return this;\n                };\n\n                /**\n                 * @method ax5docker.addModule\n                 * @param modules\n                 * @returns {ax5docker}\n                 */\n                this.addModule = function (modules) {\n                    if (U.isObject(modules)) {\n                        jQuery.extend(true, this.modules, modules);\n                    }\n                    return this;\n                };\n\n                /**\n                 * repaint panels of docker\n                 * @method ax5docker.repaint\n                 * @returns {ax5docker}\n                 */\n                this.repaint = function () {\n                    // 패널 다시 그리기\n                    repaintPanels();\n                    return this;\n                };\n\n                /**\n                 * @method ax5docker.addPanel\n                 * @param {String} _addPath - Position path to add panel\n                 * @param _addType\n                 * @param _panel\n                 * @param _panelIndex\n                 * @returns {ax5docker}\n                 * @example\n                 * ```js\n                 * myDocker.addPanel('0.1', 'stack', {type:'panel', name:'addPanel', moduleName: 'content'});\n                 *\n                 * ```\n                 */\n                this.addPanel = function (_addPath, _addType, _panel, _panelIndex) {\n                    let addPath = \"\";\n                    let pane;\n                    let parent;\n\n                    if (this.panels.length === 0 || !this.panels[0]) {\n                        return this.setPanels([{type: \"stack\", panels: [_panel]}]);\n                    } else {\n                        if (_addPath == \"undefined\") {\n                            addPath = \"0\";\n                        } else {\n                            addPath = _addPath\n                                .replace(/[a-zA-Z\\[\\]]+/g, \"\")\n                                .replace(/(\\d+)/g, function (a, b) {\n                                    return \"panels[\" + a + \"]\";\n                                });\n                        }\n                        pane = getPanel(addPath);\n                        parent = getPanelParent(pane);\n                    }\n\n                    if (parent && parent.type == \"stack\") {\n                        // 부모패널로 ~\n                        //console.log(addPath, _addPath);\n                        pane = parent;\n                        addPath = pane.panelPath;\n                    }\n                    let panelProcessor = {\n                        \"stack\"(_pane, _addType, _panel, _panelIndex){\n                            let copyPanel = jQuery.extend({}, _pane),\n                                addProcessor = {\n                                    \"stack\"(_pane, _panel){\n                                        if (_panel.active) {\n                                            panelsDeactive(_pane.panels);\n                                        }\n                                        _pane.panels.push(_panel);\n                                        arrangePanel();\n                                    },\n                                    \"stack-left\"(_pane, _panel){\n                                        if (_panel.active) {\n                                            panelsDeactive(_pane.panels);\n                                        }\n                                        _pane.panels.splice(_panelIndex, 0, _panel);\n                                        arrangePanel();\n                                    },\n                                    \"stack-right\"(_pane, _panel){\n                                        if (_panel.active) {\n                                            panelsDeactive(_pane.panels);\n                                        }\n                                        _pane.panels.splice(Number(_panelIndex) + 1, 0, _panel);\n                                        arrangePanel();\n                                    },\n                                    \"row-left\"(_pane, _panel){\n                                        let parentPath = addPath.substr(0, addPath.lastIndexOf(\".\"));\n                                        let parentPane = getPanel(parentPath);\n                                        if (parentPane && parentPane.type == \"row\") {\n                                            this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                        } else {\n                                            _pane = setPanel(addPath, {\n                                                type: \"row\",\n                                                panels: []\n                                            });\n                                            _pane.panels.push(_panel);\n                                            _pane.panels.push(copyPanel);\n                                            arrangePanel();\n                                        }\n                                    },\n                                    \"row-right\"(_pane, _panel){\n                                        let parentPath = addPath.substr(0, addPath.lastIndexOf(\".\"));\n                                        let parentPane = getPanel(parentPath);\n                                        if (parentPane && parentPane.type == \"row\") {\n                                            this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                        } else {\n                                            _pane = setPanel(addPath, {\n                                                type: \"row\",\n                                                panels: []\n                                            });\n                                            _pane.panels.push(copyPanel);\n                                            _pane.panels.push(_panel);\n                                            arrangePanel();\n                                        }\n                                    },\n                                    \"column-top\"(_pane, _panel){\n                                        let parentPath = addPath.substr(0, addPath.lastIndexOf(\".\"));\n                                        let parentPane = getPanel(parentPath);\n                                        if (parentPane && parentPane.type == \"column\") {\n                                            this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                        } else {\n                                            _pane = setPanel(addPath, {\n                                                type: \"column\",\n                                                panels: []\n                                            });\n                                            _pane.panels.push(_panel);\n                                            _pane.panels.push(copyPanel);\n                                            arrangePanel();\n                                        }\n                                    },\n                                    \"column-bottom\"(_pane, _panel){\n                                        let parentPath = addPath.substr(0, addPath.lastIndexOf(\".\"));\n                                        let parentPane = getPanel(parentPath);\n                                        if (parentPane && parentPane.type == \"column\") {\n                                            this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                        } else {\n                                            _pane = setPanel(addPath, {\n                                                type: \"column\",\n                                                panels: []\n                                            });\n                                            _pane.panels.push(copyPanel);\n                                            _pane.panels.push(_panel);\n                                            arrangePanel();\n                                        }\n                                    }\n                                };\n                            if (_addType in addProcessor) {\n                                addProcessor[_addType].call(this, _pane, _panel);\n                            }\n\n                            copyPanel = null;\n                            addProcessor = null;\n                        },\n                        \"row\"(_pane, _addType, _panel, _panelIndex){\n                            let copyPanel = jQuery.extend({}, _pane),\n                                addProcessor = {\n                                    \"stack\"(_pane, _panel){\n                                        // 처리 할 수 없는 상황 첫번째 자식을 찾아 재 요청\n                                        if (_pane.panels[0] && _pane.panels[0].panelPath) {\n                                            this.addPanel(_pane.panels[0].panelPath, _addType, _panel);\n                                        }\n                                    },\n                                    \"row-left\"(_pane, _panel, _panelIndex){\n                                        _pane.panels.splice(_panelIndex, 0, _panel);\n                                        arrangePanel();\n                                    },\n                                    \"row-right\"(_pane, _panel, _panelIndex){\n                                        _pane.panels.splice(_panelIndex + 1, 0, _panel);\n                                        arrangePanel();\n                                    },\n                                    \"column-top\"(_pane, _panel, _panelIndex){\n                                        let parentPath = addPath.substr(0, addPath.lastIndexOf(\".\"));\n                                        let parentPane = getPanel(parentPath);\n                                        if (parentPane && parentPane.type == \"column\") {\n                                            this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                        } else {\n                                            _pane = setPanel(addPath, {\n                                                type: \"column\",\n                                                panels: []\n                                            });\n                                            _pane.panels.push(_panel);\n                                            _pane.panels.push(copyPanel);\n                                            arrangePanel();\n                                        }\n                                    },\n                                    \"column-bottom\"(_pane, _panel, _panelIndex){\n                                        let parentPath = addPath.substr(0, addPath.lastIndexOf(\".\"));\n                                        let parentPane = getPanel(parentPath);\n                                        if (parentPane && parentPane.type == \"column\") {\n                                            this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                        } else {\n                                            _pane = setPanel(addPath, {\n                                                type: \"column\",\n                                                panels: []\n                                            });\n                                            _pane.panels.push(copyPanel);\n                                            _pane.panels.push(_panel);\n                                            arrangePanel();\n                                        }\n                                    }\n                                };\n                            if (_addType in addProcessor) {\n                                addProcessor[_addType].call(this, _pane, _panel, _panelIndex);\n                            }\n\n                            addProcessor = null;\n                            copyPanel = null;\n                        },\n                        \"column\"(_pane, _addType, _panel, _panelIndex){\n                            let copyPanel = jQuery.extend({}, _pane),\n                                addProcessor = {\n                                    \"stack\"(_pane, _panel){\n                                        if (_pane.panels[0] && _pane.panels[0].panelPath) {\n                                            this.addPanel(_pane.panels[0].panelPath, _addType, _panel);\n                                        }\n                                    },\n                                    \"row-left\"(_pane, _panel){\n                                        let parentPath = addPath.substr(0, addPath.lastIndexOf(\".\"));\n                                        let parentPane = getPanel(parentPath);\n                                        if (parentPane && parentPane.type == \"row\") {\n                                            this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                        } else {\n                                            _pane = setPanel(addPath, {\n                                                type: \"row\",\n                                                panels: []\n                                            });\n                                            _pane.panels.push(_panel);\n                                            _pane.panels.push(copyPanel);\n                                            arrangePanel();\n                                        }\n                                    },\n                                    \"row-right\"(_pane, _panel){\n                                        let parentPath = addPath.substr(0, addPath.lastIndexOf(\".\"));\n                                        let parentPane = getPanel(parentPath);\n                                        if (parentPane && parentPane.type == \"row\") {\n                                            this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                        } else {\n                                            _pane = setPanel(addPath, {\n                                                type: \"row\",\n                                                panels: []\n                                            });\n                                            _pane.panels.push(copyPanel);\n                                            _pane.panels.push(_panel);\n                                            arrangePanel();\n                                        }\n                                    },\n                                    \"column-top\"(_pane, _panel){\n                                        _pane.panels.splice(_panelIndex, 0, _panel);\n                                        arrangePanel();\n                                    },\n                                    \"column-bottom\"(_pane, _panel){\n                                        _pane.panels.splice(_panelIndex + 1, 0, _panel);\n                                        arrangePanel();\n                                    }\n                                };\n                            if (_addType in addProcessor) {\n                                addProcessor[_addType].call(this, _pane, _panel);\n                            }\n\n                            addProcessor = null;\n                            copyPanel = null;\n                        },\n                        \"panel\"(_pane, _addType, _panel){\n                            let copyPanel = jQuery.extend({}, _pane),\n                                addProcessor = {\n                                    \"stack\"(_pane, _panel){\n                                        // _pane stack으로 재구성\n                                        _pane = setPanel(addPath, {\n                                            type: \"stack\",\n                                            panels: []\n                                        });\n\n                                        if (_panel.active) {\n                                            panelsDeactive(copyPanel);\n                                        }\n\n                                        _pane.panels.push(copyPanel);\n                                        _pane.panels.push(_panel);\n                                        arrangePanel();\n                                    },\n                                    \"stack-left\"(_pane, _panel){\n                                        // _pane stack으로 재구성\n                                        _pane = setPanel(addPath, {\n                                            type: \"stack\",\n                                            panels: []\n                                        });\n\n                                        if (_panel.active) {\n                                            panelsDeactive(copyPanel);\n                                        }\n                                        _pane.panels.push(_panel);\n                                        _pane.panels.push(copyPanel);\n                                        arrangePanel();\n                                    },\n                                    \"stack-right\"(_pane, _panel){\n                                        // _pane stack으로 재구성\n                                        _pane = setPanel(addPath, {\n                                            type: \"stack\",\n                                            panels: []\n                                        });\n\n                                        if (_panel.active) {\n                                            panelsDeactive(copyPanel);\n                                        }\n                                        _pane.panels.push(copyPanel);\n                                        _pane.panels.push(_panel);\n                                        arrangePanel();\n                                    },\n                                    \"row-left\"(_pane, _panel){\n                                        let parentPath = addPath.substr(0, addPath.lastIndexOf(\".\"));\n                                        let parentPane = getPanel(parentPath);\n                                        if (parentPane && parentPane.type == \"row\" || parentPane.type == \"column\") {\n                                            this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                        } else {\n                                            _pane = setPanel(addPath, {\n                                                type: \"row\",\n                                                panels: []\n                                            });\n                                            _pane.panels.push(_panel);\n                                            _pane.panels.push(copyPanel);\n                                            arrangePanel();\n                                        }\n                                    },\n                                    \"row-right\"(_pane, _panel){\n                                        let parentPath = addPath.substr(0, addPath.lastIndexOf(\".\"));\n                                        let parentPane = getPanel(parentPath);\n                                        if (parentPane && parentPane.type == \"row\" || parentPane.type == \"column\") {\n                                            this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                        } else {\n                                            _pane = setPanel(addPath, {\n                                                type: \"row\",\n                                                panels: []\n                                            });\n                                            _pane.panels.push(copyPanel);\n                                            _pane.panels.push(_panel);\n                                            arrangePanel();\n                                        }\n                                    },\n                                    \"column-top\"(_pane, _panel){\n                                        let parentPath = addPath.substr(0, addPath.lastIndexOf(\".\"));\n                                        let parentPane = getPanel(parentPath);\n                                        if (parentPane && parentPane.type == \"column\" || parentPane.type == \"row\") {\n                                            this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                        } else {\n                                            _pane = setPanel(addPath, {\n                                                type: \"column\",\n                                                panels: []\n                                            });\n                                            _pane.panels.push(_panel);\n                                            _pane.panels.push(copyPanel);\n                                            arrangePanel();\n                                        }\n                                    },\n                                    \"column-bottom\"(_pane, _panel){\n                                        let parentPath = addPath.substr(0, addPath.lastIndexOf(\".\"));\n                                        let parentPane = getPanel(parentPath);\n\n                                        if (parentPane && parentPane.type == \"column\" || parentPane.type == \"row\") {\n                                            this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                        } else {\n                                            _pane = setPanel(addPath, {\n                                                type: \"column\",\n                                                panels: []\n                                            });\n                                            _pane.panels.push(copyPanel);\n                                            _pane.panels.push(_panel);\n                                            arrangePanel();\n                                        }\n                                    }\n                                };\n\n                            if (_addType in addProcessor) {\n                                addProcessor[_addType].call(this, _pane, _panel);\n                            }\n\n                            copyPanel = null;\n                            addProcessor = null;\n                        }\n                    };\n\n                    if ((pane) ? pane.type : \"stack\" in panelProcessor) {\n                        panelProcessor[(pane) ? pane.type : \"stack\"].call(this, pane, _addType, _panel, _panelIndex);\n                    }\n\n                    return this;\n                };\n\n                /**\n                 * 패널 삭제하기\n                 * @method ax5docker.removePanel\n                 * @param clickedLabel\n                 * @returns {ax5docker}\n                 */\n                this.removePanel = function (panelPath) {\n                    let panel = getPanel(panelPath);\n\n                    controlPanel(panel, \"destroy\");\n\n                    panel = null;\n                    return this;\n                };\n\n                /**\n                 * @method ax5docker.appendPanel\n                 * @param _panel\n                 * @param _appendPath\n                 * @param _appendType\n                 * @returns {ax5docker}\n                 */\n                this.appendPanel = function (_panel, _appendPath, _appendType) {\n                    \n                    let copiedPanel = $.extend({}, _panel, {panelPath: \"\"}),\n                        addType;\n                    \n                    let removePanelPath = _panel.panelPath;\n                    let appendPanelIndex = U.right(_appendPath, \".\").replace(/\\D/g, \"\");\n\n                    if (_appendType.length == 0) {\n                        return this;\n                    }\n\n                    if (_panel.panelPath === _appendPath) {\n                        let parentPath = _appendPath.substr(0, _appendPath.lastIndexOf(\".\"));\n                        let parentPane = getPanel(parentPath);\n                        if (parentPane.type != \"stack\") {\n                            return this;\n                        }\n                    }\n\n                    if (_appendType.length == 1) { // stack\n                        addType = \"stack-\" + _appendType[0];\n                        copiedPanel.active = false;\n                        copiedPanel.$item.removeClass(\"active\");\n                        controlPanel(copiedPanel, \"deactive\");\n\n                    } else {\n                        switch (_appendType[0] + \"-\" + _appendType[1]) {\n                            case \"left-top\":\n                                addType = \"row-left\";\n                                break;\n                            case \"left-middle\":\n                                addType = \"row-left\";\n                                break;\n                            case \"left-bottom\":\n                                addType = \"row-left\";\n                                break;\n                            case \"center-top\":\n                                addType = \"column-top\";\n                                break;\n                            case \"center-middle\":\n                                addType = \"stack\";\n                                copiedPanel.active = false;\n                                copiedPanel.$item.removeClass(\"active\");\n                                appendPanelIndex = undefined;\n                                controlPanel(copiedPanel, \"deactive\");\n                                break;\n                            case \"center-bottom\":\n                                addType = \"column-bottom\";\n                                break;\n                            case \"right-top\":\n                                addType = \"row-right\";\n                                break;\n                            case \"right-middle\":\n                                addType = \"row-right\";\n                                break;\n                            case \"right-bottom\":\n                                addType = \"row-right\";\n                                break;\n                        }\n                    }\n\n                    if (_panel.panelPath === _appendPath) {\n                        // 부모레벨로 이동\n                        _appendPath = U.left(_appendPath, \".\");\n                    }\n                    // todo : deactive call\n\n                    setPanel(removePanelPath, null);\n                    this.addPanel(_appendPath, addType, copiedPanel, appendPanelIndex);\n\n                    copiedPanel = null;\n                    return this;\n                };\n\n                /**\n                 * @method ax5docker.align\n                 * @returns {ax5docker}\n                 */\n                this.align = function () {\n                    alignStackPane();\n                    return this;\n                };\n\n                // 클래스 생성자\n                this.main = (function () {\n                    UI.docker_instance = UI.docker_instance || [];\n                    UI.docker_instance.push(this);\n\n                    if (arguments && U.isObject(arguments[0])) {\n                        this.setConfig(arguments[0]);\n                    }\n                }).apply(this, arguments);\n\n            };\n\n            return ax5docker;\n        })()\n    );\n\n    DOCKER = ax5.ui.docker;\n})();","// ax5.ui.docker.tmpl\n(function () {\n\n    let DOCKER = ax5.ui.docker;\n\n    let stack_panel = function (columnKeys, data) {\n        if(data.labelDirection === \"bottom\"){\n            return `<div data-ax5docker-pane=\"\" data-ax5docker-label-direction=\"{{labelDirection}}\" data-ax5docker-path=\"{{panelPath}}\" style=\"flex-grow: {{#flexGrow}}{{.}}{{/flexGrow}}{{^flexGrow}}1{{/flexGrow}};\">\n    <div data-ax5docker-pane-item-views=\"\"></div>\n    <ul data-ax5docker-pane-tabs=\"true\" data-ax5docker-path=\"{{panelPath}}\"></ul>\n    <div data-ax5docker-pane-tabs-more=\"\">{{{icons.more}}}</div>\n</div>`;\n        }else{\n            return `<div data-ax5docker-pane=\"\" data-ax5docker-label-direction=\"{{labelDirection}}\" data-ax5docker-path=\"{{panelPath}}\" style=\"flex-grow: {{#flexGrow}}{{.}}{{/flexGrow}}{{^flexGrow}}1{{/flexGrow}};\">\n    <ul data-ax5docker-pane-tabs=\"true\" data-ax5docker-path=\"{{panelPath}}\"></ul>\n    <div data-ax5docker-pane-tabs-more=\"\">{{{icons.more}}}</div>\n    <div data-ax5docker-pane-item-views=\"\"></div>\n</div>`;\n        }\n    };\n\n    let panel_label = function () {\n        return `<li data-ax5docker-pane-tab=\"{{pIndex}}\" data-ax5docker-path=\"{{panelPath}}\">\n    <div class=\"title\">{{{name}}}</div>\n    {{^disableClosePanel}}<div class=\"close-icon\">{{{icons.close}}}</div>{{/disableClosePanel}}\n</li><li class=\"pane-tab-margin\"></li>`;\n    };\n\n    DOCKER.tmpl = {\n        \"stack-panel\": stack_panel,\n        \"panel-label\": panel_label,\n\n        get: function (tmplName, data, columnKeys) {\n            return ax5.mustache.render(DOCKER.tmpl[tmplName].call(this, columnKeys, data), data);\n        }\n    };\n\n})();"]}