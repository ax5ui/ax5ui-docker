{"version":3,"sources":["ax5docker.min.js","ax5docker.js","ax5docker-tmpl.js"],"names":["UI","ax5","ui","U","util","addClass","className","version","ax5docker","_this","this","self","cfg","instanceId","getGuid","config","theme","animateTime","columnKeys","control","icons","close","more","xvar","menu","panels","panelId","modules","getPanelId","defaultModule","init","container","state","html","name","active","deactive","destroy","getPanelPath","parent","pIndex","paths","panelPath","push","join","getPanel","_panelPath","path","_path","isArray","concat","split","forEach","n","replace","Function","call","e","setPanel","_value","getMousePosition","mouseObj","originalEvent","changedTouches","clientX","pageX","clientY","pageY","controlPanel","_panel","_control","moduleState","jQuery","extend","moduleContainer","$element","$item","module","processor","builded","moduleName","$label","$pane","get","clientWidth","scrollWidth","animate","scrollLeft","position","left","removeClass","arrangePanel","that","panel","controlType","runProcessor","isFunction","after","before","repaintPanels","appendProcessor","stack","$parent","myself","$dom","activeIndex","flexGrow","append","P","_pIndex","panelIndex","type","find","resizeHandle","row","column","$root","$target","off","on","closePanel","$","parents","stopEvent","$clickedLabel","pane","attr","hasClass","changeActiveStackPanel","openStackPanelMore","panelTabDragEvent","datas","getAttribute","mousePosition","resizerType","resizerPath","resizerIndex","resizer$dom","resizerParent$dom","resizerPrevGrow","number","prev","css","resizerNextGrow","next","resizerCanvasWidth","innerWidth","width","resizerCanvasHeight","innerHeight","height","panelResizerEvent","alignStackPane","p","pl","length","clickedLabel","stackPane","$stackPane","panePath","console","log","menuItems","map","index","label","setConfig","items","onClick","popup","_resizer","$resizer","offset","document","body","da_grow","resizerLived","__da","round","flex-grow","$prevPanel","$nextPanel","prevPane","nextPane","removeAttr","dragger","target","dragOverVertical","dragOverHorizontal","dragover","dragoverDom","$dragoverDom","box","mouse","halfWidth","draggerProcessor","right","threeQuarterHeight","threeQuarterWidth","top","left-top","right-top","center-top","left-middle","right-middle","center-middle","left-bottom","right-bottom","center-bottom","debounceFn","debounce","fn","each","$this","bind","newObj","_p","_config","onStateChanged","onLoad","onDataChanged","arrow","window","id","info","getError","setPanels","_panels","addModule","isObject","repaint","addPanel","_addPath","_addType","_panelIndex","a","b","panelProcessor","_pane","copyPanel","addProcessor","row-left","parentPath","substr","lastIndexOf","parentPane","row-right","column-top","column-bottom","splice","main","arguments","apply","DOCKER","docker","tmpl","tmplName","data","mustache","render"],"mappings":"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","file":"ax5docker.min.js","sourcesContent":["\"use strict\";\n\n/*\n * Copyright (c) 2017. tom@axisj.com\n * - github.com/thomasjang\n * - www.axisj.com\n */\n\n(function () {\n\n    var UI = ax5.ui,\n        U = ax5.util;\n\n    UI.addClass({\n        className: \"docker\",\n        version: \"${VERSION}\"\n    }, function () {\n\n        /**\n         * @class ax5docker\n         * @classdesc\n         * @author tom@axisj.com\n         * @example\n         * ```\n         * var ax5docker = new ax5.ui.ax5docker();\n         * ```\n         */\n        var ax5docker = function ax5docker() {\n            var _this = this;\n\n            var self = this,\n                cfg = void 0;\n\n            this.instanceId = ax5.getGuid();\n            this.config = {\n                theme: 'default',\n                animateTime: 250,\n                columnKeys: {},\n                control: {},\n                icons: {\n                    close: 'X',\n                    more: '...'\n                }\n            };\n            this.xvar = {};\n            this.menu = null;\n\n            // 패널 정보\n            this.panels = [];\n            this.panelId = 0;\n\n            // 패널의 컨텐츠 모듈\n            this.modules = {};\n\n            cfg = this.config;\n\n            var getPanelId = function getPanelId() {\n                return _this.panelId++;\n            };\n\n            /**\n             * defaultModule은 패널의 모듈이 정의되지 않은 경우를 위해 준비된 오브젝트\n             * @type {{init: ((container, state)), active: ((container, state)), deactive: ((container, state)), destroy: ((container, state))}}\n             */\n            var defaultModule = {\n                init: function init(container, state) {\n                    container[\"$element\"].html(state.name);\n                },\n                active: function active(container, state) {},\n                deactive: function deactive(container, state) {},\n                destroy: function destroy(container, state) {}\n            };\n\n            /**\n             * 부모패널과 패널인덱스 값으로 패널 패스를 구합니다.\n             * @param parent\n             * @param pIndex\n             * @returns {string}\n             */\n            var getPanelPath = function getPanelPath(parent, pIndex) {\n                var paths = [];\n                if (parent && typeof parent.panelPath !== \"undefined\") {\n                    paths.push(parent.panelPath);\n                }\n\n                paths.push('panels[' + (pIndex || 0) + ']');\n                return paths.join(\".\");\n            };\n\n            /**\n             * 패널패스를 이용하여 패널을 가져옵니다\n             * @param _panelPath\n             * @returns {*}\n             */\n            var getPanel = function getPanel(_panelPath) {\n                var path = [],\n                    _path = U.isArray(_panelPath) ? [].concat(_panelPath) : [].concat(_panelPath.split(/[\\.\\[\\]]/g));\n\n                _path.forEach(function (n) {\n                    if (n !== \"\") path.push(\"[\\\"\" + n.replace(/['\\\"]/g, \"\") + \"\\\"]\");\n                });\n\n                try {\n                    return Function(\"\", \"return this\" + path.join('') + \";\").call(_this);\n                } catch (e) {\n                    return;\n                }\n            };\n\n            /**\n             * 패널패스를 이용하여 패널오브젝트에 값을 부여합니다.\n             * @param _panelPath\n             * @param _value\n             * @returns {*}\n             */\n            var setPanel = function setPanel(_panelPath, _value) {\n                var path = [],\n                    _path = U.isArray(_panelPath) ? [].concat(_panelPath) : [].concat(_panelPath.split(/[\\.\\[\\]]/g));\n\n                _path.forEach(function (n) {\n                    if (n !== \"\") path.push(\"[\\\"\" + n.replace(/['\\\"]/g, \"\") + \"\\\"]\");\n                });\n\n                return Function(\"val\", \"return this\" + path.join('') + \" = val;\").call(_this, _value);\n            };\n\n            /**\n             * get mouse position\n             * @param e\n             * @returns {{clientX, clientY}}\n             */\n            var getMousePosition = function getMousePosition(e) {\n                var mouseObj = void 0,\n                    originalEvent = e.originalEvent ? e.originalEvent : e;\n                mouseObj = 'changedTouches' in originalEvent ? originalEvent.changedTouches[0] : originalEvent;\n                // clientX, Y 쓰면 스크롤에서 문제 발생\n                return {\n                    clientX: mouseObj.pageX,\n                    clientY: mouseObj.pageY\n                };\n            };\n\n            /**\n             * 패널의 모듈이 초기화, 활성화, 비활성, 제거 되는 일들을 제어하는 함수.\n             * 모든 컨트롤은 실행되기전에 사용자가 정의한 control.before 함수의 결과에 따라 실행 여부를 결정합니다. 사용자가 control.before를 정의하지 않으면 무조건 실행합니다.\n             * @param {Object} _panel\n             * @param {String} _control - \"init\",\"active\",\"deactive\",\"destroy\"\n             */\n            var controlPanel = function controlPanel(_panel, _control) {\n                var moduleState = jQuery.extend(_panel.moduleState, {\n                    name: _panel.name\n                }),\n                    moduleContainer = {\n                    '$element': _panel.$item\n                },\n                    module = void 0;\n\n                var processor = {\n                    init: function init() {\n                        _panel.builded = true;\n                        module = _panel.moduleName in _this.modules && 'init' in _this.modules[_panel.moduleName] ? _this.modules[_panel.moduleName] : defaultModule;\n                        module.init(moduleContainer, moduleState);\n                    },\n                    active: function active() {\n                        _panel.active = true;\n                        _panel.$label.addClass(\"active\");\n                        _panel.$item.addClass(\"active\");\n\n                        var $pane = _panel.$label.parent();\n                        if ($pane.get(0) && $pane.get(0).clientWidth !== $pane.get(0).scrollWidth) {\n                            $pane.animate({ scrollLeft: _panel.$label.position().left }, 300);\n                        }\n\n                        module = _panel.moduleName in _this.modules && 'active' in _this.modules[_panel.moduleName] ? _this.modules[_panel.moduleName] : defaultModule;\n                        module.active(moduleContainer, moduleState);\n                        $pane = null;\n                    },\n                    deactive: function deactive() {\n                        _panel.active = false;\n                        _panel.$label.removeClass(\"active\");\n                        _panel.$item.removeClass(\"active\");\n                        module = _panel.moduleName in _this.modules && 'deactive' in _this.modules[_panel.moduleName] ? _this.modules[_panel.moduleName] : defaultModule;\n                        module.deactive(moduleContainer, moduleState);\n                    },\n                    destroy: function destroy() {\n                        module = _panel.moduleName in _this.modules && 'destroy' in _this.modules[_panel.moduleName] ? _this.modules[_panel.moduleName] : defaultModule;\n                        module.destroy(moduleContainer, moduleState);\n\n                        // 패널 데이터 제거.\n                        setPanel(_panel.panelPath, null);\n                        // 현재 패널 정보를 검사하여 패널 정보를 재 구성합니다.\n                        arrangePanel();\n                    }\n                };\n\n                // 사용자정의 함수 control.before, control.after에 전달할 인자 = that\n                var that = {\n                    panel: _panel,\n                    controlType: _control\n                };\n\n                // 비동기 처리 상황에 대응하기 위해 runProcessor를 별도 처리\n                var runProcessor = function runProcessor() {\n                    processor[_control]();\n                    module = null;\n\n                    if (U.isFunction(cfg.control.after)) {\n                        cfg.control.after.call(that, that);\n                    }\n                };\n\n                if (processor[_control]) {\n                    if (U.isFunction(cfg.control.before)) {\n                        cfg.control.before.call(that, that, function () {\n                            runProcessor();\n                        });\n                    } else {\n                        runProcessor();\n                    }\n                }\n            };\n\n            /**\n             * 패널들의 패널 데이터 구조에 맞게 다시 그리기\n             */\n            var repaintPanels = function repaintPanels() {\n                var appendProcessor = {\n                    stack: function stack($parent, parent, myself, pIndex) {\n\n                        var $dom = void 0,\n                            activeIndex = -1;\n                        myself.panelPath = getPanelPath(parent, pIndex);\n\n                        $dom = jQuery('<div data-ax5docker-pane=\"\" data-ax5docker-path=\"' + myself.panelPath + '\" style=\"flex-grow: ' + (myself.flexGrow || 1) + ';\">' + '<ul data-ax5docker-pane-tabs=\"\"></ul>' + '<div data-ax5docker-pane-tabs-more=\"\">' + cfg.icons.more + '</div>' + '<div data-ax5docker-pane-item-views=\"\"></div>' + '</div>');\n                        $parent.append($dom);\n\n                        if (U.isArray(myself.panels)) {\n                            myself.panels.forEach(function (P, pIndex) {\n                                if (P.active) activeIndex = pIndex;\n                            });\n                            if (activeIndex === -1) activeIndex = 0;\n                            myself.panels[activeIndex].active = true;\n\n                            myself.panels.forEach(function (P, _pIndex) {\n                                P.panelIndex = _pIndex;\n                                appendProcessor[P.type]($dom, myself, P, _pIndex);\n                            });\n                        }\n\n                        $dom = null;\n                        activeIndex = null;\n                    },\n                    panel: function panel($parent, parent, myself, pIndex) {\n                        var $dom = void 0;\n                        myself.panelPath = getPanelPath(parent, pIndex);\n                        myself.$label = jQuery('<li data-ax5docker-pane-tab=\"' + pIndex + '\" data-ax5docker-path=\"' + myself.panelPath + '\">' + '<div class=\"title\">' + myself.name + '</div>' + '<div class=\"close-icon\">' + cfg.icons.close + '</div>' + '</li>');\n\n                        if (!myself.$item) {\n                            myself.$item = jQuery('<div data-ax5docker-pane-item=\"' + pIndex + '\" data-ax5docker-pane-id=\"' + getPanelId() + '\" data-ax5docker-path=\"' + myself.panelPath + '\"></div>');\n                        }\n\n                        if (parent && parent.type == \"stack\") {\n                            if (myself.active) {\n                                if (!myself.builded) controlPanel(myself, \"init\");\n                                controlPanel(myself, \"active\");\n                            }\n                            $parent.find('[data-ax5docker-pane-tabs]').append(myself.$label);\n                            $parent.find('[data-ax5docker-pane-item-views]').append(myself.$item);\n                        } else {\n                            $dom = jQuery('<div data-ax5docker-pane=\"\" data-ax5docker-path=\"' + myself.panelPath + '\" style=\"flex-grow: ' + (myself.flexGrow || 1) + ';\">' + '<ul data-ax5docker-pane-tabs=\"\"></ul>' + '<div data-ax5docker-pane-tabs-more=\"\">' + cfg.icons.more + '</div>' + '<div data-ax5docker-pane-item-views=\"\"></div>' + '</div>');\n\n                            if (!myself.builded) controlPanel(myself, \"init\");\n                            controlPanel(myself, \"active\");\n\n                            $dom.find('[data-ax5docker-pane-tabs]').append(myself.$label);\n                            $dom.find('[data-ax5docker-pane-item-views]').append(myself.$item);\n\n                            $parent.append($dom);\n                        }\n\n                        $dom = null;\n                    },\n                    resizeHandle: function resizeHandle($parent, parent, myself, pIndex) {\n                        var $dom = jQuery('<div data-ax5docker-resize-handle=\"' + parent.type + \"/\" + parent.panelPath + \"/\" + pIndex + '\"></div>');\n                        $parent.append($dom);\n                        $dom = null;\n                    },\n                    row: function row($parent, parent, myself, pIndex) {\n                        var $dom = void 0;\n                        myself.panelPath = getPanelPath(parent, pIndex);\n                        if (parent && parent.type == \"stack\") {\n                            throw \"The 'stack' type child nodes are allowed only for the 'panel' type.\";\n                        }\n                        $dom = jQuery('<div data-ax5docker-pane-axis=\"row\" data-ax5docker-path=\"' + myself.panelPath + '\" style=\"flex-grow: ' + (myself.flexGrow || 1) + ';\"></div>');\n                        $parent.append($dom);\n\n                        if (U.isArray(myself.panels)) {\n                            myself.panels.forEach(function (P, _pIndex) {\n                                if (_pIndex > 0) appendProcessor[\"resizeHandle\"]($dom, myself, P, _pIndex);\n                                P.panelIndex = _pIndex;\n                                appendProcessor[P.type]($dom, myself, P, _pIndex);\n                            });\n                        }\n\n                        $dom = null;\n                    },\n                    column: function column($parent, parent, myself, pIndex) {\n                        var $dom = void 0;\n                        myself.panelPath = getPanelPath(parent, pIndex);\n                        if (parent && parent.type == \"stack\") {\n                            throw \"The 'stack' type child nodes are allowed only for the 'panel' type.\";\n                        }\n                        $dom = jQuery('<div data-ax5docker-pane-axis=\"column\" data-ax5docker-path=\"' + myself.panelPath + '\" style=\"flex-grow: ' + (myself.flexGrow || 1) + ';\"></div>');\n                        $parent.append($dom);\n\n                        if (U.isArray(myself.panels)) {\n                            myself.panels.forEach(function (P, _pIndex) {\n                                if (_pIndex > 0) appendProcessor[\"resizeHandle\"]($dom, myself, P, _pIndex);\n                                P.panelIndex = _pIndex;\n                                appendProcessor[P.type]($dom, myself, P, _pIndex);\n                            });\n                        }\n\n                        $dom = null;\n                    }\n                };\n\n                var $root = jQuery('<div data-ax5docker-panes=\"\"></div>');\n                if (_this.panels[0]) appendProcessor[_this.panels[0].type]($root, null, _this.panels[0], 0);\n                _this.$target.html($root);\n\n                _this.$target.off(\"click.ax5docker-pane\").on(\"click.ax5docker-pane\", \"[data-ax5docker-pane-tab] .close-icon\", function (e) {\n                    closePanel($(this).parents('[data-ax5docker-pane-tab]'));\n                    U.stopEvent(e);\n                }).on(\"click.ax5docker-pane\", \"[data-ax5docker-pane-tab]\", function (e) {\n                    // pane, panelIndex 인자 변경.\n                    var $clickedLabel = jQuery(this);\n                    var pane = getPanel($clickedLabel.parents('[data-ax5docker-pane]').attr(\"data-ax5docker-path\"));\n                    var panelIndex = $clickedLabel.attr(\"data-ax5docker-pane-tab\");\n\n                    if (!$clickedLabel.hasClass(\"active\")) {\n                        changeActiveStackPanel(pane, panelIndex);\n                    }\n\n                    $clickedLabel = null;\n                    pane = null;\n                    panelIndex = null;\n                    U.stopEvent(e);\n                }).on(\"click.ax5docker-pane\", \"[data-ax5docker-pane-tabs-more]\", function (e) {\n                    openStackPanelMore($(this).parents('[data-ax5docker-pane]'), e);\n                    U.stopEvent(e);\n                });\n\n                _this.$target.off(\"mousedown.ax5docker-pane-resize\").off(\"dragstart.ax5docker-pane-resize\").on(\"dragstart.ax5docker-pane-resize\", \"[data-ax5docker-pane-tab]\", function (e) {\n                    panelTabDragEvent.on(this);\n                }).on(\"mousedown.ax5docker-pane-resize\", \"[data-ax5docker-resize-handle]\", function (e) {\n                    var datas = this.getAttribute(\"data-ax5docker-resize-handle\").split(/\\//g);\n\n                    // panelResizerEvent.init\n                    self.xvar.mousePosition = getMousePosition(e);\n                    self.xvar.resizerType = datas[0];\n                    self.xvar.resizerPath = datas[1];\n                    self.xvar.resizerIndex = datas[2];\n                    // 주변 패널들\n                    self.xvar.resizer$dom = $(this);\n                    self.xvar.resizerParent$dom = self.xvar.resizer$dom.parent();\n                    self.xvar.resizerPrevGrow = U.number(self.xvar.resizer$dom.prev().css(\"flex-grow\"));\n                    self.xvar.resizerNextGrow = U.number(self.xvar.resizer$dom.next().css(\"flex-grow\"));\n\n                    if (self.xvar.resizerType == \"row\") {\n                        //self.xvar.resizerCanvasWidth = self.xvar.resizerParent$dom.innerWidth();\n                        self.xvar.resizerCanvasWidth = self.xvar.resizer$dom.prev().innerWidth() + self.xvar.resizer$dom.next().innerWidth() + self.xvar.resizer$dom.width();\n                    } else {\n                        //self.xvar.resizerCanvasHeight = self.xvar.resizerParent$dom.innerHeight();\n                        self.xvar.resizerCanvasHeight = self.xvar.resizer$dom.prev().innerHeight() + self.xvar.resizer$dom.next().innerHeight() + self.xvar.resizer$dom.height();\n                    }\n\n                    panelResizerEvent.on(this);\n                    U.stopEvent(e);\n                }).on(\"dragstart.ax5docker-pane-resize\", \"[data-ax5docker-resize-handle]\", function (e) {\n                    U.stopEvent(e);\n                    return false;\n                });\n\n                // stackPane tabs 스크롤처리\n                alignStackPane();\n                $root = null;\n            };\n\n            /**\n             * 액티브 패널 변경(stack인 상황에서)\n             * @param pane\n             * @param panelIndex\n             * @returns {boolean}\n             */\n            var changeActiveStackPanel = function changeActiveStackPanel(pane, panelIndex) {\n                var panel = pane.panels[panelIndex];\n\n                for (var p = 0, pl = pane.panels.length; p < pl; p++) {\n                    if (pane.panels[p].active) {\n                        controlPanel(pane.panels[p], \"deactive\");\n                    }\n                }\n\n                if (!panel.builded) controlPanel(panel, \"init\");\n                controlPanel(panel, \"active\");\n\n                pane = null;\n                panelIndex = null;\n                panel = null;\n                return _this;\n            };\n\n            /**\n             * 패널 삭제하기\n             * @param clickedLabel\n             * @returns {ax5docker}\n             */\n            var closePanel = function closePanel(clickedLabel) {\n                var $clickedLabel = jQuery(clickedLabel),\n                    panelPath = $clickedLabel.attr(\"data-ax5docker-path\"),\n                    panel = getPanel(panelPath);\n\n                controlPanel(panel, \"destroy\");\n\n                $clickedLabel = null;\n                panelPath = null;\n                panel = null;\n                return _this;\n            };\n\n            /**\n             * stackTab의 더보기 아이콘이 클릭되면~~~\n             * @param stackPane\n             * @param e\n             * @returns {ax5docker}\n             */\n            var openStackPanelMore = function openStackPanelMore(stackPane, e) {\n                var $stackPane = jQuery(stackPane),\n                    panePath = $stackPane.attr(\"data-ax5docker-path\"),\n                    pane = getPanel(panePath);\n\n                if (_this.menu) {\n                    var menuItems = U.map(pane.panels, function (index) {\n                        return {\n                            label: this.name,\n                            index: index,\n                            panePath: panePath\n                        };\n                    });\n\n                    _this.menu.setConfig({\n                        items: menuItems,\n                        onClick: function onClick() {\n                            //console.log(pane);\n                            changeActiveStackPanel(getPanel(this.panePath), this.index);\n                        }\n                    });\n\n                    _this.menu.popup(e);\n                } else {\n                    console.log(pane.panels);\n                    throw \"'ax5ui-menu' is required to implement the function.\";\n                }\n\n                $stackPane = null;\n                panePath = null;\n                pane = null;\n                return _this;\n            };\n\n            /**\n             * repaintPanels이 작동할 때. 리사이저에 mousedown 이벤트를 연결합니다.\n             * 발생된 이벤트가 panelResizerEvent.on 을 작동시켜 리사이저를 움직이게 합니다\n             */\n            var panelResizerEvent = {\n                \"on\": function on(_resizer) {\n                    var $resizer = $(_resizer);\n                    var resizerPositionLeft = $resizer.offset().left;\n                    var dockerTargetOffsetLeft = _this.$target.offset().left;\n\n                    jQuery(document.body).on(\"mousemove.ax5docker-\" + _this.instanceId, function (e) {\n                        var mouseObj = getMousePosition(e);\n                        var da_grow = void 0;\n                        if (self.xvar.resizerLived) {\n                            if (self.xvar.resizerType == \"row\") {\n                                self.xvar.__da = mouseObj.clientX - self.xvar.mousePosition.clientX;\n                                da_grow = U.number(self.xvar.__da * 2 / self.xvar.resizerCanvasWidth, { round: 6 });\n\n                                self.xvar.resizer$dom.prev().css({ \"flex-grow\": self.xvar.resizerPrevGrow + da_grow });\n                                self.xvar.resizer$dom.next().css({ \"flex-grow\": self.xvar.resizerNextGrow - da_grow });\n                            } else {\n                                self.xvar.__da = mouseObj.clientY - self.xvar.mousePosition.clientY;\n                                da_grow = U.number(self.xvar.__da * 2 / self.xvar.resizerCanvasHeight, { round: 6 });\n\n                                self.xvar.resizer$dom.prev().css({ \"flex-grow\": self.xvar.resizerPrevGrow + da_grow });\n                                self.xvar.resizer$dom.next().css({ \"flex-grow\": self.xvar.resizerNextGrow - da_grow });\n                            }\n                        } else {\n                            self.xvar.resizerLived = true;\n                        }\n\n                        mouseObj = null;\n                        da_grow = null;\n                    }).on(\"mouseup.ax5docker-\" + _this.instanceId, function (e) {\n                        panelResizerEvent.off();\n                        U.stopEvent(e);\n                    }).on(\"mouseleave.ax5docker-\" + _this.instanceId, function (e) {\n                        panelResizerEvent.off();\n                        U.stopEvent(e);\n                    });\n\n                    jQuery(document.body).attr('unselectable', 'on').css('user-select', 'none').on('selectstart', false);\n                },\n                \"off\": function off() {\n                    self.xvar.resizerLived = false;\n\n                    if (typeof _this.xvar.__da === \"undefined\") {} else {\n                        var $prevPanel = self.xvar.resizer$dom.prev(),\n                            $nextPanel = self.xvar.resizer$dom.next(),\n                            prevPane = getPanel($prevPanel.attr(\"data-ax5docker-path\")),\n                            nextPane = getPanel($nextPanel.attr(\"data-ax5docker-path\"));\n\n                        prevPane.flexGrow = U.number($prevPanel.css(\"flex-grow\"));\n                        nextPane.flexGrow = U.number($nextPanel.css(\"flex-grow\"));\n\n                        $prevPanel = null;\n                        $nextPanel = null;\n                        prevPane = null;\n                        nextPane = null;\n                    }\n\n                    jQuery(document.body).off(\"mousemove.ax5docker-\" + _this.instanceId).off(\"mouseup.ax5docker-\" + _this.instanceId).off(\"mouseleave.ax5docker-\" + _this.instanceId);\n\n                    jQuery(document.body).removeAttr('unselectable').css('user-select', 'auto').off('selectstart');\n                }\n            };\n\n            /**\n             * repaintPanels이 작동할 때. 패널탭에 dragStart 이벤트를 연결합니다.\n             * 발생된 이벤트가 panelTabDragEvent.on를 작동.\n             */\n            var panelTabDragEvent = {\n                \"on\": function on() {\n                    if (_this.panels[0] && _this.panels[0].panels && _this.panels[0].panels.length) {\n\n                        _this.xvar.dragger = {\n                            target: null,\n                            dragOverVertical: null,\n                            dragOverHorizontal: null\n                        };\n\n                        _this.$target.on(\"dragover.ax5docker-\" + _this.instanceId, '[data-ax5docker-path]', function (e) {\n                            // todo : dragover 구현\n                            // console.log(\"dargover\", getMousePosition(e));\n                            // console.log(e.target);\n                            panelTabDragEvent.dragover(this, e);\n                            U.stopEvent(e);\n                        }).on(\"drop.ax5docker-\" + _this.instanceId, function (e) {\n                            panelTabDragEvent.off();\n                            U.stopEvent(e);\n                        }).on(\"dragend.ax5docker-\" + _this.instanceId, function (e) {\n                            panelTabDragEvent.off();\n                            U.stopEvent(e);\n                        });\n                    }\n                },\n                \"dragover\": function dragover(dragoverDom, e) {\n                    var $dragoverDom = jQuery(dragoverDom);\n                    if (_this.xvar.dragger.target == null || _this.xvar.dragger.target.get(0) != $dragoverDom.get(0)) {\n\n                        if (_this.xvar.dragger.target) _this.xvar.dragger.target.removeAttr(\"data-dropper\");\n\n                        _this.xvar.dragger.target = $dragoverDom;\n                        _this.xvar.dragger.dragOverVertical = null;\n                        _this.xvar.dragger.dragOverHorizontal = null;\n                    }\n\n                    // e.target\n                    var box = {};\n                    box = $dragoverDom.offset();\n                    box.width = $dragoverDom.width();\n                    box.height = $dragoverDom.height();\n\n                    var mouse = getMousePosition(e);\n                    var dragOverVertical = void 0,\n                        dragOverHorizontal = void 0;\n                    if ($dragoverDom.attr(\"data-ax5docker-pane-tab\")) {\n                        var halfWidth = box.width / 2;\n                        if (box.left <= mouse.clientX && box.left + halfWidth >= mouse.clientX) {\n                            dragOverHorizontal = \"left\";\n                        } else if (box.left + halfWidth <= mouse.clientX && box.left + halfWidth * 2 >= mouse.clientX) {\n                            dragOverHorizontal = \"right\";\n                        }\n                        if (_this.xvar.dragger.dragOverHorizontal != dragOverHorizontal && typeof dragOverHorizontal != \"undefined\") {\n                            _this.xvar.dragger.dragOverHorizontal = dragOverHorizontal;\n\n                            var draggerProcessor = {\n                                \"left\": function left($target) {\n                                    $target.attr(\"data-dropper\", \"left\");\n                                },\n                                \"right\": function right($target) {\n                                    $target.attr(\"data-dropper\", \"right\");\n                                }\n                            };\n\n                            draggerProcessor[_this.xvar.dragger.dragOverHorizontal](_this.xvar.dragger.target);\n                        }\n                    } else if ($dragoverDom.attr(\"data-ax5docker-pane-item\")) {\n                        // panel dragover 포지션 구하기\n                        var threeQuarterHeight = box.height / 3;\n                        var threeQuarterWidth = box.width / 3;\n\n                        if (box.top <= mouse.clientY && box.top + threeQuarterHeight >= mouse.clientY) {\n                            dragOverVertical = \"top\";\n                        } else if (box.top + threeQuarterHeight <= mouse.clientY && box.top + threeQuarterHeight * 2 >= mouse.clientY) {\n                            dragOverVertical = \"middle\";\n                        } else if (box.top + threeQuarterHeight * 2 <= mouse.clientY && box.top + threeQuarterHeight * 3 >= mouse.clientY) {\n                            dragOverVertical = \"bottom\";\n                        }\n\n                        if (box.left <= mouse.clientX && box.left + threeQuarterWidth >= mouse.clientX) {\n                            dragOverHorizontal = \"left\";\n                        } else if (box.left + threeQuarterWidth <= mouse.clientX && box.left + threeQuarterWidth * 2 >= mouse.clientX) {\n                            dragOverHorizontal = \"center\";\n                        } else if (box.left + threeQuarterWidth * 2 <= mouse.clientX && box.left + threeQuarterWidth * 3 >= mouse.clientX) {\n                            dragOverHorizontal = \"right\";\n                        }\n\n                        if (_this.xvar.dragger.dragOverVertical != dragOverVertical || _this.xvar.dragger.dragOverHorizontal != dragOverHorizontal) {\n                            _this.xvar.dragger.dragOverVertical = dragOverVertical;\n                            _this.xvar.dragger.dragOverHorizontal = dragOverHorizontal;\n\n                            var draggerProcessor = {\n                                \"left-top\": function leftTop($target) {\n                                    $target.attr(\"data-dropper\", \"left\");\n                                },\n                                \"right-top\": function rightTop($target) {\n                                    $target.attr(\"data-dropper\", \"right\");\n                                },\n                                \"center-top\": function centerTop($target) {\n                                    $target.attr(\"data-dropper\", \"top\");\n                                },\n                                \"left-middle\": function leftMiddle($target) {\n                                    $target.attr(\"data-dropper\", \"left\");\n                                },\n                                \"right-middle\": function rightMiddle($target) {\n                                    $target.attr(\"data-dropper\", \"right\");\n                                },\n                                \"center-middle\": function centerMiddle($target) {\n                                    $target.attr(\"data-dropper\", \"center\");\n                                },\n                                \"left-bottom\": function leftBottom($target) {\n                                    $target.attr(\"data-dropper\", \"left\");\n                                },\n                                \"right-bottom\": function rightBottom($target) {\n                                    $target.attr(\"data-dropper\", \"right\");\n                                },\n                                \"center-bottom\": function centerBottom($target) {\n                                    $target.attr(\"data-dropper\", \"bottom\");\n                                }\n                            };\n\n                            draggerProcessor[_this.xvar.dragger.dragOverHorizontal + \"-\" + _this.xvar.dragger.dragOverVertical](_this.xvar.dragger.target);\n                        }\n                    }\n                },\n                \"off\": function off() {\n                    _this.$target.off(\"dragover.ax5docker-\" + _this.instanceId).off(\"drop.ax5docker-\" + _this.instanceId).off(\"dragend.ax5docker-\" + _this.instanceId);\n\n                    _this.xvar.dragger.target.removeAttr(\"data-dropper\");\n                }\n            };\n\n            /**\n             * stack type panel resize되면 탭 스크롤 처리 관련 처리\n             */\n            var debounceFn = ax5.util.debounce(function (fn) {\n                fn();\n            }, cfg.animateTime);\n\n            /**\n             * stackPane이 리사이즈 되면 탭을 스크롤여부를 판단해야 합니다.\n             */\n            var alignStackPane = function alignStackPane() {\n                debounceFn(function () {\n                    this.$target.find('[data-ax5docker-pane-tabs]').each(function () {\n                        var $this = jQuery(this).parent();\n                        if (this.scrollWidth > this.clientWidth) {\n                            $this.addClass(\"tabs-scrolled\");\n                        } else {\n                            $this.removeClass(\"tabs-scrolled\");\n                        }\n                        $this = null;\n                    });\n                }.bind(_this));\n            };\n\n            /**\n             * 패널중에 null이 된 요소를 찾아 panels를 정리 합니다.\n             * @returns {*}\n             */\n            var arrangePanel = function arrangePanel() {\n                // console.log(this.$target.find('[data-ax5docker-pane]'));\n                var panels = [];\n                var processor = {\n                    stack: function stack(myself) {\n                        if (!U.isArray(myself.panels)) return false;\n\n                        var newObj = {\n                            type: \"stack\",\n                            panels: []\n                        };\n\n                        myself.panels.forEach(function (P, _pIndex) {\n                            if (P) {\n                                var _p = processor[P.type](P);\n                                if (_p) newObj.panels.push(_p);\n                                _p = null;\n                            }\n                        });\n\n                        if (newObj.panels.length == 0) {\n                            return null;\n                        } else if (newObj.panels.length < 2) {\n                            newObj = newObj.panels[0];\n                        }\n\n                        return newObj;\n                    },\n                    panel: function panel(myself) {\n                        //console.log(myself);\n                        return myself;\n                    },\n                    row: function row(myself) {\n\n                        if (!U.isArray(myself.panels)) return false;\n\n                        var newObj = {\n                            type: \"row\",\n                            panels: []\n                        };\n\n                        myself.panels.forEach(function (P, _pIndex) {\n                            if (P) {\n                                var _p = processor[P.type](P);\n                                if (_p) newObj.panels.push(_p);\n                                _p = null;\n                            }\n                        });\n\n                        if (newObj.panels.length == 0) {\n                            return null;\n                        } else if (newObj.panels.length < 2) {\n                            newObj = newObj.panels[0];\n                        }\n\n                        return newObj;\n                    },\n                    column: function column(myself) {\n                        if (!U.isArray(myself.panels)) return false;\n\n                        var newObj = {\n                            type: \"column\",\n                            panels: []\n                        };\n\n                        myself.panels.forEach(function (P, _pIndex) {\n                            if (P) {\n                                var _p = processor[P.type](P);\n                                if (_p) newObj.panels.push(_p);\n                                _p = null;\n                            }\n                        });\n\n                        if (newObj.panels.length == 0) {\n                            return null;\n                        } else if (newObj.panels.length < 2) {\n                            newObj = newObj.panels[0];\n                        }\n\n                        return newObj;\n                    }\n                };\n\n                if (_this.panels[0]) {\n                    _this.panels[0] = processor[_this.panels[0].type](_this.panels[0]);\n                } else {\n                    _this.panels = [];\n                }\n\n                repaintPanels();\n            };\n\n            /**\n             * @method ax5docker.setConfig\n             * @param {Object} config\n             * @param {Array} config.panels\n             */\n            this.init = function (_config) {\n                cfg = jQuery.extend(true, {}, cfg, _config);\n                if (!cfg.target) {\n                    console.log(ax5.info.getError(\"ax5docker\", \"401\", \"init\"));\n                    return this;\n                }\n                // memory target\n                this.$target = jQuery(cfg.target);\n                // set panels\n                this.panels = cfg.panels || [];\n                // event Functions\n                this.onStateChanged = cfg.onStateChanged;\n                this.onClick = cfg.onClick;\n                this.onLoad = cfg.onLoad;\n                this.onDataChanged = cfg.onDataChanged;\n\n                if (ax5.ui.menu) {\n                    this.menu = new ax5.ui.menu({\n                        theme: 'default',\n                        position: \"absolute\",\n                        icons: {\n                            'arrow': '▸'\n                        }\n                    });\n                }\n\n                jQuery(window).bind(\"resize.ax5docker-\" + this.id, function () {\n                    // stackPane tabs 스크롤처리\n                    alignStackPane();\n                });\n            };\n\n            /**\n             * @method ax5docker.setPanels\n             * @returns {ax5docker}\n             */\n            this.setPanels = function (_panels) {\n                // set panels\n                this.panels = _panels || [];\n\n                // 패널 다시 그리기\n                repaintPanels();\n                return this;\n            };\n\n            /**\n             * @method ax5docker.addModule\n             * @param modules\n             * @returns {ax5docker}\n             */\n            this.addModule = function (modules) {\n                if (U.isObject(modules)) {\n                    jQuery.extend(true, this.modules, modules);\n                }\n                return this;\n            };\n\n            /**\n             * repaint panels of docker\n             * @method ax5docker.repaint\n             * @returns {ax5docker}\n             */\n            this.repaint = function () {\n                // 패널 다시 그리기\n                repaintPanels();\n                return this;\n            };\n\n            /**\n             * @method ax5docker.addPanel\n             * @param {String} _addPath - Position path to add panel\n             * @param _addType\n             * @param _panel\n             * @param _panelIndex\n             * @returns {ax5docker}\n             * @example\n             * ```js\n             * myDocker.addPanel('0.1', 'stack', {type:'panel', name:'addPanel', moduleName: 'content'});\n             *\n             * ```\n             */\n            this.addPanel = function (_addPath, _addType, _panel, _panelIndex) {\n                if (_addPath == \"undefined\") _addPath = \"0\";\n                _addPath = _addPath.replace(/[a-zA-Z\\[\\]]+/g, \"\").replace(/(\\d+)/g, function (a, b) {\n                    return \"panels[\" + a + \"]\";\n                });\n\n                //_addPath = [].concat(_addPath.split(/[\\.]/g));\n                var pane = getPanel(_addPath);\n\n                console.log(pane);\n\n                var panelProcessor = {\n                    \"stack\": function stack(_pane, _addType, _panel) {\n                        var copyPanel = jQuery.extend({}, _pane),\n                            addProcessor = {\n                            \"stack\": function stack(_pane, _panel) {\n                                _pane.panels.push(_panel);\n                                arrangePanel();\n                            },\n                            \"row-left\": function rowLeft(_pane, _panel) {\n                                var parentPath = _addPath.substr(0, _addPath.lastIndexOf(\".\"));\n                                var parentPane = getPanel(parentPath);\n                                if (parentPane.type == \"row\") {\n                                    this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                } else {\n                                    _pane = setPanel(_addPath, {\n                                        type: \"row\",\n                                        panels: []\n                                    });\n                                    _pane.panels.push(_panel);\n                                    _pane.panels.push(copyPanel);\n                                    arrangePanel();\n                                }\n                            },\n                            \"row-right\": function rowRight(_pane, _panel) {\n                                var parentPath = _addPath.substr(0, _addPath.lastIndexOf(\".\"));\n                                var parentPane = getPanel(parentPath);\n                                if (parentPane.type == \"row\") {\n                                    this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                } else {\n                                    _pane = setPanel(_addPath, {\n                                        type: \"row\",\n                                        panels: []\n                                    });\n                                    _pane.panels.push(copyPanel);\n                                    _pane.panels.push(_panel);\n                                    arrangePanel();\n                                }\n                            },\n                            \"column-top\": function columnTop(_pane, _panel) {\n                                var parentPath = _addPath.substr(0, _addPath.lastIndexOf(\".\"));\n                                var parentPane = getPanel(parentPath);\n                                if (parentPane.type == \"column\") {\n                                    this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                } else {\n                                    _pane = setPanel(_addPath, {\n                                        type: \"column\",\n                                        panels: []\n                                    });\n                                    _pane.panels.push(_panel);\n                                    _pane.panels.push(copyPanel);\n                                    arrangePanel();\n                                }\n                            },\n                            \"column-bottom\": function columnBottom(_pane, _panel) {\n                                var parentPath = _addPath.substr(0, _addPath.lastIndexOf(\".\"));\n                                var parentPane = getPanel(parentPath);\n                                if (parentPane.type == \"column\") {\n                                    this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                } else {\n                                    _pane = setPanel(_addPath, {\n                                        type: \"column\",\n                                        panels: []\n                                    });\n                                    _pane.panels.push(copyPanel);\n                                    _pane.panels.push(_panel);\n                                    arrangePanel();\n                                }\n                            }\n                        };\n                        if (_addType in addProcessor) {\n                            addProcessor[_addType].call(this, _pane, _panel);\n                        }\n\n                        copyPanel = null;\n                        addProcessor = null;\n                    },\n                    \"row\": function row(_pane, _addType, _panel, _panelIndex) {\n                        var copyPanel = jQuery.extend({}, _pane);\n                        var addProcessor = {\n                            \"stack\": function stack(_pane, _panel) {\n                                // 처리 할 수 없는 상황 첫번째 자식을 찾아 재 요청\n                                if (_pane.panels[0] && _pane.panels[0].panelPath) {\n                                    this.addPanel(_pane.panels[0].panelPath, _addType, _panel);\n                                }\n                            },\n                            \"row-left\": function rowLeft(_pane, _panel, _panelIndex) {\n                                var parentPath = _addPath.substr(0, _addPath.lastIndexOf(\".\"));\n                                var parentPane = getPanel(parentPath);\n                                if (parentPane.type == \"row\") {\n                                    _pane.panels.splice(_panelIndex, 0, _panel);\n                                    arrangePanel();\n                                } else {\n                                    _pane = setPanel(_addPath, {\n                                        type: \"row\",\n                                        panels: []\n                                    });\n                                    _pane.panels.push(_panel);\n                                    _pane.panels.push(copyPanel);\n                                    arrangePanel();\n                                }\n                            },\n                            \"row-right\": function rowRight(_pane, _panel, _panelIndex) {\n                                var parentPath = _addPath.substr(0, _addPath.lastIndexOf(\".\"));\n                                var parentPane = getPanel(parentPath);\n                                if (parentPane.type == \"row\") {\n                                    _pane.panels.splice(_panelIndex + 1, 0, _panel);\n                                    arrangePanel();\n                                } else {\n                                    _pane = setPanel(_addPath, {\n                                        type: \"row\",\n                                        panels: []\n                                    });\n                                    _pane.panels.push(copyPanel);\n                                    _pane.panels.push(_panel);\n                                    arrangePanel();\n                                }\n                            },\n                            \"column-top\": function columnTop(_pane, _panel, _panelIndex) {\n                                var parentPath = _addPath.substr(0, _addPath.lastIndexOf(\".\"));\n                                var parentPane = getPanel(parentPath);\n                                if (parentPane.type == \"column\") {\n                                    this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                } else {\n                                    _pane = setPanel(_addPath, {\n                                        type: \"column\",\n                                        panels: []\n                                    });\n                                    _pane.panels.push(_panel);\n                                    _pane.panels.push(copyPanel);\n                                    arrangePanel();\n                                }\n                            },\n                            \"column-bottom\": function columnBottom(_pane, _panel, _panelIndex) {\n                                var parentPath = _addPath.substr(0, _addPath.lastIndexOf(\".\"));\n                                var parentPane = getPanel(parentPath);\n                                if (parentPane.type == \"column\") {\n                                    this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                } else {\n                                    _pane = setPanel(_addPath, {\n                                        type: \"column\",\n                                        panels: []\n                                    });\n                                    _pane.panels.push(copyPanel);\n                                    _pane.panels.push(_panel);\n                                    arrangePanel();\n                                }\n                            }\n                        };\n                        if (_addType in addProcessor) {\n                            addProcessor[_addType].call(this, _pane, _panel, _panelIndex);\n                        }\n\n                        addProcessor = null;\n                        copyPanel = null;\n                    },\n                    \"column\": function column(_pane, _addType, _panel, _panelIndex) {\n                        var copyPanel = jQuery.extend({}, _pane);\n                        var addProcessor = {\n                            \"stack\": function stack(_pane, _panel) {\n                                if (_pane.panels[0] && _pane.panels[0].panelPath) {\n                                    this.addPanel(_pane.panels[0].panelPath, _addType, _panel);\n                                }\n                            },\n                            \"row-left\": function rowLeft(_pane, _panel) {\n                                var parentPath = _addPath.substr(0, _addPath.lastIndexOf(\".\"));\n                                var parentPane = getPanel(parentPath);\n                                if (parentPane.type == \"row\") {\n                                    this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                } else {\n                                    _pane = setPanel(_addPath, {\n                                        type: \"row\",\n                                        panels: []\n                                    });\n                                    _pane.panels.push(_panel);\n                                    _pane.panels.push(copyPanel);\n                                    arrangePanel();\n                                }\n                            },\n                            \"row-right\": function rowRight(_pane, _panel) {\n                                var parentPath = _addPath.substr(0, _addPath.lastIndexOf(\".\"));\n                                var parentPane = getPanel(parentPath);\n                                if (parentPane.type == \"row\") {\n                                    this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                } else {\n                                    _pane = setPanel(_addPath, {\n                                        type: \"row\",\n                                        panels: []\n                                    });\n                                    _pane.panels.push(copyPanel);\n                                    _pane.panels.push(_panel);\n                                    arrangePanel();\n                                }\n                            },\n                            \"column-top\": function columnTop(_pane, _panel) {\n                                _pane.panels.splice(_panelIndex, 0, _panel);\n                                arrangePanel();\n                            },\n                            \"column-bottom\": function columnBottom(_pane, _panel) {\n                                _pane.panels.splice(_panelIndex + 1, 0, _panel);\n                                arrangePanel();\n                            }\n                        };\n                        if (_addType in addProcessor) {\n                            addProcessor[_addType].call(this, _pane, _panel);\n                        }\n\n                        addProcessor = null;\n                        copyPanel = null;\n                    },\n                    \"panel\": function panel(_pane, _addType, _panel) {\n                        var copyPanel = jQuery.extend({}, _pane),\n                            addProcessor = {\n                            \"stack\": function stack(_pane, _panel) {\n                                // _pane stack으로 재구성\n                                _pane = setPanel(_addPath, {\n                                    type: \"stack\",\n                                    panels: []\n                                });\n                                _pane.panels.push(copyPanel);\n                                _pane.panels.push(_panel);\n                                arrangePanel();\n                            },\n                            \"row-left\": function rowLeft(_pane, _panel) {\n                                var parentPath = _addPath.substr(0, _addPath.lastIndexOf(\".\"));\n                                var parentPane = getPanel(parentPath);\n                                if (parentPane.type == \"row\") {\n                                    this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                } else {\n                                    _pane = setPanel(_addPath, {\n                                        type: \"row\",\n                                        panels: []\n                                    });\n                                    _pane.panels.push(_panel);\n                                    _pane.panels.push(copyPanel);\n                                    arrangePanel();\n                                }\n                            },\n                            \"row-right\": function rowRight(_pane, _panel) {\n                                var parentPath = _addPath.substr(0, _addPath.lastIndexOf(\".\"));\n                                var parentPane = getPanel(parentPath);\n                                if (parentPane.type == \"row\") {\n                                    this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                } else {\n                                    _pane = setPanel(_addPath, {\n                                        type: \"row\",\n                                        panels: []\n                                    });\n                                    _pane.panels.push(copyPanel);\n                                    _pane.panels.push(_panel);\n                                    arrangePanel();\n                                }\n                            },\n                            \"column-top\": function columnTop(_pane, _panel) {\n                                var parentPath = _addPath.substr(0, _addPath.lastIndexOf(\".\"));\n                                var parentPane = getPanel(parentPath);\n                                if (parentPane.type == \"column\") {\n                                    this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                } else {\n                                    _pane = setPanel(_addPath, {\n                                        type: \"column\",\n                                        panels: []\n                                    });\n                                    _pane.panels.push(_panel);\n                                    _pane.panels.push(copyPanel);\n                                    arrangePanel();\n                                }\n                            },\n                            \"column-bottom\": function columnBottom(_pane, _panel) {\n                                var parentPath = _addPath.substr(0, _addPath.lastIndexOf(\".\"));\n                                var parentPane = getPanel(parentPath);\n                                if (parentPane.type == \"column\") {\n                                    this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                } else {\n                                    _pane = setPanel(_addPath, {\n                                        type: \"column\",\n                                        panels: []\n                                    });\n                                    _pane.panels.push(copyPanel);\n                                    _pane.panels.push(_panel);\n                                    arrangePanel();\n                                }\n                            }\n                        };\n\n                        if (_addType in addProcessor) {\n                            addProcessor[_addType].call(this, _pane, _panel);\n                        }\n\n                        copyPanel = null;\n                        addProcessor = null;\n                    }\n                };\n\n                panelProcessor[pane.type].call(this, pane, _addType, _panel, _panelIndex);\n                return this;\n            };\n\n            // 클래스 생성자\n            this.main = function () {\n                if (arguments && U.isObject(arguments[0])) {\n                    this.setConfig(arguments[0]);\n                }\n            }.apply(this, arguments);\n        };\n\n        return ax5docker;\n    }());\n})();\n\n// todo : row > stack 구현 -- ok\n// todo : stack 패널 active change -- ok\n// todo : 패널삭제하기 -- ok ~ active 패널 정리.. -- ok\n// todo : 패널추가하기 -- ok\n// todo : 패널 스플릿 리사이즈 -- ok\n// todo : stack tab overflow 처리. -- ok\n// todo : 탭 포커싱와 탭 목록 메뉴 처리 -- ok\n// todo : 패널 drag & drop\n// ax5.ui.docker.tmpl\n(function () {\n\n    var DOCKER = ax5.ui.docker;\n\n    DOCKER.tmpl = {\n\n        get: function get(tmplName, data, columnKeys) {\n            return ax5.mustache.render(DOCKER.tmpl[tmplName].call(this, columnKeys), data);\n        }\n    };\n})();","/*\n * Copyright (c) 2017. tom@axisj.com\n * - github.com/thomasjang\n * - www.axisj.com\n */\n\n(function () {\n\n    const UI = ax5.ui,\n        U = ax5.util;\n\n    UI.addClass({\n        className: \"docker\",\n        version: \"${VERSION}\"\n    }, (function () {\n\n        /**\n         * @class ax5docker\n         * @classdesc\n         * @author tom@axisj.com\n         * @example\n         * ```\n         * var ax5docker = new ax5.ui.ax5docker();\n         * ```\n         */\n        let ax5docker = function () {\n            let self = this,\n                cfg;\n\n            this.instanceId = ax5.getGuid();\n            this.config = {\n                theme: 'default',\n                animateTime: 250,\n                columnKeys: {},\n                control: {},\n                icons: {\n                    close: 'X',\n                    more: '...'\n                }\n            };\n            this.xvar = {};\n            this.menu = null;\n\n            // 패널 정보\n            this.panels = [];\n            this.panelId = 0;\n\n            // 패널의 컨텐츠 모듈\n            this.modules = {};\n\n            cfg = this.config;\n\n            const getPanelId = () => {\n                return this.panelId++;\n            };\n\n            /**\n             * defaultModule은 패널의 모듈이 정의되지 않은 경우를 위해 준비된 오브젝트\n             * @type {{init: ((container, state)), active: ((container, state)), deactive: ((container, state)), destroy: ((container, state))}}\n             */\n            const defaultModule = {\n                init(container, state){\n                    container[\"$element\"].html(state.name);\n                },\n                active(container, state){\n\n                },\n                deactive(container, state){\n\n                },\n                destroy(container, state){\n\n                }\n            };\n\n            /**\n             * 부모패널과 패널인덱스 값으로 패널 패스를 구합니다.\n             * @param parent\n             * @param pIndex\n             * @returns {string}\n             */\n            const getPanelPath = (parent, pIndex) => {\n                let paths = [];\n                if (parent && typeof parent.panelPath !== \"undefined\") {\n                    paths.push(parent.panelPath);\n                }\n\n                paths.push('panels[' + (pIndex || 0) + ']');\n                return paths.join(\".\");\n            };\n\n            /**\n             * 패널패스를 이용하여 패널을 가져옵니다\n             * @param _panelPath\n             * @returns {*}\n             */\n            const getPanel = (_panelPath) => {\n                let path = [],\n                    _path = (U.isArray(_panelPath)) ? [].concat(_panelPath) : [].concat(_panelPath.split(/[\\.\\[\\]]/g));\n\n                _path.forEach(function (n) {\n                    if (n !== \"\") path.push(\"[\\\"\" + n.replace(/['\\\"]/g, \"\") + \"\\\"]\");\n                });\n\n                try {\n                    return (Function(\"\", \"return this\" + path.join('') + \";\")).call(this);\n                } catch (e) {\n                    return;\n                }\n            };\n\n            /**\n             * 패널패스를 이용하여 패널오브젝트에 값을 부여합니다.\n             * @param _panelPath\n             * @param _value\n             * @returns {*}\n             */\n            const setPanel = (_panelPath, _value) => {\n                let path = [],\n                    _path = (U.isArray(_panelPath)) ? [].concat(_panelPath) : [].concat(_panelPath.split(/[\\.\\[\\]]/g));\n\n                _path.forEach(function (n) {\n                    if (n !== \"\") path.push(\"[\\\"\" + n.replace(/['\\\"]/g, \"\") + \"\\\"]\");\n                });\n\n                return (Function(\"val\", \"return this\" + path.join('') + \" = val;\")).call(this, _value);\n            };\n\n            /**\n             * get mouse position\n             * @param e\n             * @returns {{clientX, clientY}}\n             */\n            const getMousePosition = (e) => {\n                let mouseObj, originalEvent = (e.originalEvent) ? e.originalEvent : e;\n                mouseObj = ('changedTouches' in originalEvent) ? originalEvent.changedTouches[0] : originalEvent;\n                // clientX, Y 쓰면 스크롤에서 문제 발생\n                return {\n                    clientX: mouseObj.pageX,\n                    clientY: mouseObj.pageY\n                }\n            };\n\n            /**\n             * 패널의 모듈이 초기화, 활성화, 비활성, 제거 되는 일들을 제어하는 함수.\n             * 모든 컨트롤은 실행되기전에 사용자가 정의한 control.before 함수의 결과에 따라 실행 여부를 결정합니다. 사용자가 control.before를 정의하지 않으면 무조건 실행합니다.\n             * @param {Object} _panel\n             * @param {String} _control - \"init\",\"active\",\"deactive\",\"destroy\"\n             */\n            const controlPanel = (_panel, _control) => {\n                let moduleState = jQuery.extend(_panel.moduleState, {\n                        name: _panel.name\n                    }),\n                    moduleContainer = {\n                        '$element': _panel.$item\n                    },\n                    module;\n\n                let processor = {\n                    init: () => {\n                        _panel.builded = true;\n                        module = (_panel.moduleName in this.modules && 'init' in this.modules[_panel.moduleName]) ? this.modules[_panel.moduleName] : defaultModule;\n                        module.init(moduleContainer, moduleState);\n                    },\n                    active: () => {\n                        _panel.active = true;\n                        _panel.$label.addClass(\"active\");\n                        _panel.$item.addClass(\"active\");\n\n                        let $pane = _panel.$label.parent();\n                        if ($pane.get(0) && $pane.get(0).clientWidth !== $pane.get(0).scrollWidth) {\n                            $pane.animate({scrollLeft: _panel.$label.position().left}, 300);\n                        }\n\n                        module = (_panel.moduleName in this.modules && 'active' in this.modules[_panel.moduleName]) ? this.modules[_panel.moduleName] : defaultModule;\n                        module.active(moduleContainer, moduleState);\n                        $pane = null;\n                    },\n                    deactive: () => {\n                        _panel.active = false;\n                        _panel.$label.removeClass(\"active\");\n                        _panel.$item.removeClass(\"active\");\n                        module = (_panel.moduleName in this.modules && 'deactive' in this.modules[_panel.moduleName]) ? this.modules[_panel.moduleName] : defaultModule;\n                        module.deactive(moduleContainer, moduleState);\n                    },\n                    destroy: () => {\n                        module = (_panel.moduleName in this.modules && 'destroy' in this.modules[_panel.moduleName]) ? this.modules[_panel.moduleName] : defaultModule;\n                        module.destroy(moduleContainer, moduleState);\n\n                        // 패널 데이터 제거.\n                        setPanel(_panel.panelPath, null);\n                        // 현재 패널 정보를 검사하여 패널 정보를 재 구성합니다.\n                        arrangePanel();\n                    }\n                };\n\n                // 사용자정의 함수 control.before, control.after에 전달할 인자 = that\n                let that = {\n                    panel: _panel,\n                    controlType: _control\n                };\n\n                // 비동기 처리 상황에 대응하기 위해 runProcessor를 별도 처리\n                let runProcessor = () => {\n                    processor[_control]();\n                    module = null;\n\n                    if (U.isFunction(cfg.control.after)) {\n                        cfg.control.after.call(that, that);\n                    }\n                };\n\n                if (processor[_control]) {\n                    if (U.isFunction(cfg.control.before)) {\n                        cfg.control.before.call(that, that, function () {\n                            runProcessor();\n                        });\n                    }\n                    else {\n                        runProcessor();\n                    }\n                }\n            };\n\n            /**\n             * 패널들의 패널 데이터 구조에 맞게 다시 그리기\n             */\n            const repaintPanels = () => {\n                const appendProcessor = {\n                    stack($parent, parent, myself, pIndex){\n\n                        let $dom, activeIndex = -1;\n                        myself.panelPath = getPanelPath(parent, pIndex);\n\n                        $dom = jQuery('<div data-ax5docker-pane=\"\" data-ax5docker-path=\"' + myself.panelPath + '\" style=\"flex-grow: ' + (myself.flexGrow || 1) + ';\">' +\n                            '<ul data-ax5docker-pane-tabs=\"\"></ul>' +\n                            '<div data-ax5docker-pane-tabs-more=\"\">' + cfg.icons.more + '</div>' +\n                            '<div data-ax5docker-pane-item-views=\"\"></div>' +\n                            '</div>');\n                        $parent.append($dom);\n\n                        if (U.isArray(myself.panels)) {\n                            myself.panels.forEach(function (P, pIndex) {\n                                if (P.active) activeIndex = pIndex;\n                            });\n                            if (activeIndex === -1) activeIndex = 0;\n                            myself.panels[activeIndex].active = true;\n\n                            myself.panels.forEach(function (P, _pIndex) {\n                                P.panelIndex = _pIndex;\n                                appendProcessor[P.type]($dom, myself, P, _pIndex);\n                            });\n                        }\n\n                        $dom = null;\n                        activeIndex = null;\n                    },\n                    panel($parent, parent, myself, pIndex){\n                        let $dom;\n                        myself.panelPath = getPanelPath(parent, pIndex);\n                        myself.$label = jQuery('<li data-ax5docker-pane-tab=\"' + pIndex + '\" data-ax5docker-path=\"' + myself.panelPath + '\">' +\n                            '<div class=\"title\">' + myself.name + '</div>' +\n                            '<div class=\"close-icon\">' + cfg.icons.close + '</div>' +\n                            '</li>');\n\n                        if (!myself.$item) {\n                            myself.$item = jQuery('<div data-ax5docker-pane-item=\"' + pIndex + '\" data-ax5docker-pane-id=\"' + getPanelId() + '\" data-ax5docker-path=\"' + myself.panelPath + '\"></div>');\n                        }\n\n                        if (parent && parent.type == \"stack\") {\n                            if (myself.active) {\n                                if (!myself.builded) controlPanel(myself, \"init\");\n                                controlPanel(myself, \"active\");\n                            }\n                            $parent.find('[data-ax5docker-pane-tabs]').append(myself.$label);\n                            $parent.find('[data-ax5docker-pane-item-views]').append(myself.$item);\n                        } else {\n                            $dom = jQuery('<div data-ax5docker-pane=\"\" data-ax5docker-path=\"' + myself.panelPath + '\" style=\"flex-grow: ' + (myself.flexGrow || 1) + ';\">' +\n                                '<ul data-ax5docker-pane-tabs=\"\"></ul>' +\n                                '<div data-ax5docker-pane-tabs-more=\"\">' + cfg.icons.more + '</div>' +\n                                '<div data-ax5docker-pane-item-views=\"\"></div>' +\n                                '</div>');\n\n                            if (!myself.builded) controlPanel(myself, \"init\");\n                            controlPanel(myself, \"active\");\n\n                            $dom.find('[data-ax5docker-pane-tabs]').append(myself.$label);\n                            $dom.find('[data-ax5docker-pane-item-views]').append(myself.$item);\n\n                            $parent.append($dom);\n                        }\n\n                        $dom = null;\n                    },\n                    resizeHandle($parent, parent, myself, pIndex){\n                        let $dom = jQuery('<div data-ax5docker-resize-handle=\"' + parent.type + \"/\" + parent.panelPath + \"/\" + pIndex + '\"></div>');\n                        $parent.append($dom);\n                        $dom = null;\n                    },\n                    row($parent, parent, myself, pIndex){\n                        let $dom;\n                        myself.panelPath = getPanelPath(parent, pIndex);\n                        if (parent && parent.type == \"stack\") {\n                            throw \"The 'stack' type child nodes are allowed only for the 'panel' type.\";\n                        }\n                        $dom = jQuery('<div data-ax5docker-pane-axis=\"row\" data-ax5docker-path=\"' + myself.panelPath + '\" style=\"flex-grow: ' + (myself.flexGrow || 1) + ';\"></div>');\n                        $parent.append($dom);\n\n                        if (U.isArray(myself.panels)) {\n                            myself.panels.forEach(function (P, _pIndex) {\n                                if (_pIndex > 0) appendProcessor[\"resizeHandle\"]($dom, myself, P, _pIndex);\n                                P.panelIndex = _pIndex;\n                                appendProcessor[P.type]($dom, myself, P, _pIndex);\n                            });\n                        }\n\n                        $dom = null;\n                    },\n                    column($parent, parent, myself, pIndex){\n                        let $dom;\n                        myself.panelPath = getPanelPath(parent, pIndex);\n                        if (parent && parent.type == \"stack\") {\n                            throw \"The 'stack' type child nodes are allowed only for the 'panel' type.\";\n                        }\n                        $dom = jQuery('<div data-ax5docker-pane-axis=\"column\" data-ax5docker-path=\"' + myself.panelPath + '\" style=\"flex-grow: ' + (myself.flexGrow || 1) + ';\"></div>');\n                        $parent.append($dom);\n\n                        if (U.isArray(myself.panels)) {\n                            myself.panels.forEach(function (P, _pIndex) {\n                                if (_pIndex > 0) appendProcessor[\"resizeHandle\"]($dom, myself, P, _pIndex);\n                                P.panelIndex = _pIndex;\n                                appendProcessor[P.type]($dom, myself, P, _pIndex);\n                            });\n                        }\n\n                        $dom = null;\n                    }\n                };\n\n                let $root = jQuery('<div data-ax5docker-panes=\"\"></div>');\n                if (this.panels[0]) appendProcessor[this.panels[0].type]($root, null, this.panels[0], 0);\n                this.$target.html($root);\n\n                this.$target\n                    .off(\"click.ax5docker-pane\")\n                    .on(\"click.ax5docker-pane\", \"[data-ax5docker-pane-tab] .close-icon\", function (e) {\n                        closePanel($(this).parents('[data-ax5docker-pane-tab]'));\n                        U.stopEvent(e);\n                    })\n                    .on(\"click.ax5docker-pane\", \"[data-ax5docker-pane-tab]\", function (e) {\n                        // pane, panelIndex 인자 변경.\n                        let $clickedLabel = jQuery(this);\n                        let pane = getPanel($clickedLabel.parents('[data-ax5docker-pane]').attr(\"data-ax5docker-path\"));\n                        let panelIndex = $clickedLabel.attr(\"data-ax5docker-pane-tab\");\n\n                        if (!$clickedLabel.hasClass(\"active\")) {\n                            changeActiveStackPanel(pane, panelIndex);\n                        }\n\n                        $clickedLabel = null;\n                        pane = null;\n                        panelIndex = null;\n                        U.stopEvent(e);\n                    })\n                    .on(\"click.ax5docker-pane\", \"[data-ax5docker-pane-tabs-more]\", function (e) {\n                        openStackPanelMore($(this).parents('[data-ax5docker-pane]'), e);\n                        U.stopEvent(e);\n                    });\n\n                this.$target\n                    .off(\"mousedown.ax5docker-pane-resize\")\n                    .off(\"dragstart.ax5docker-pane-resize\")\n                    .on(\"dragstart.ax5docker-pane-resize\", \"[data-ax5docker-pane-tab]\", function (e) {\n                        panelTabDragEvent.on(this);\n                    })\n                    .on(\"mousedown.ax5docker-pane-resize\", \"[data-ax5docker-resize-handle]\", function (e) {\n                        let datas = this.getAttribute(\"data-ax5docker-resize-handle\").split(/\\//g);\n\n                        // panelResizerEvent.init\n                        self.xvar.mousePosition = getMousePosition(e);\n                        self.xvar.resizerType = datas[0];\n                        self.xvar.resizerPath = datas[1];\n                        self.xvar.resizerIndex = datas[2];\n                        // 주변 패널들\n                        self.xvar.resizer$dom = $(this);\n                        self.xvar.resizerParent$dom = self.xvar.resizer$dom.parent();\n                        self.xvar.resizerPrevGrow = U.number(self.xvar.resizer$dom.prev().css(\"flex-grow\"));\n                        self.xvar.resizerNextGrow = U.number(self.xvar.resizer$dom.next().css(\"flex-grow\"));\n\n                        if (self.xvar.resizerType == \"row\") {\n                            //self.xvar.resizerCanvasWidth = self.xvar.resizerParent$dom.innerWidth();\n                            self.xvar.resizerCanvasWidth = self.xvar.resizer$dom.prev().innerWidth() + self.xvar.resizer$dom.next().innerWidth() + self.xvar.resizer$dom.width();\n                        } else {\n                            //self.xvar.resizerCanvasHeight = self.xvar.resizerParent$dom.innerHeight();\n                            self.xvar.resizerCanvasHeight = self.xvar.resizer$dom.prev().innerHeight() + self.xvar.resizer$dom.next().innerHeight() + self.xvar.resizer$dom.height();\n                        }\n\n                        panelResizerEvent.on(this);\n                        U.stopEvent(e);\n                    })\n                    .on(\"dragstart.ax5docker-pane-resize\", \"[data-ax5docker-resize-handle]\", function (e) {\n                        U.stopEvent(e);\n                        return false;\n                    });\n\n                // stackPane tabs 스크롤처리\n                alignStackPane();\n                $root = null;\n            };\n\n            /**\n             * 액티브 패널 변경(stack인 상황에서)\n             * @param pane\n             * @param panelIndex\n             * @returns {boolean}\n             */\n            const changeActiveStackPanel = (pane, panelIndex) => {\n                let panel = pane.panels[panelIndex];\n\n                for (let p = 0, pl = pane.panels.length; p < pl; p++) {\n                    if (pane.panels[p].active) {\n                        controlPanel(pane.panels[p], \"deactive\");\n                    }\n                }\n\n                if (!panel.builded) controlPanel(panel, \"init\");\n                controlPanel(panel, \"active\");\n\n                pane = null;\n                panelIndex = null;\n                panel = null;\n                return this;\n            };\n\n            /**\n             * 패널 삭제하기\n             * @param clickedLabel\n             * @returns {ax5docker}\n             */\n            const closePanel = (clickedLabel) => {\n                let $clickedLabel = jQuery(clickedLabel),\n                    panelPath = $clickedLabel.attr(\"data-ax5docker-path\"),\n                    panel = getPanel(panelPath);\n\n                controlPanel(panel, \"destroy\");\n\n                $clickedLabel = null;\n                panelPath = null;\n                panel = null;\n                return this;\n            };\n\n            /**\n             * stackTab의 더보기 아이콘이 클릭되면~~~\n             * @param stackPane\n             * @param e\n             * @returns {ax5docker}\n             */\n            const openStackPanelMore = (stackPane, e) => {\n                let $stackPane = jQuery(stackPane),\n                    panePath = $stackPane.attr(\"data-ax5docker-path\"),\n                    pane = getPanel(panePath);\n\n                if (this.menu) {\n                    let menuItems = U.map(pane.panels, function (index) {\n                        return {\n                            label: this.name,\n                            index: index,\n                            panePath: panePath\n                        }\n                    });\n\n                    this.menu.setConfig({\n                        items: menuItems,\n                        onClick: function () {\n                            //console.log(pane);\n                            changeActiveStackPanel(getPanel(this.panePath), this.index);\n                        }\n                    });\n\n                    this.menu.popup(e);\n                } else {\n                    console.log(pane.panels);\n                    throw \"'ax5ui-menu' is required to implement the function.\";\n                }\n\n                $stackPane = null;\n                panePath = null;\n                pane = null;\n                return this;\n            };\n\n            /**\n             * repaintPanels이 작동할 때. 리사이저에 mousedown 이벤트를 연결합니다.\n             * 발생된 이벤트가 panelResizerEvent.on 을 작동시켜 리사이저를 움직이게 합니다\n             */\n            const panelResizerEvent = {\n                \"on\": (_resizer) => {\n                    const $resizer = $(_resizer);\n                    const resizerPositionLeft = $resizer.offset().left;\n                    const dockerTargetOffsetLeft = this.$target.offset().left;\n\n                    jQuery(document.body)\n                        .on(\"mousemove.ax5docker-\" + this.instanceId, function (e) {\n                            let mouseObj = getMousePosition(e);\n                            let da_grow;\n                            if (self.xvar.resizerLived) {\n                                if (self.xvar.resizerType == \"row\") {\n                                    self.xvar.__da = mouseObj.clientX - self.xvar.mousePosition.clientX;\n                                    da_grow = U.number(self.xvar.__da * 2 / self.xvar.resizerCanvasWidth, {round: 6});\n\n                                    self.xvar.resizer$dom.prev().css({\"flex-grow\": self.xvar.resizerPrevGrow + da_grow});\n                                    self.xvar.resizer$dom.next().css({\"flex-grow\": self.xvar.resizerNextGrow - da_grow});\n                                } else {\n                                    self.xvar.__da = mouseObj.clientY - self.xvar.mousePosition.clientY;\n                                    da_grow = U.number(self.xvar.__da * 2 / self.xvar.resizerCanvasHeight, {round: 6});\n\n                                    self.xvar.resizer$dom.prev().css({\"flex-grow\": self.xvar.resizerPrevGrow + da_grow});\n                                    self.xvar.resizer$dom.next().css({\"flex-grow\": self.xvar.resizerNextGrow - da_grow});\n                                }\n                            } else {\n                                self.xvar.resizerLived = true;\n                            }\n\n                            mouseObj = null;\n                            da_grow = null;\n                        })\n                        .on(\"mouseup.ax5docker-\" + this.instanceId, function (e) {\n                            panelResizerEvent.off();\n                            U.stopEvent(e);\n                        })\n                        .on(\"mouseleave.ax5docker-\" + this.instanceId, function (e) {\n                            panelResizerEvent.off();\n                            U.stopEvent(e);\n                        });\n\n                    jQuery(document.body)\n                        .attr('unselectable', 'on')\n                        .css('user-select', 'none')\n                        .on('selectstart', false);\n                },\n                \"off\": () => {\n                    self.xvar.resizerLived = false;\n\n                    if (typeof this.xvar.__da === \"undefined\") {\n\n                    }\n                    else {\n                        let $prevPanel = self.xvar.resizer$dom.prev(),\n                            $nextPanel = self.xvar.resizer$dom.next(),\n                            prevPane = getPanel($prevPanel.attr(\"data-ax5docker-path\")),\n                            nextPane = getPanel($nextPanel.attr(\"data-ax5docker-path\"));\n\n                        prevPane.flexGrow = U.number($prevPanel.css(\"flex-grow\"));\n                        nextPane.flexGrow = U.number($nextPanel.css(\"flex-grow\"));\n\n                        $prevPanel = null;\n                        $nextPanel = null;\n                        prevPane = null;\n                        nextPane = null;\n                    }\n\n                    jQuery(document.body)\n                        .off(\"mousemove.ax5docker-\" + this.instanceId)\n                        .off(\"mouseup.ax5docker-\" + this.instanceId)\n                        .off(\"mouseleave.ax5docker-\" + this.instanceId);\n\n                    jQuery(document.body)\n                        .removeAttr('unselectable')\n                        .css('user-select', 'auto')\n                        .off('selectstart');\n                }\n            };\n\n            /**\n             * repaintPanels이 작동할 때. 패널탭에 dragStart 이벤트를 연결합니다.\n             * 발생된 이벤트가 panelTabDragEvent.on를 작동.\n             */\n            const panelTabDragEvent = {\n                \"on\": () => {\n                    if (this.panels[0] && this.panels[0].panels && this.panels[0].panels.length) {\n\n                        this.xvar.dragger = {\n                            target: null,\n                            dragOverVertical: null,\n                            dragOverHorizontal: null\n                        };\n\n                        this.$target\n                            .on(\"dragover.ax5docker-\" + this.instanceId, '[data-ax5docker-path]', function (e) {\n                                // todo : dragover 구현\n                                // console.log(\"dargover\", getMousePosition(e));\n                                // console.log(e.target);\n                                panelTabDragEvent.dragover(this, e);\n                                U.stopEvent(e);\n                            })\n                            .on(\"drop.ax5docker-\" + this.instanceId, function (e) {\n                                panelTabDragEvent.off();\n                                U.stopEvent(e);\n                            })\n                            .on(\"dragend.ax5docker-\" + this.instanceId, function (e) {\n                                panelTabDragEvent.off();\n                                U.stopEvent(e);\n                            });\n                    }\n                },\n                \"dragover\": (dragoverDom, e) => {\n                    let $dragoverDom = jQuery(dragoverDom);\n                    if (this.xvar.dragger.target == null || this.xvar.dragger.target.get(0) != $dragoverDom.get(0)) {\n\n                        if(this.xvar.dragger.target) this.xvar.dragger.target.removeAttr(\"data-dropper\");\n\n                        this.xvar.dragger.target = $dragoverDom;\n                        this.xvar.dragger.dragOverVertical = null;\n                        this.xvar.dragger.dragOverHorizontal = null;\n                    }\n\n                    // e.target\n                    let box = {};\n                    box = $dragoverDom.offset();\n                    box.width = $dragoverDom.width();\n                    box.height = $dragoverDom.height();\n\n                    let mouse = getMousePosition(e);\n                    let dragOverVertical, dragOverHorizontal;\n                    if ($dragoverDom.attr(\"data-ax5docker-pane-tab\")) {\n                        let halfWidth = box.width / 2;\n                        if (box.left <= mouse.clientX && (box.left + halfWidth) >= mouse.clientX) {\n                            dragOverHorizontal = \"left\";\n                        }\n                        else if ((box.left + halfWidth) <= mouse.clientX && (box.left + halfWidth * 2) >= mouse.clientX) {\n                            dragOverHorizontal = \"right\";\n                        }\n                        if (this.xvar.dragger.dragOverHorizontal != dragOverHorizontal && typeof dragOverHorizontal != \"undefined\") {\n                            this.xvar.dragger.dragOverHorizontal = dragOverHorizontal;\n\n                            var draggerProcessor = {\n                                \"left\"($target){\n                                    $target.attr(\"data-dropper\", \"left\");\n                                },\n                                \"right\"($target){\n                                    $target.attr(\"data-dropper\", \"right\");\n                                },\n                            };\n\n                            draggerProcessor[this.xvar.dragger.dragOverHorizontal](this.xvar.dragger.target);\n\n                        }\n                    }\n                    else if ($dragoverDom.attr(\"data-ax5docker-pane-item\")) {\n                        // panel dragover 포지션 구하기\n                        let threeQuarterHeight = box.height / 3;\n                        let threeQuarterWidth = box.width / 3;\n\n                        if (box.top <= mouse.clientY && (box.top + threeQuarterHeight) >= mouse.clientY) {\n                            dragOverVertical = \"top\";\n                        }\n                        else if ((box.top + threeQuarterHeight) <= mouse.clientY && (box.top + threeQuarterHeight * 2) >= mouse.clientY) {\n                            dragOverVertical = \"middle\";\n                        }\n                        else if ((box.top + threeQuarterHeight * 2) <= mouse.clientY && (box.top + threeQuarterHeight * 3) >= mouse.clientY) {\n                            dragOverVertical = \"bottom\";\n                        }\n\n                        if (box.left <= mouse.clientX && (box.left + threeQuarterWidth) >= mouse.clientX) {\n                            dragOverHorizontal = \"left\";\n                        }\n                        else if ((box.left + threeQuarterWidth) <= mouse.clientX && (box.left + threeQuarterWidth * 2) >= mouse.clientX) {\n                            dragOverHorizontal = \"center\";\n                        }\n                        else if ((box.left + threeQuarterWidth * 2) <= mouse.clientX && (box.left + threeQuarterWidth * 3) >= mouse.clientX) {\n                            dragOverHorizontal = \"right\";\n                        }\n\n                        if (this.xvar.dragger.dragOverVertical != dragOverVertical || this.xvar.dragger.dragOverHorizontal != dragOverHorizontal) {\n                            this.xvar.dragger.dragOverVertical = dragOverVertical;\n                            this.xvar.dragger.dragOverHorizontal = dragOverHorizontal;\n\n                            var draggerProcessor = {\n                                \"left-top\"($target){\n                                    $target.attr(\"data-dropper\", \"left\");\n                                },\n                                \"right-top\"($target){\n                                    $target.attr(\"data-dropper\", \"right\");\n                                },\n                                \"center-top\"($target){\n                                    $target.attr(\"data-dropper\", \"top\");\n                                },\n                                \"left-middle\"($target){\n                                    $target.attr(\"data-dropper\", \"left\");\n                                },\n                                \"right-middle\"($target){\n                                    $target.attr(\"data-dropper\", \"right\");\n                                },\n                                \"center-middle\"($target){\n                                    $target.attr(\"data-dropper\", \"center\");\n                                },\n                                \"left-bottom\"($target){\n                                    $target.attr(\"data-dropper\", \"left\");\n                                },\n                                \"right-bottom\"($target){\n                                    $target.attr(\"data-dropper\", \"right\");\n                                },\n                                \"center-bottom\"($target){\n                                    $target.attr(\"data-dropper\", \"bottom\");\n                                },\n                            };\n\n                            draggerProcessor[this.xvar.dragger.dragOverHorizontal + \"-\" + this.xvar.dragger.dragOverVertical](this.xvar.dragger.target);\n                        }\n                    }\n                },\n                \"off\": () => {\n                    this.$target\n                        .off(\"dragover.ax5docker-\" + this.instanceId)\n                        .off(\"drop.ax5docker-\" + this.instanceId)\n                        .off(\"dragend.ax5docker-\" + this.instanceId);\n\n                    this.xvar.dragger.target.removeAttr(\"data-dropper\");\n                }\n            };\n\n            /**\n             * stack type panel resize되면 탭 스크롤 처리 관련 처리\n             */\n            const debounceFn = ax5.util.debounce(function (fn) {\n                fn();\n            }, cfg.animateTime);\n\n            /**\n             * stackPane이 리사이즈 되면 탭을 스크롤여부를 판단해야 합니다.\n             */\n            const alignStackPane = () => {\n                debounceFn((function () {\n                    this.$target.find('[data-ax5docker-pane-tabs]').each(function () {\n                        let $this = jQuery(this).parent();\n                        if (this.scrollWidth > this.clientWidth) {\n                            $this.addClass(\"tabs-scrolled\");\n                        } else {\n                            $this.removeClass(\"tabs-scrolled\");\n                        }\n                        $this = null;\n                    });\n                }).bind(this));\n            };\n\n            /**\n             * 패널중에 null이 된 요소를 찾아 panels를 정리 합니다.\n             * @returns {*}\n             */\n            const arrangePanel = () => {\n                // console.log(this.$target.find('[data-ax5docker-pane]'));\n                const panels = [];\n                const processor = {\n                    stack(myself){\n                        if (!U.isArray(myself.panels)) return false;\n\n                        let newObj = {\n                            type: \"stack\",\n                            panels: []\n                        };\n\n                        myself.panels.forEach(function (P, _pIndex) {\n                            if (P) {\n                                let _p = processor[P.type](P);\n                                if (_p) newObj.panels.push(_p);\n                                _p = null;\n                            }\n                        });\n\n                        if (newObj.panels.length == 0) {\n                            return null;\n                        } else if (newObj.panels.length < 2) {\n                            newObj = newObj.panels[0];\n                        }\n\n                        return newObj;\n                    },\n                    panel(myself){\n                        //console.log(myself);\n                        return myself;\n                    },\n                    row(myself){\n\n                        if (!U.isArray(myself.panels)) return false;\n\n                        let newObj = {\n                            type: \"row\",\n                            panels: []\n                        };\n\n                        myself.panels.forEach(function (P, _pIndex) {\n                            if (P) {\n                                let _p = processor[P.type](P);\n                                if (_p) newObj.panels.push(_p);\n                                _p = null;\n                            }\n                        });\n\n                        if (newObj.panels.length == 0) {\n                            return null;\n                        } else if (newObj.panels.length < 2) {\n                            newObj = newObj.panels[0];\n                        }\n\n                        return newObj;\n                    },\n                    column(myself){\n                        if (!U.isArray(myself.panels)) return false;\n\n                        let newObj = {\n                            type: \"column\",\n                            panels: []\n                        };\n\n                        myself.panels.forEach(function (P, _pIndex) {\n                            if (P) {\n                                let _p = processor[P.type](P);\n                                if (_p) newObj.panels.push(_p);\n                                _p = null;\n                            }\n                        });\n\n                        if (newObj.panels.length == 0) {\n                            return null;\n                        } else if (newObj.panels.length < 2) {\n                            newObj = newObj.panels[0];\n                        }\n\n                        return newObj;\n                    },\n                };\n\n                if (this.panels[0]) {\n                    this.panels[0] = processor[this.panels[0].type](this.panels[0]);\n                } else {\n                    this.panels = [];\n                }\n\n                repaintPanels();\n            };\n\n            /**\n             * @method ax5docker.setConfig\n             * @param {Object} config\n             * @param {Array} config.panels\n             */\n            this.init = function (_config) {\n                cfg = jQuery.extend(true, {}, cfg, _config);\n                if (!cfg.target) {\n                    console.log(ax5.info.getError(\"ax5docker\", \"401\", \"init\"));\n                    return this;\n                }\n                // memory target\n                this.$target = jQuery(cfg.target);\n                // set panels\n                this.panels = cfg.panels || [];\n                // event Functions\n                this.onStateChanged = cfg.onStateChanged;\n                this.onClick = cfg.onClick;\n                this.onLoad = cfg.onLoad;\n                this.onDataChanged = cfg.onDataChanged;\n\n                if (ax5.ui.menu) {\n                    this.menu = new ax5.ui.menu({\n                        theme: 'default',\n                        position: \"absolute\",\n                        icons: {\n                            'arrow': '▸'\n                        }\n                    });\n                }\n\n                jQuery(window).bind(\"resize.ax5docker-\" + this.id, function () {\n                    // stackPane tabs 스크롤처리\n                    alignStackPane();\n                });\n            };\n\n            /**\n             * @method ax5docker.setPanels\n             * @returns {ax5docker}\n             */\n            this.setPanels = function (_panels) {\n                // set panels\n                this.panels = _panels || [];\n\n                // 패널 다시 그리기\n                repaintPanels();\n                return this;\n            };\n\n            /**\n             * @method ax5docker.addModule\n             * @param modules\n             * @returns {ax5docker}\n             */\n            this.addModule = function (modules) {\n                if (U.isObject(modules)) {\n                    jQuery.extend(true, this.modules, modules);\n                }\n                return this;\n            };\n\n            /**\n             * repaint panels of docker\n             * @method ax5docker.repaint\n             * @returns {ax5docker}\n             */\n            this.repaint = function () {\n                // 패널 다시 그리기\n                repaintPanels();\n                return this;\n            };\n\n            /**\n             * @method ax5docker.addPanel\n             * @param {String} _addPath - Position path to add panel\n             * @param _addType\n             * @param _panel\n             * @param _panelIndex\n             * @returns {ax5docker}\n             * @example\n             * ```js\n             * myDocker.addPanel('0.1', 'stack', {type:'panel', name:'addPanel', moduleName: 'content'});\n             *\n             * ```\n             */\n            this.addPanel = function (_addPath, _addType, _panel, _panelIndex) {\n                if (_addPath == \"undefined\") _addPath = \"0\";\n                _addPath = _addPath\n                    .replace(/[a-zA-Z\\[\\]]+/g, \"\")\n                    .replace(/(\\d+)/g, function (a, b) {\n                        return \"panels[\" + a + \"]\";\n                    });\n\n                //_addPath = [].concat(_addPath.split(/[\\.]/g));\n                let pane = getPanel(_addPath);\n\n                console.log(pane);\n\n                let panelProcessor = {\n                    \"stack\"(_pane, _addType, _panel){\n                        let copyPanel = jQuery.extend({}, _pane),\n                            addProcessor = {\n                                \"stack\"(_pane, _panel){\n                                    _pane.panels.push(_panel);\n                                    arrangePanel();\n                                },\n                                \"row-left\"(_pane, _panel){\n                                    let parentPath = _addPath.substr(0, _addPath.lastIndexOf(\".\"));\n                                    let parentPane = getPanel(parentPath);\n                                    if (parentPane.type == \"row\") {\n                                        this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                    } else {\n                                        _pane = setPanel(_addPath, {\n                                            type: \"row\",\n                                            panels: []\n                                        });\n                                        _pane.panels.push(_panel);\n                                        _pane.panels.push(copyPanel);\n                                        arrangePanel();\n                                    }\n                                },\n                                \"row-right\"(_pane, _panel){\n                                    let parentPath = _addPath.substr(0, _addPath.lastIndexOf(\".\"));\n                                    let parentPane = getPanel(parentPath);\n                                    if (parentPane.type == \"row\") {\n                                        this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                    } else {\n                                        _pane = setPanel(_addPath, {\n                                            type: \"row\",\n                                            panels: []\n                                        });\n                                        _pane.panels.push(copyPanel);\n                                        _pane.panels.push(_panel);\n                                        arrangePanel();\n                                    }\n                                },\n                                \"column-top\"(_pane, _panel){\n                                    let parentPath = _addPath.substr(0, _addPath.lastIndexOf(\".\"));\n                                    let parentPane = getPanel(parentPath);\n                                    if (parentPane.type == \"column\") {\n                                        this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                    } else {\n                                        _pane = setPanel(_addPath, {\n                                            type: \"column\",\n                                            panels: []\n                                        });\n                                        _pane.panels.push(_panel);\n                                        _pane.panels.push(copyPanel);\n                                        arrangePanel();\n                                    }\n                                },\n                                \"column-bottom\"(_pane, _panel){\n                                    let parentPath = _addPath.substr(0, _addPath.lastIndexOf(\".\"));\n                                    let parentPane = getPanel(parentPath);\n                                    if (parentPane.type == \"column\") {\n                                        this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                    } else {\n                                        _pane = setPanel(_addPath, {\n                                            type: \"column\",\n                                            panels: []\n                                        });\n                                        _pane.panels.push(copyPanel);\n                                        _pane.panels.push(_panel);\n                                        arrangePanel();\n                                    }\n                                }\n                            };\n                        if (_addType in addProcessor) {\n                            addProcessor[_addType].call(this, _pane, _panel);\n                        }\n\n                        copyPanel = null;\n                        addProcessor = null;\n                    },\n                    \"row\"(_pane, _addType, _panel, _panelIndex){\n                        let copyPanel = jQuery.extend({}, _pane);\n                        let addProcessor = {\n                            \"stack\"(_pane, _panel){\n                                // 처리 할 수 없는 상황 첫번째 자식을 찾아 재 요청\n                                if (_pane.panels[0] && _pane.panels[0].panelPath) {\n                                    this.addPanel(_pane.panels[0].panelPath, _addType, _panel);\n                                }\n                            },\n                            \"row-left\"(_pane, _panel, _panelIndex){\n                                let parentPath = _addPath.substr(0, _addPath.lastIndexOf(\".\"));\n                                let parentPane = getPanel(parentPath);\n                                if (parentPane.type == \"row\") {\n                                    _pane.panels.splice(_panelIndex, 0, _panel);\n                                    arrangePanel();\n                                } else {\n                                    _pane = setPanel(_addPath, {\n                                        type: \"row\",\n                                        panels: []\n                                    });\n                                    _pane.panels.push(_panel);\n                                    _pane.panels.push(copyPanel);\n                                    arrangePanel();\n                                }\n                            },\n                            \"row-right\"(_pane, _panel, _panelIndex){\n                                let parentPath = _addPath.substr(0, _addPath.lastIndexOf(\".\"));\n                                let parentPane = getPanel(parentPath);\n                                if (parentPane.type == \"row\") {\n                                    _pane.panels.splice(_panelIndex + 1, 0, _panel);\n                                    arrangePanel();\n                                } else {\n                                    _pane = setPanel(_addPath, {\n                                        type: \"row\",\n                                        panels: []\n                                    });\n                                    _pane.panels.push(copyPanel);\n                                    _pane.panels.push(_panel);\n                                    arrangePanel();\n                                }\n                            },\n                            \"column-top\"(_pane, _panel, _panelIndex){\n                                let parentPath = _addPath.substr(0, _addPath.lastIndexOf(\".\"));\n                                let parentPane = getPanel(parentPath);\n                                if (parentPane.type == \"column\") {\n                                    this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                } else {\n                                    _pane = setPanel(_addPath, {\n                                        type: \"column\",\n                                        panels: []\n                                    });\n                                    _pane.panels.push(_panel);\n                                    _pane.panels.push(copyPanel);\n                                    arrangePanel();\n                                }\n                            },\n                            \"column-bottom\"(_pane, _panel, _panelIndex){\n                                let parentPath = _addPath.substr(0, _addPath.lastIndexOf(\".\"));\n                                let parentPane = getPanel(parentPath);\n                                if (parentPane.type == \"column\") {\n                                    this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                } else {\n                                    _pane = setPanel(_addPath, {\n                                        type: \"column\",\n                                        panels: []\n                                    });\n                                    _pane.panels.push(copyPanel);\n                                    _pane.panels.push(_panel);\n                                    arrangePanel();\n                                }\n                            }\n                        };\n                        if (_addType in addProcessor) {\n                            addProcessor[_addType].call(this, _pane, _panel, _panelIndex);\n                        }\n\n                        addProcessor = null;\n                        copyPanel = null;\n                    },\n                    \"column\"(_pane, _addType, _panel, _panelIndex){\n                        let copyPanel = jQuery.extend({}, _pane);\n                        let addProcessor = {\n                            \"stack\"(_pane, _panel){\n                                if (_pane.panels[0] && _pane.panels[0].panelPath) {\n                                    this.addPanel(_pane.panels[0].panelPath, _addType, _panel);\n                                }\n                            },\n                            \"row-left\"(_pane, _panel){\n                                let parentPath = _addPath.substr(0, _addPath.lastIndexOf(\".\"));\n                                let parentPane = getPanel(parentPath);\n                                if (parentPane.type == \"row\") {\n                                    this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                } else {\n                                    _pane = setPanel(_addPath, {\n                                        type: \"row\",\n                                        panels: []\n                                    });\n                                    _pane.panels.push(_panel);\n                                    _pane.panels.push(copyPanel);\n                                    arrangePanel();\n                                }\n                            },\n                            \"row-right\"(_pane, _panel){\n                                let parentPath = _addPath.substr(0, _addPath.lastIndexOf(\".\"));\n                                let parentPane = getPanel(parentPath);\n                                if (parentPane.type == \"row\") {\n                                    this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                } else {\n                                    _pane = setPanel(_addPath, {\n                                        type: \"row\",\n                                        panels: []\n                                    });\n                                    _pane.panels.push(copyPanel);\n                                    _pane.panels.push(_panel);\n                                    arrangePanel();\n                                }\n                            },\n                            \"column-top\"(_pane, _panel){\n                                _pane.panels.splice(_panelIndex, 0, _panel);\n                                arrangePanel();\n                            },\n                            \"column-bottom\"(_pane, _panel){\n                                _pane.panels.splice(_panelIndex + 1, 0, _panel);\n                                arrangePanel();\n                            }\n                        };\n                        if (_addType in addProcessor) {\n                            addProcessor[_addType].call(this, _pane, _panel);\n                        }\n\n                        addProcessor = null;\n                        copyPanel = null;\n                    },\n                    \"panel\"(_pane, _addType, _panel){\n                        let copyPanel = jQuery.extend({}, _pane),\n                            addProcessor = {\n                                \"stack\"(_pane, _panel){\n                                    // _pane stack으로 재구성\n                                    _pane = setPanel(_addPath, {\n                                        type: \"stack\",\n                                        panels: []\n                                    });\n                                    _pane.panels.push(copyPanel);\n                                    _pane.panels.push(_panel);\n                                    arrangePanel();\n                                },\n                                \"row-left\"(_pane, _panel){\n                                    let parentPath = _addPath.substr(0, _addPath.lastIndexOf(\".\"));\n                                    let parentPane = getPanel(parentPath);\n                                    if (parentPane.type == \"row\") {\n                                        this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                    } else {\n                                        _pane = setPanel(_addPath, {\n                                            type: \"row\",\n                                            panels: []\n                                        });\n                                        _pane.panels.push(_panel);\n                                        _pane.panels.push(copyPanel);\n                                        arrangePanel();\n                                    }\n                                },\n                                \"row-right\"(_pane, _panel){\n                                    let parentPath = _addPath.substr(0, _addPath.lastIndexOf(\".\"));\n                                    let parentPane = getPanel(parentPath);\n                                    if (parentPane.type == \"row\") {\n                                        this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                    } else {\n                                        _pane = setPanel(_addPath, {\n                                            type: \"row\",\n                                            panels: []\n                                        });\n                                        _pane.panels.push(copyPanel);\n                                        _pane.panels.push(_panel);\n                                        arrangePanel();\n                                    }\n                                },\n                                \"column-top\"(_pane, _panel){\n                                    let parentPath = _addPath.substr(0, _addPath.lastIndexOf(\".\"));\n                                    let parentPane = getPanel(parentPath);\n                                    if (parentPane.type == \"column\") {\n                                        this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                    } else {\n                                        _pane = setPanel(_addPath, {\n                                            type: \"column\",\n                                            panels: []\n                                        });\n                                        _pane.panels.push(_panel);\n                                        _pane.panels.push(copyPanel);\n                                        arrangePanel();\n                                    }\n                                },\n                                \"column-bottom\"(_pane, _panel){\n                                    let parentPath = _addPath.substr(0, _addPath.lastIndexOf(\".\"));\n                                    let parentPane = getPanel(parentPath);\n                                    if (parentPane.type == \"column\") {\n                                        this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                    } else {\n                                        _pane = setPanel(_addPath, {\n                                            type: \"column\",\n                                            panels: []\n                                        });\n                                        _pane.panels.push(copyPanel);\n                                        _pane.panels.push(_panel);\n                                        arrangePanel();\n                                    }\n                                }\n                            };\n\n                        if (_addType in addProcessor) {\n                            addProcessor[_addType].call(this, _pane, _panel);\n\n                        }\n\n                        copyPanel = null;\n                        addProcessor = null;\n                    }\n                };\n\n                panelProcessor[pane.type].call(this, pane, _addType, _panel, _panelIndex);\n                return this;\n            };\n\n            // 클래스 생성자\n            this.main = (function () {\n                if (arguments && U.isObject(arguments[0])) {\n                    this.setConfig(arguments[0]);\n                }\n            }).apply(this, arguments);\n\n        };\n\n        return ax5docker;\n    })());\n\n})();\n\n// todo : row > stack 구현 -- ok\n// todo : stack 패널 active change -- ok\n// todo : 패널삭제하기 -- ok ~ active 패널 정리.. -- ok\n// todo : 패널추가하기 -- ok\n// todo : 패널 스플릿 리사이즈 -- ok\n// todo : stack tab overflow 처리. -- ok\n// todo : 탭 포커싱와 탭 목록 메뉴 처리 -- ok\n// todo : 패널 drag & drop","// ax5.ui.docker.tmpl\n(function () {\n\n    let DOCKER = ax5.ui.docker;\n\n\n\n    DOCKER.tmpl = {\n\n        get: function (tmplName, data, columnKeys) {\n            return ax5.mustache.render(DOCKER.tmpl[tmplName].call(this, columnKeys), data);\n        }\n    };\n\n})();"]}