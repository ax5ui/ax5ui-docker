{"version":3,"sources":["ax5docker.min.js","ax5docker.js","ax5docker-tmpl.js"],"names":["UI","ax5","ui","U","util","addClass","className","version","ax5docker","_this","this","cfg","instanceId","getGuid","config","theme","animateTime","columnKeys","panels","$panels","repaintPanels","appendProcessor","stack","$parent","myself","parent","$dom","jQuery","append","isArray","forEach","P","type","panel","$item","$label","name","find","resizeHandel","row","pIndex","columns","$root","$target","html","init","_config","extend","target","onStateChanged","onClick","onLoad","onDataChanged","console","log","info","getError","setPanels","_panels","main","arguments","isObject","setConfig","apply","DOCKER","docker","tmpl","get","tmplName","data","mustache","render","call"],"mappings":"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","file":"ax5docker.min.js","sourcesContent":["\"use strict\";\n\n/*\n * Copyright (c) 2017. tom@axisj.com\n * - github.com/thomasjang\n * - www.axisj.com\n */\n\n(function () {\n\n    var UI = ax5.ui,\n        U = ax5.util;\n\n    UI.addClass({\n        className: \"docker\",\n        version: \"${VERSION}\"\n    }, function () {\n\n        /**\n         * @class ax5docker\n         * @classdesc\n         * @author tom@axisj.com\n         * @example\n         * ```\n         * var ax5docker = new ax5.ui.ax5docker();\n         * ```\n         */\n        var ax5docker = function ax5docker() {\n            var _this = this;\n\n            var self = this,\n                cfg = void 0;\n\n            this.instanceId = ax5.getGuid();\n            this.config = {\n                theme: 'default',\n                animateTime: 250,\n                columnKeys: {}\n            };\n            // 패널 정보\n            this.panels = [];\n            this.$panels = [];\n\n            cfg = this.config;\n\n            var repaintPanels = function repaintPanels() {\n\n                var appendProcessor = {\n                    stack: function stack($parent, myself, parent) {\n                        var $dom = void 0;\n\n                        $dom = jQuery('<div data-ax5docker-pane=\"\">' + '<ul data-ax5docker-pane-tabs=\"\"></ul>' + '<div data-ax5docker-pane-item-views=\"\"></div>' + '</div>');\n                        $parent.append($dom);\n\n                        if (U.isArray(myself.panels)) {\n                            myself.panels.forEach(function (P) {\n                                appendProcessor[P.type]($dom, P, myself);\n                            });\n                        }\n\n                        $dom = null;\n                    },\n                    panel: function panel($parent, myself, parent) {\n                        var $dom = void 0,\n                            $item = void 0,\n                            $label = void 0;\n\n                        $label = jQuery('<li>' + myself.name + '</li>');\n                        $item = jQuery('<div data-ax5docker-pane-item=\"\"></div>');\n\n                        if (parent.type == \"stack\") {\n                            $parent.find('[data-ax5docker-pane-tabs]').append($label);\n                            $parent.find('[data-ax5docker-pane-item-views]').append($item);\n                        } else {\n                            $dom = jQuery('<div data-ax5docker-pane=\"\">' + '<ul data-ax5docker-pane-tabs=\"\"></ul>' + '<div data-ax5docker-pane-item-views=\"\"></div>' + '</div>');\n\n                            $dom.find('[data-ax5docker-pane-tabs]').append($label);\n                            $dom.find('[data-ax5docker-pane-item-views]').append($item);\n\n                            $parent.append($dom);\n                        }\n\n                        $dom = null;\n                        $item = null;\n                        $label = null;\n                    },\n                    resizeHandel: function resizeHandel($parent, myself, parent) {\n                        var $dom = jQuery('<div data-ax5docker-resize-handle=\"\"></div>');\n                        $parent.append($dom);\n                        $dom = null;\n                    },\n                    row: function row($parent, myself, parent) {\n                        var $dom = void 0;\n\n                        $dom = jQuery('<div data-ax5docker-pane-axis=\"row\"></div>');\n                        $parent.append($dom);\n\n                        if (U.isArray(myself.panels)) {\n                            myself.panels.forEach(function (P, pIndex) {\n                                if (pIndex > 0) {\n                                    appendProcessor[\"resizeHandel\"]($dom, P, myself);\n                                }\n                                appendProcessor[P.type]($dom, P, myself);\n                            });\n                        }\n\n                        $dom = null;\n                    },\n                    columns: function columns($parent, myself, parent) {\n                        var $dom = void 0;\n\n                        $dom = jQuery('<div data-ax5docker-pane-axis=\"column\"></div>');\n                        $parent.append($dom);\n\n                        if (U.isArray(myself.panels)) {\n                            myself.panels.forEach(function (P) {\n                                appendProcessor[P.type]($dom, P, myself);\n                            });\n                        }\n\n                        $dom = null;\n                    }\n                };\n\n                var $root = jQuery('<div data-ax5docker-panes=\"\"></div>');\n                appendProcessor[_this.panels[0].type]($root, _this.panels[0], null);\n                _this.$target.html($root);\n\n                $root = null;\n            };\n\n            /**\n             * @method ax5docker.setConfig\n             * @param {Object} config\n             * @param {Array} config.panels\n             */\n            this.init = function (_config) {\n                cfg = jQuery.extend(true, {}, cfg, _config);\n                if (!cfg.target) {\n                    console.log(ax5.info.getError(\"ax5docker\", \"401\", \"init\"));\n                    return this;\n                }\n                // memory target\n                this.$target = jQuery(cfg.target);\n                // set panels\n                this.panels = cfg.panels || [];\n                // event Functions\n                this.onStateChanged = cfg.onStateChanged;\n                this.onClick = cfg.onClick;\n                this.onLoad = cfg.onLoad;\n                this.onDataChanged = cfg.onDataChanged;\n\n                // 패널 다시 그리기\n                repaintPanels();\n            };\n            /**\n             * @method ax5docker.setPanels\n             * @returns {ax5docker}\n             */\n            this.setPanels = function (_panels) {\n                // set panels\n                this.panels = _panels || [];\n\n                // 패널 다시 그리기\n                repaintPanels();\n                return this;\n            };\n\n            // 클래스 생성자\n            this.main = function () {\n                if (arguments && U.isObject(arguments[0])) {\n                    this.setConfig(arguments[0]);\n                }\n            }.apply(this, arguments);\n        };\n\n        return ax5docker;\n    }());\n})();\n// ax5.ui.docker.tmpl\n(function () {\n\n    var DOCKER = ax5.ui.docker;\n\n    var panels = function panels(columnKeys) {\n        return \" \\n{{#panels}}\\n{{#panels}}\\n{{/panels}}\\n{{^panels}}\\n{{/panels}}\\n{{/panels}}\\n        \";\n    };\n\n    DOCKER.tmpl = {\n        \"panels\": panels,\n        get: function get(tmplName, data, columnKeys) {\n            return ax5.mustache.render(DOCKER.tmpl[tmplName].call(this, columnKeys), data);\n        }\n    };\n})();","/*\n * Copyright (c) 2017. tom@axisj.com\n * - github.com/thomasjang\n * - www.axisj.com\n */\n\n(function () {\n\n    let UI = ax5.ui,\n        U = ax5.util;\n\n    UI.addClass({\n        className: \"docker\",\n        version: \"${VERSION}\"\n    }, (function () {\n\n        /**\n         * @class ax5docker\n         * @classdesc\n         * @author tom@axisj.com\n         * @example\n         * ```\n         * var ax5docker = new ax5.ui.ax5docker();\n         * ```\n         */\n        let ax5docker = function () {\n            let self = this,\n                cfg;\n\n            this.instanceId = ax5.getGuid();\n            this.config = {\n                theme: 'default',\n                animateTime: 250,\n                columnKeys: {}\n            };\n            // 패널 정보\n            this.panels = [];\n            this.$panels = [];\n\n            cfg = this.config;\n\n            let repaintPanels = () => {\n\n                let appendProcessor = {\n                    stack($parent, myself, parent){\n                        let $dom;\n\n                        $dom = jQuery('<div data-ax5docker-pane=\"\">' +\n                            '<ul data-ax5docker-pane-tabs=\"\"></ul>' +\n                            '<div data-ax5docker-pane-item-views=\"\"></div>' +\n                            '</div>');\n                        $parent.append($dom);\n\n                        if (U.isArray(myself.panels)) {\n                            myself.panels.forEach(function (P) {\n                                appendProcessor[P.type]($dom, P, myself);\n                            });\n                        }\n\n                        $dom = null;\n                    },\n                    panel($parent, myself, parent){\n                        let $dom, $item, $label;\n\n                        $label = jQuery('<li>' + myself.name + '</li>');\n                        $item = jQuery('<div data-ax5docker-pane-item=\"\"></div>');\n\n                        if (parent.type == \"stack\") {\n                            $parent.find('[data-ax5docker-pane-tabs]').append($label);\n                            $parent.find('[data-ax5docker-pane-item-views]').append($item);\n                        } else {\n                            $dom = jQuery('<div data-ax5docker-pane=\"\">' +\n                                '<ul data-ax5docker-pane-tabs=\"\"></ul>' +\n                                '<div data-ax5docker-pane-item-views=\"\"></div>' +\n                                '</div>');\n\n                            $dom.find('[data-ax5docker-pane-tabs]').append($label);\n                            $dom.find('[data-ax5docker-pane-item-views]').append($item);\n\n                            $parent.append($dom);\n                        }\n\n                        $dom = null;\n                        $item = null;\n                        $label = null;\n                    },\n                    resizeHandel($parent, myself, parent){\n                        let $dom = jQuery('<div data-ax5docker-resize-handle=\"\"></div>');\n                        $parent.append($dom);\n                        $dom = null;\n                    },\n                    row($parent, myself, parent){\n                        let $dom;\n\n                        $dom = jQuery('<div data-ax5docker-pane-axis=\"row\"></div>');\n                        $parent.append($dom);\n\n                        if (U.isArray(myself.panels)) {\n                            myself.panels.forEach(function (P, pIndex) {\n                                if (pIndex > 0) {\n                                    appendProcessor[\"resizeHandel\"]($dom, P, myself);\n                                }\n                                appendProcessor[P.type]($dom, P, myself);\n                            });\n                        }\n\n                        $dom = null;\n                    },\n                    columns($parent, myself, parent){\n                        let $dom;\n\n                        $dom = jQuery('<div data-ax5docker-pane-axis=\"column\"></div>');\n                        $parent.append($dom);\n\n                        if (U.isArray(myself.panels)) {\n                            myself.panels.forEach(function (P) {\n                                appendProcessor[P.type]($dom, P, myself);\n                            });\n                        }\n\n                        $dom = null;\n                    }\n                };\n\n                let $root = jQuery('<div data-ax5docker-panes=\"\"></div>');\n                appendProcessor[this.panels[0].type]($root, this.panels[0], null);\n                this.$target.html($root);\n\n                $root = null;\n            };\n\n\n            /**\n             * @method ax5docker.setConfig\n             * @param {Object} config\n             * @param {Array} config.panels\n             */\n            this.init = function (_config) {\n                cfg = jQuery.extend(true, {}, cfg, _config);\n                if (!cfg.target) {\n                    console.log(ax5.info.getError(\"ax5docker\", \"401\", \"init\"));\n                    return this;\n                }\n                // memory target\n                this.$target = jQuery(cfg.target);\n                // set panels\n                this.panels = cfg.panels || [];\n                // event Functions\n                this.onStateChanged = cfg.onStateChanged;\n                this.onClick = cfg.onClick;\n                this.onLoad = cfg.onLoad;\n                this.onDataChanged = cfg.onDataChanged;\n\n                // 패널 다시 그리기\n                repaintPanels();\n            };\n            /**\n             * @method ax5docker.setPanels\n             * @returns {ax5docker}\n             */\n            this.setPanels = function (_panels) {\n                // set panels\n                this.panels = _panels || [];\n\n                // 패널 다시 그리기\n                repaintPanels();\n                return this;\n            };\n\n            // 클래스 생성자\n            this.main = (function () {\n                if (arguments && U.isObject(arguments[0])) {\n                    this.setConfig(arguments[0]);\n                }\n            }).apply(this, arguments);\n\n        };\n\n        return ax5docker;\n    })());\n\n})();","// ax5.ui.docker.tmpl\n(function () {\n\n    let DOCKER = ax5.ui.docker;\n\n    let panels = function (columnKeys) {\n        return ` \n{{#panels}}\n{{#panels}}\n{{/panels}}\n{{^panels}}\n{{/panels}}\n{{/panels}}\n        `;\n    };\n\n    DOCKER.tmpl = {\n        \"panels\": panels,\n        get: function (tmplName, data, columnKeys) {\n            return ax5.mustache.render(DOCKER.tmpl[tmplName].call(this, columnKeys), data);\n        }\n    };\n\n})();"]}