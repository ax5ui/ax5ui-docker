{"version":3,"sources":["ax5docker.min.js","ax5docker.js","ax5docker-tmpl.js"],"names":["UI","ax5","ui","U","util","addClass","className","version","ax5docker","_this","this","cfg","instanceId","getGuid","config","theme","animateTime","columnKeys","control","icons","close","more","panels","panelId","modules","getPanelId","defaultModule","init","container","state","html","name","active","deactive","destroy","getPanelPath","parent","pIndex","paths","panelPath","push","join","getPanel","_panelPath","path","_path","isArray","concat","split","forEach","n","replace","Function","call","e","setPanel","_value","controlPanel","_panel","_control","moduleState","jQuery","extend","moduleContainer","$element","$item","module","processor","builded","moduleName","$label","removeClass","arrangePanel","that","panel","controlType","runProcessor","isFunction","after","before","repaintPanels","appendProcessor","stack","$parent","myself","$dom","activeIndex","append","P","_pIndex","panelIndex","type","find","resizeHandle","row","column","$root","$target","off","on","closePanel","$","parents","stopEvent","changeActiveStackPanel","alignStackPane","clickedLabel","$clickedLabel","$pane","pane","attr","hasClass","p","pl","length","debounceFn","debounce","fn","each","$this","scrollWidth","clientWidth","bind","newObj","_config","target","onStateChanged","onClick","onLoad","onDataChanged","window","id","console","log","info","getError","setPanels","_panels","addModule","isObject","repaint","addPanel","_addPath","_addType","_panelIndex","a","b","panelProcessor","_pane","copyPanel","addProcessor","row-left","parentPath","substr","lastIndexOf","parentPane","row-right","column-top","column-bottom","splice","main","arguments","setConfig","apply","DOCKER","docker","tmpl","get","tmplName","data","mustache","render"],"mappings":"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","file":"ax5docker.min.js","sourcesContent":["\"use strict\";\n\n/*\n * Copyright (c) 2017. tom@axisj.com\n * - github.com/thomasjang\n * - www.axisj.com\n */\n\n(function () {\n\n    var UI = ax5.ui,\n        U = ax5.util;\n\n    UI.addClass({\n        className: \"docker\",\n        version: \"${VERSION}\"\n    }, function () {\n\n        /**\n         * @class ax5docker\n         * @classdesc\n         * @author tom@axisj.com\n         * @example\n         * ```\n         * var ax5docker = new ax5.ui.ax5docker();\n         * ```\n         */\n        var ax5docker = function ax5docker() {\n            var _this = this;\n\n            var self = this,\n                cfg = void 0;\n\n            this.instanceId = ax5.getGuid();\n            this.config = {\n                theme: 'default',\n                animateTime: 250,\n                columnKeys: {},\n                control: {},\n                icons: {\n                    close: 'X',\n                    more: '...'\n                }\n            };\n            // 패널 정보\n            this.panels = [];\n            this.panelId = 0;\n\n            // 패널의 컨텐츠 모듈\n            this.modules = {};\n\n            cfg = this.config;\n\n            var getPanelId = function getPanelId() {\n                return _this.panelId++;\n            },\n                defaultModule = {\n                init: function init(container, state) {\n                    container[\"$element\"].html(state.name);\n                },\n                active: function active(container, state) {},\n                deactive: function deactive(container, state) {},\n                destroy: function destroy(container, state) {}\n            },\n                getPanelPath = function getPanelPath(parent, pIndex) {\n                var paths = [];\n                if (parent && typeof parent.panelPath !== \"undefined\") {\n                    paths.push(parent.panelPath);\n                }\n\n                paths.push('panels[' + (pIndex || 0) + ']');\n                return paths.join(\".\");\n            },\n                getPanel = function getPanel(_panelPath) {\n                var path = [],\n                    _path = U.isArray(_panelPath) ? [].concat(_panelPath) : [].concat(_panelPath.split(/[\\.\\[\\]]/g));\n\n                _path.forEach(function (n) {\n                    if (n !== \"\") path.push(\"[\\\"\" + n.replace(/['\\\"]/g, \"\") + \"\\\"]\");\n                });\n\n                try {\n                    return Function(\"\", \"return this\" + path.join('') + \";\").call(_this);\n                } catch (e) {\n                    return;\n                }\n            },\n                getParentPanel = function getParentPanel(_panelPath) {\n                var path = [],\n                    _path = U.isArray(_panelPath) ? [].concat(_panelPath) : [].concat(_panelPath.split(/[\\.\\[\\]]/g));\n                _path.pop();\n                _path.forEach(function (n) {\n                    if (n !== \"\") path.push(\"[\\\"\" + n.replace(/['\\\"]/g, \"\") + \"\\\"]\");\n                });\n\n                try {\n                    return Function(\"\", \"return this\" + path.join('') + \";\").call(_this);\n                } catch (e) {\n                    return;\n                }\n            },\n                setPanel = function setPanel(_panelPath, _value) {\n                var path = [],\n                    _path = U.isArray(_panelPath) ? [].concat(_panelPath) : [].concat(_panelPath.split(/[\\.\\[\\]]/g));\n\n                _path.forEach(function (n) {\n                    if (n !== \"\") path.push(\"[\\\"\" + n.replace(/['\\\"]/g, \"\") + \"\\\"]\");\n                });\n\n                return Function(\"val\", \"return this\" + path.join('') + \" = val;\").call(_this, _value);\n            };\n\n            var controlPanel = function controlPanel(_panel, _control) {\n                var moduleState = jQuery.extend(_panel.moduleState, {\n                    name: _panel.name\n                }),\n                    moduleContainer = {\n                    '$element': _panel.$item\n                },\n                    module = void 0;\n\n                var processor = {\n                    init: function init() {\n                        _panel.builded = true;\n                        module = _panel.moduleName in _this.modules && 'init' in _this.modules[_panel.moduleName] ? _this.modules[_panel.moduleName] : defaultModule;\n                        module.init(moduleContainer, moduleState);\n                    },\n                    active: function active() {\n                        _panel.active = true;\n                        _panel.$label.addClass(\"active\");\n                        _panel.$item.addClass(\"active\");\n                        module = _panel.moduleName in _this.modules && 'active' in _this.modules[_panel.moduleName] ? _this.modules[_panel.moduleName] : defaultModule;\n                        module.active(moduleContainer, moduleState);\n                    },\n                    deactive: function deactive() {\n                        _panel.active = false;\n                        _panel.$label.removeClass(\"active\");\n                        _panel.$item.removeClass(\"active\");\n                        module = _panel.moduleName in _this.modules && 'deactive' in _this.modules[_panel.moduleName] ? _this.modules[_panel.moduleName] : defaultModule;\n                        module.deactive(moduleContainer, moduleState);\n                    },\n                    destroy: function destroy() {\n                        module = _panel.moduleName in _this.modules && 'destroy' in _this.modules[_panel.moduleName] ? _this.modules[_panel.moduleName] : defaultModule;\n                        module.destroy(moduleContainer, moduleState);\n\n                        // 패널 데이터 제거.\n                        setPanel(_panel.panelPath, null);\n                        // 현재 패널 정보를 검사하여 패널 정보를 재 구성합니다.\n                        arrangePanel();\n                    }\n                };\n\n                // 사용자정의 함수 control.before, control.after에 전달할 인자 = that\n                var that = {\n                    panel: _panel,\n                    controlType: _control\n                };\n\n                // 비동기 처리 상황에 대응하기 위해 runProcessor를 별도 처리\n                var runProcessor = function runProcessor() {\n                    processor[_control]();\n                    module = null;\n\n                    if (U.isFunction(cfg.control.after)) {\n                        cfg.control.after.call(that, that);\n                    }\n                };\n\n                if (processor[_control]) {\n                    if (U.isFunction(cfg.control.before)) {\n                        cfg.control.before.call(that, that, function () {\n                            runProcessor();\n                        });\n                    } else {\n                        runProcessor();\n                    }\n                }\n            };\n\n            var repaintPanels = function repaintPanels() {\n                var appendProcessor = {\n                    stack: function stack($parent, parent, myself, pIndex) {\n\n                        var $dom = void 0,\n                            activeIndex = -1;\n                        myself.panelPath = getPanelPath(parent, pIndex);\n\n                        $dom = jQuery('<div data-ax5docker-pane=\"\" data-ax5docker-path=\"' + myself.panelPath + '\">' + '<ul data-ax5docker-pane-tabs=\"\"></ul>' + '<div data-ax5docker-pane-tabs-aside=\"\">' + cfg.icons.more + '</div>' + '<div data-ax5docker-pane-item-views=\"\"></div>' + '</div>');\n                        $parent.append($dom);\n\n                        if (U.isArray(myself.panels)) {\n                            myself.panels.forEach(function (P, pIndex) {\n                                if (P.active) activeIndex = pIndex;\n                            });\n                            if (activeIndex === -1) activeIndex = 0;\n                            myself.panels[activeIndex].active = true;\n\n                            myself.panels.forEach(function (P, _pIndex) {\n                                P.panelIndex = _pIndex;\n                                appendProcessor[P.type]($dom, myself, P, _pIndex);\n                            });\n                        }\n\n                        $dom = null;\n                        activeIndex = null;\n                    },\n                    panel: function panel($parent, parent, myself, pIndex) {\n                        var $dom = void 0;\n                        myself.panelPath = getPanelPath(parent, pIndex);\n                        myself.$label = jQuery('<li data-ax5docker-pane-tab=\"' + pIndex + '\" data-ax5docker-path=\"' + myself.panelPath + '\">' + '<div class=\"title\">' + myself.name + '</div>' + '<div class=\"close-icon\">' + cfg.icons.close + '</div>' + '</li>');\n\n                        if (!myself.$item) {\n                            myself.$item = jQuery('<div data-ax5docker-pane-item=\"' + pIndex + '\" data-ax5docker-pane-id=\"' + getPanelId() + '\" data-ax5docker-path=\"' + myself.panelPath + '\"></div>');\n                        }\n\n                        if (parent && parent.type == \"stack\") {\n                            if (myself.active) {\n                                if (!myself.builded) controlPanel(myself, \"init\");\n                                controlPanel(myself, \"active\");\n                            }\n                            $parent.find('[data-ax5docker-pane-tabs]').append(myself.$label);\n                            $parent.find('[data-ax5docker-pane-item-views]').append(myself.$item);\n                        } else {\n                            $dom = jQuery('<div data-ax5docker-pane=\"\" data-ax5docker-path=\"' + myself.panelPath + '\">' + '<ul data-ax5docker-pane-tabs=\"\"></ul>' + '<div data-ax5docker-pane-tabs-aside=\"\">' + cfg.icons.more + '</div>' + '<div data-ax5docker-pane-item-views=\"\"></div>' + '</div>');\n\n                            if (!myself.builded) controlPanel(myself, \"init\");\n                            controlPanel(myself, \"active\");\n\n                            $dom.find('[data-ax5docker-pane-tabs]').append(myself.$label);\n                            $dom.find('[data-ax5docker-pane-item-views]').append(myself.$item);\n\n                            $parent.append($dom);\n                        }\n\n                        $dom = null;\n                    },\n                    resizeHandle: function resizeHandle($parent, parent, myself) {\n                        var $dom = jQuery('<div data-ax5docker-resize-handle=\"\"></div>');\n                        $parent.append($dom);\n                        $dom = null;\n                    },\n                    row: function row($parent, parent, myself, pIndex) {\n                        var $dom = void 0;\n                        myself.panelPath = getPanelPath(parent, pIndex);\n                        if (parent && parent.type == \"stack\") {\n                            throw \"The 'stack' type child nodes are allowed only for the 'panel' type.\";\n                        }\n                        $dom = jQuery('<div data-ax5docker-pane-axis=\"row\" data-ax5docker-path=\"' + myself.panelPath + '\"></div>');\n                        $parent.append($dom);\n\n                        if (U.isArray(myself.panels)) {\n                            myself.panels.forEach(function (P, _pIndex) {\n                                if (_pIndex > 0) appendProcessor[\"resizeHandle\"]($dom, P, myself, _pIndex);\n                                P.panelIndex = _pIndex;\n                                appendProcessor[P.type]($dom, myself, P, _pIndex);\n                            });\n                        }\n\n                        $dom = null;\n                    },\n                    column: function column($parent, parent, myself, pIndex) {\n                        var $dom = void 0;\n                        myself.panelPath = getPanelPath(parent, pIndex);\n                        if (parent && parent.type == \"stack\") {\n                            throw \"The 'stack' type child nodes are allowed only for the 'panel' type.\";\n                        }\n                        $dom = jQuery('<div data-ax5docker-pane-axis=\"column\" data-ax5docker-path=\"' + myself.panelPath + '\"></div>');\n                        $parent.append($dom);\n\n                        if (U.isArray(myself.panels)) {\n                            myself.panels.forEach(function (P, _pIndex) {\n                                if (pIndex > 0) appendProcessor[\"resizeHandle\"]($dom, P, myself, _pIndex);\n                                P.panelIndex = _pIndex;\n                                appendProcessor[P.type]($dom, myself, P, _pIndex);\n                            });\n                        }\n\n                        $dom = null;\n                    }\n                };\n\n                var $root = jQuery('<div data-ax5docker-panes=\"\"></div>');\n                if (_this.panels[0]) appendProcessor[_this.panels[0].type]($root, null, _this.panels[0], 0);\n                _this.$target.html($root);\n\n                _this.$target.off(\"click\").on(\"click\", \"[data-ax5docker-pane-tab] .close-icon\", function (e) {\n                    closePanel($(this).parents('[data-ax5docker-pane-tab]'));\n                    U.stopEvent(e);\n                }).on(\"click\", \"[data-ax5docker-pane-tab]\", function (e) {\n                    changeActiveStackPanel(this);\n                    U.stopEvent(e);\n                });\n\n                // stackPane tabs 스크롤처리\n                alignStackPane();\n                $root = null;\n            };\n\n            /**\n             * 액티브 패널 변경(stack인 상황에서)\n             * @param clickedLabel\n             * @returns {boolean}\n             */\n            var changeActiveStackPanel = function changeActiveStackPanel(clickedLabel) {\n                var $clickedLabel = jQuery(clickedLabel),\n                    $pane = $clickedLabel.parents('[data-ax5docker-pane]'),\n                    labelIndex = $clickedLabel.attr(\"data-ax5docker-pane-tab\"),\n                    pane = getPanel($pane.attr(\"data-ax5docker-path\")),\n                    panel = getPanel($clickedLabel.attr(\"data-ax5docker-path\"));\n\n                if ($clickedLabel.hasClass(\"active\")) {\n                    return false;\n                } else {\n                    for (var p = 0, pl = pane.panels.length; p < pl; p++) {\n                        if (pane.panels[p].active) {\n                            controlPanel(pane.panels[p], \"deactive\");\n                        }\n                    }\n\n                    if (!panel.builded) controlPanel(panel, \"init\");\n                    controlPanel(panel, \"active\");\n                }\n                return _this;\n            };\n\n            /**\n             * 패널 삭제하기\n             * @param clickedLabel\n             * @returns {ax5docker}\n             */\n            var closePanel = function closePanel(clickedLabel) {\n                var $clickedLabel = jQuery(clickedLabel),\n                    panelPath = $clickedLabel.attr(\"data-ax5docker-path\"),\n                    panel = getPanel(panelPath);\n\n                controlPanel(panel, \"destroy\");\n                return _this;\n            };\n\n            /**\n             * stack type panel resize되면 탭 스크롤 처리 관련 처리\n             */\n            var debounceFn = ax5.util.debounce(function (fn) {\n                fn();\n            }, cfg.animateTime);\n\n            var alignStackPane = function alignStackPane() {\n                debounceFn(function () {\n                    this.$target.find('[data-ax5docker-pane-tabs]').each(function () {\n                        var $this = jQuery(this).parent();\n                        if (this.scrollWidth > this.clientWidth) {\n                            $this.addClass(\"tabs-scrolled\");\n                        } else {\n                            $this.removeClass(\"tabs-scrolled\");\n                        }\n                        $this = null;\n                    });\n                }.bind(_this));\n            };\n\n            /**\n             * 패널중에 null이 된 요소를 찾아 panels를 정리 합니다.\n             * @returns {*}\n             */\n            var arrangePanel = function arrangePanel() {\n                // console.log(this.$target.find('[data-ax5docker-pane]'));\n                var panels = [];\n                var processor = {\n                    stack: function stack(myself) {\n                        if (!U.isArray(myself.panels)) return false;\n\n                        var newObj = {\n                            type: \"stack\",\n                            panels: []\n                        };\n\n                        myself.panels.forEach(function (P, _pIndex) {\n                            if (P) {\n                                newObj.panels.push(P);\n                            }\n                        });\n\n                        if (newObj.panels.length < 2) {\n                            newObj = newObj.panels[0];\n                        }\n\n                        if (U.isArray(newObj.panels)) {\n                            for (var p = 0, pl = newObj.panels.length; p < pl; p++) {\n                                newObj.panels[p] = processor[newObj.panels[p].type](newObj.panels[p]);\n                            }\n                        }\n\n                        return newObj;\n                    },\n                    panel: function panel(myself) {\n                        //console.log(myself);\n                        return myself;\n                    },\n                    row: function row(myself) {\n\n                        if (!U.isArray(myself.panels)) return false;\n\n                        var newObj = {\n                            type: \"row\",\n                            panels: []\n                        };\n\n                        myself.panels.forEach(function (P, _pIndex) {\n                            if (P) {\n                                newObj.panels.push(P);\n                            }\n                        });\n\n                        if (newObj.panels.length < 2) {\n                            newObj = newObj.panels[0];\n                        }\n\n                        if (U.isArray(newObj.panels)) {\n                            for (var p = 0, pl = newObj.panels.length; p < pl; p++) {\n                                newObj.panels[p] = processor[newObj.panels[p].type](newObj.panels[p]);\n                            }\n                        }\n\n                        return newObj;\n                    },\n                    column: function column(myself) {\n                        if (!U.isArray(myself.panels)) return false;\n\n                        var newObj = {\n                            type: \"column\",\n                            panels: []\n                        };\n\n                        myself.panels.forEach(function (P, _pIndex) {\n                            if (P) {\n                                newObj.panels.push(P);\n                            }\n                        });\n\n                        if (newObj.panels.length < 2) {\n                            newObj = newObj.panels[0];\n                        }\n\n                        if (U.isArray(newObj.panels)) {\n                            for (var p = 0, pl = newObj.panels.length; p < pl; p++) {\n                                newObj.panels[p] = processor[newObj.panels[p].type](newObj.panels[p]);\n                            }\n                        }\n\n                        return newObj;\n                    }\n                };\n\n                if (_this.panels[0]) {\n                    _this.panels[0] = processor[_this.panels[0].type](_this.panels[0]);\n                } else {\n                    _this.panels = [];\n                }\n\n                repaintPanels();\n            };\n\n            /**\n             * @method ax5docker.setConfig\n             * @param {Object} config\n             * @param {Array} config.panels\n             */\n            this.init = function (_config) {\n                cfg = jQuery.extend(true, {}, cfg, _config);\n                if (!cfg.target) {\n                    console.log(ax5.info.getError(\"ax5docker\", \"401\", \"init\"));\n                    return this;\n                }\n                // memory target\n                this.$target = jQuery(cfg.target);\n                // set panels\n                this.panels = cfg.panels || [];\n                // event Functions\n                this.onStateChanged = cfg.onStateChanged;\n                this.onClick = cfg.onClick;\n                this.onLoad = cfg.onLoad;\n                this.onDataChanged = cfg.onDataChanged;\n\n                jQuery(window).bind(\"resize.ax5docker-\" + this.id, function () {\n                    // stackPane tabs 스크롤처리\n                    alignStackPane();\n                });\n            };\n\n            /**\n             * @method ax5docker.setPanels\n             * @returns {ax5docker}\n             */\n            this.setPanels = function (_panels) {\n                // set panels\n                this.panels = _panels || [];\n\n                // 패널 다시 그리기\n                repaintPanels();\n                return this;\n            };\n\n            /**\n             * @method ax5docker.addModule\n             * @param modules\n             * @returns {ax5docker}\n             */\n            this.addModule = function (modules) {\n                if (U.isObject(modules)) {\n                    jQuery.extend(true, this.modules, modules);\n                }\n                return this;\n            };\n\n            /**\n             * repaint panels of docker\n             * @method ax5docker.repaint\n             * @returns {ax5docker}\n             */\n            this.repaint = function () {\n                // 패널 다시 그리기\n                repaintPanels();\n                return this;\n            };\n\n            /**\n             * @method ax5docker.addPanel\n             * @param {String} _addPath - Position path to add panel\n             * @param _addType\n             * @param _panel\n             * @param _panelIndex\n             * @returns {ax5docker}\n             * @example\n             * ```js\n             * myDocker.addPanel('0.1', 'stack', {type:'panel', name:'addPanel', moduleName: 'content'});\n             *\n             * ```\n             */\n            this.addPanel = function (_addPath, _addType, _panel, _panelIndex) {\n                if (_addPath == \"undefined\") _addPath = \"0\";\n                _addPath = _addPath.replace(/[a-zA-Z\\[\\]]+/g, \"\").replace(/(\\d+)/g, function (a, b) {\n                    return \"panels[\" + a + \"]\";\n                });\n\n                //_addPath = [].concat(_addPath.split(/[\\.]/g));\n                var pane = getPanel(_addPath);\n\n                console.log(pane);\n\n                var panelProcessor = {\n                    \"stack\": function stack(_pane, _addType, _panel) {\n                        var copyPanel = jQuery.extend({}, _pane),\n                            addProcessor = {\n                            \"stack\": function stack(_pane, _panel) {\n                                _pane.panels.push(_panel);\n                                arrangePanel();\n                            },\n                            \"row-left\": function rowLeft(_pane, _panel) {\n                                var parentPath = _addPath.substr(0, _addPath.lastIndexOf(\".\"));\n                                var parentPane = getPanel(parentPath);\n                                if (parentPane.type == \"row\") {\n                                    this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                } else {\n                                    _pane = setPanel(_addPath, {\n                                        type: \"row\",\n                                        panels: []\n                                    });\n                                    _pane.panels.push(_panel);\n                                    _pane.panels.push(copyPanel);\n                                    arrangePanel();\n                                }\n                            },\n                            \"row-right\": function rowRight(_pane, _panel) {\n                                var parentPath = _addPath.substr(0, _addPath.lastIndexOf(\".\"));\n                                var parentPane = getPanel(parentPath);\n                                if (parentPane.type == \"row\") {\n                                    this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                } else {\n                                    _pane = setPanel(_addPath, {\n                                        type: \"row\",\n                                        panels: []\n                                    });\n                                    _pane.panels.push(copyPanel);\n                                    _pane.panels.push(_panel);\n                                    arrangePanel();\n                                }\n                            },\n                            \"column-top\": function columnTop(_pane, _panel) {\n                                var parentPath = _addPath.substr(0, _addPath.lastIndexOf(\".\"));\n                                var parentPane = getPanel(parentPath);\n                                if (parentPane.type == \"column\") {\n                                    this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                } else {\n                                    _pane = setPanel(_addPath, {\n                                        type: \"column\",\n                                        panels: []\n                                    });\n                                    _pane.panels.push(_panel);\n                                    _pane.panels.push(copyPanel);\n                                    arrangePanel();\n                                }\n                            },\n                            \"column-bottom\": function columnBottom(_pane, _panel) {\n                                var parentPath = _addPath.substr(0, _addPath.lastIndexOf(\".\"));\n                                var parentPane = getPanel(parentPath);\n                                if (parentPane.type == \"column\") {\n                                    this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                } else {\n                                    _pane = setPanel(_addPath, {\n                                        type: \"column\",\n                                        panels: []\n                                    });\n                                    _pane.panels.push(copyPanel);\n                                    _pane.panels.push(_panel);\n                                    arrangePanel();\n                                }\n                            }\n                        };\n                        if (_addType in addProcessor) {\n                            addProcessor[_addType].call(this, _pane, _panel);\n                        }\n\n                        copyPanel = null;\n                        addProcessor = null;\n                    },\n                    \"row\": function row(_pane, _addType, _panel, _panelIndex) {\n                        var copyPanel = jQuery.extend({}, _pane);\n                        var addProcessor = {\n                            \"stack\": function stack(_pane, _panel) {\n                                // 처리 할 수 없는 상황 첫번째 자식을 찾아 재 요청\n                                if (_pane.panels[0] && _pane.panels[0].panelPath) {\n                                    this.addPanel(_pane.panels[0].panelPath, _addType, _panel);\n                                }\n                            },\n                            \"row-left\": function rowLeft(_pane, _panel, _panelIndex) {\n                                var parentPath = _addPath.substr(0, _addPath.lastIndexOf(\".\"));\n                                var parentPane = getPanel(parentPath);\n                                if (parentPane.type == \"row\") {\n                                    _pane.panels.splice(_panelIndex, 0, _panel);\n                                    arrangePanel();\n                                } else {\n                                    _pane = setPanel(_addPath, {\n                                        type: \"row\",\n                                        panels: []\n                                    });\n                                    _pane.panels.push(_panel);\n                                    _pane.panels.push(copyPanel);\n                                    arrangePanel();\n                                }\n                            },\n                            \"row-right\": function rowRight(_pane, _panel, _panelIndex) {\n                                var parentPath = _addPath.substr(0, _addPath.lastIndexOf(\".\"));\n                                var parentPane = getPanel(parentPath);\n                                if (parentPane.type == \"row\") {\n                                    _pane.panels.splice(_panelIndex + 1, 0, _panel);\n                                    arrangePanel();\n                                } else {\n                                    _pane = setPanel(_addPath, {\n                                        type: \"row\",\n                                        panels: []\n                                    });\n                                    _pane.panels.push(copyPanel);\n                                    _pane.panels.push(_panel);\n                                    arrangePanel();\n                                }\n                            },\n                            \"column-top\": function columnTop(_pane, _panel, _panelIndex) {\n                                var parentPath = _addPath.substr(0, _addPath.lastIndexOf(\".\"));\n                                var parentPane = getPanel(parentPath);\n                                if (parentPane.type == \"column\") {\n                                    this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                } else {\n                                    _pane = setPanel(_addPath, {\n                                        type: \"column\",\n                                        panels: []\n                                    });\n                                    _pane.panels.push(_panel);\n                                    _pane.panels.push(copyPanel);\n                                    arrangePanel();\n                                }\n                            },\n                            \"column-bottom\": function columnBottom(_pane, _panel, _panelIndex) {\n                                var parentPath = _addPath.substr(0, _addPath.lastIndexOf(\".\"));\n                                var parentPane = getPanel(parentPath);\n                                if (parentPane.type == \"column\") {\n                                    this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                } else {\n                                    _pane = setPanel(_addPath, {\n                                        type: \"column\",\n                                        panels: []\n                                    });\n                                    _pane.panels.push(copyPanel);\n                                    _pane.panels.push(_panel);\n                                    arrangePanel();\n                                }\n                            }\n                        };\n                        if (_addType in addProcessor) {\n                            addProcessor[_addType].call(this, _pane, _panel, _panelIndex);\n                        }\n\n                        addProcessor = null;\n                        copyPanel = null;\n                    },\n                    \"column\": function column(_pane, _addType, _panel, _panelIndex) {\n                        var copyPanel = jQuery.extend({}, _pane);\n                        var addProcessor = {\n                            \"stack\": function stack(_pane, _panel) {\n                                if (_pane.panels[0] && _pane.panels[0].panelPath) {\n                                    this.addPanel(_pane.panels[0].panelPath, _addType, _panel);\n                                }\n                            },\n                            \"row-left\": function rowLeft(_pane, _panel) {\n                                var parentPath = _addPath.substr(0, _addPath.lastIndexOf(\".\"));\n                                var parentPane = getPanel(parentPath);\n                                if (parentPane.type == \"row\") {\n                                    this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                } else {\n                                    _pane = setPanel(_addPath, {\n                                        type: \"row\",\n                                        panels: []\n                                    });\n                                    _pane.panels.push(_panel);\n                                    _pane.panels.push(copyPanel);\n                                    arrangePanel();\n                                }\n                            },\n                            \"row-right\": function rowRight(_pane, _panel) {\n                                var parentPath = _addPath.substr(0, _addPath.lastIndexOf(\".\"));\n                                var parentPane = getPanel(parentPath);\n                                if (parentPane.type == \"row\") {\n                                    this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                } else {\n                                    _pane = setPanel(_addPath, {\n                                        type: \"row\",\n                                        panels: []\n                                    });\n                                    _pane.panels.push(copyPanel);\n                                    _pane.panels.push(_panel);\n                                    arrangePanel();\n                                }\n                            },\n                            \"column-top\": function columnTop(_pane, _panel) {\n                                _pane.panels.splice(_panelIndex, 0, _panel);\n                                arrangePanel();\n                            },\n                            \"column-bottom\": function columnBottom(_pane, _panel) {\n                                _pane.panels.splice(_panelIndex + 1, 0, _panel);\n                                arrangePanel();\n                            }\n                        };\n                        if (_addType in addProcessor) {\n                            addProcessor[_addType].call(this, _pane, _panel);\n                        }\n\n                        addProcessor = null;\n                        copyPanel = null;\n                    },\n                    \"panel\": function panel(_pane, _addType, _panel) {\n                        var copyPanel = jQuery.extend({}, _pane),\n                            addProcessor = {\n                            \"stack\": function stack(_pane, _panel) {\n                                // _pane stack으로 재구성\n                                _pane = setPanel(_addPath, {\n                                    type: \"stack\",\n                                    panels: []\n                                });\n                                _pane.panels.push(copyPanel);\n                                _pane.panels.push(_panel);\n                                arrangePanel();\n                            },\n                            \"row-left\": function rowLeft(_pane, _panel) {\n                                var parentPath = _addPath.substr(0, _addPath.lastIndexOf(\".\"));\n                                var parentPane = getPanel(parentPath);\n                                if (parentPane.type == \"row\") {\n                                    this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                } else {\n                                    _pane = setPanel(_addPath, {\n                                        type: \"row\",\n                                        panels: []\n                                    });\n                                    _pane.panels.push(_panel);\n                                    _pane.panels.push(copyPanel);\n                                    arrangePanel();\n                                }\n                            },\n                            \"row-right\": function rowRight(_pane, _panel) {\n                                var parentPath = _addPath.substr(0, _addPath.lastIndexOf(\".\"));\n                                var parentPane = getPanel(parentPath);\n                                if (parentPane.type == \"row\") {\n                                    this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                } else {\n                                    _pane = setPanel(_addPath, {\n                                        type: \"row\",\n                                        panels: []\n                                    });\n                                    _pane.panels.push(copyPanel);\n                                    _pane.panels.push(_panel);\n                                    arrangePanel();\n                                }\n                            },\n                            \"column-top\": function columnTop(_pane, _panel) {\n                                var parentPath = _addPath.substr(0, _addPath.lastIndexOf(\".\"));\n                                var parentPane = getPanel(parentPath);\n                                if (parentPane.type == \"column\") {\n                                    this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                } else {\n                                    _pane = setPanel(_addPath, {\n                                        type: \"column\",\n                                        panels: []\n                                    });\n                                    _pane.panels.push(_panel);\n                                    _pane.panels.push(copyPanel);\n                                    arrangePanel();\n                                }\n                            },\n                            \"column-bottom\": function columnBottom(_pane, _panel) {\n                                var parentPath = _addPath.substr(0, _addPath.lastIndexOf(\".\"));\n                                var parentPane = getPanel(parentPath);\n                                if (parentPane.type == \"column\") {\n                                    this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                } else {\n                                    _pane = setPanel(_addPath, {\n                                        type: \"column\",\n                                        panels: []\n                                    });\n                                    _pane.panels.push(copyPanel);\n                                    _pane.panels.push(_panel);\n                                    arrangePanel();\n                                }\n                            }\n                        };\n\n                        if (_addType in addProcessor) {\n                            addProcessor[_addType].call(this, _pane, _panel);\n                        }\n\n                        copyPanel = null;\n                        addProcessor = null;\n                    }\n                };\n\n                panelProcessor[pane.type].call(this, pane, _addType, _panel, _panelIndex);\n                return this;\n            };\n\n            // 클래스 생성자\n            this.main = function () {\n                if (arguments && U.isObject(arguments[0])) {\n                    this.setConfig(arguments[0]);\n                }\n            }.apply(this, arguments);\n        };\n\n        return ax5docker;\n    }());\n})();\n\n// todo : active 된 패널만 표시하기 -- ok\n// todo : row > stack 구현 -- ok\n// todo : stack 패널 active change -- ok\n// todo : 패널삭제하기 -- ok ~ active 패널 정리.. -- ok\n// todo : 패널추가하기 -- ok\n// todo : 패널 스플릿 리사이즈\n// todo : stack tab overflow 처리. -- ok (탭 포커싱와 탭 목록 메뉴 처리전)\n// todo : 패널 drag & drop\n\n// ax5.ui.docker.tmpl\n(function () {\n\n    var DOCKER = ax5.ui.docker;\n\n    var panels = function panels(columnKeys) {\n        return \" \\n{{#panels}}\\n{{#panels}}\\n{{/panels}}\\n{{^panels}}\\n{{/panels}}\\n{{/panels}}\\n        \";\n    };\n\n    DOCKER.tmpl = {\n        \"panels\": panels,\n        get: function get(tmplName, data, columnKeys) {\n            return ax5.mustache.render(DOCKER.tmpl[tmplName].call(this, columnKeys), data);\n        }\n    };\n})();","/*\n * Copyright (c) 2017. tom@axisj.com\n * - github.com/thomasjang\n * - www.axisj.com\n */\n\n(function () {\n\n    let UI = ax5.ui,\n        U = ax5.util;\n\n    UI.addClass({\n        className: \"docker\",\n        version: \"${VERSION}\"\n    }, (function () {\n\n        /**\n         * @class ax5docker\n         * @classdesc\n         * @author tom@axisj.com\n         * @example\n         * ```\n         * var ax5docker = new ax5.ui.ax5docker();\n         * ```\n         */\n        let ax5docker = function () {\n            let self = this,\n                cfg;\n\n            this.instanceId = ax5.getGuid();\n            this.config = {\n                theme: 'default',\n                animateTime: 250,\n                columnKeys: {},\n                control: {},\n                icons: {\n                    close: 'X',\n                    more: '...'\n                }\n            };\n            // 패널 정보\n            this.panels = [];\n            this.panelId = 0;\n\n            // 패널의 컨텐츠 모듈\n            this.modules = {};\n\n            cfg = this.config;\n\n            const getPanelId = () => {\n                    return this.panelId++;\n                },\n                defaultModule = {\n                    init(container, state){\n                        container[\"$element\"].html(state.name);\n                    },\n                    active(container, state){\n\n                    },\n                    deactive(container, state){\n\n                    },\n                    destroy(container, state){\n\n                    }\n                },\n                getPanelPath = (parent, pIndex) => {\n                    let paths = [];\n                    if (parent && typeof parent.panelPath !== \"undefined\") {\n                        paths.push(parent.panelPath);\n                    }\n\n                    paths.push('panels[' + (pIndex || 0) + ']');\n                    return paths.join(\".\");\n                },\n                getPanel = (_panelPath) => {\n                    let path = [],\n                        _path = (U.isArray(_panelPath)) ? [].concat(_panelPath) : [].concat(_panelPath.split(/[\\.\\[\\]]/g));\n\n                    _path.forEach(function (n) {\n                        if (n !== \"\") path.push(\"[\\\"\" + n.replace(/['\\\"]/g, \"\") + \"\\\"]\");\n                    });\n\n                    try {\n                        return (Function(\"\", \"return this\" + path.join('') + \";\")).call(this);\n                    } catch (e) {\n                        return;\n                    }\n                },\n                getParentPanel = (_panelPath) => {\n                    let path = [],\n                        _path = (U.isArray(_panelPath)) ? [].concat(_panelPath) : [].concat(_panelPath.split(/[\\.\\[\\]]/g));\n                    _path.pop();\n                    _path.forEach(function (n) {\n                        if (n !== \"\") path.push(\"[\\\"\" + n.replace(/['\\\"]/g, \"\") + \"\\\"]\");\n                    });\n\n                    try {\n                        return (Function(\"\", \"return this\" + path.join('') + \";\")).call(this);\n                    } catch (e) {\n                        return;\n                    }\n                },\n                setPanel = (_panelPath, _value) => {\n                    let path = [],\n                        _path = (U.isArray(_panelPath)) ? [].concat(_panelPath) : [].concat(_panelPath.split(/[\\.\\[\\]]/g));\n\n                    _path.forEach(function (n) {\n                        if (n !== \"\") path.push(\"[\\\"\" + n.replace(/['\\\"]/g, \"\") + \"\\\"]\");\n                    });\n\n                    return (Function(\"val\", \"return this\" + path.join('') + \" = val;\")).call(this, _value);\n                };\n\n            const controlPanel = (_panel, _control) => {\n                let moduleState = jQuery.extend(_panel.moduleState, {\n                        name: _panel.name\n                    }),\n                    moduleContainer = {\n                        '$element': _panel.$item\n                    },\n                    module;\n\n                let processor = {\n                    init: () => {\n                        _panel.builded = true;\n                        module = (_panel.moduleName in this.modules && 'init' in this.modules[_panel.moduleName]) ? this.modules[_panel.moduleName] : defaultModule;\n                        module.init(moduleContainer, moduleState);\n                    },\n                    active: () => {\n                        _panel.active = true;\n                        _panel.$label.addClass(\"active\");\n                        _panel.$item.addClass(\"active\");\n                        module = (_panel.moduleName in this.modules && 'active' in this.modules[_panel.moduleName]) ? this.modules[_panel.moduleName] : defaultModule;\n                        module.active(moduleContainer, moduleState);\n                    },\n                    deactive: () => {\n                        _panel.active = false;\n                        _panel.$label.removeClass(\"active\");\n                        _panel.$item.removeClass(\"active\");\n                        module = (_panel.moduleName in this.modules && 'deactive' in this.modules[_panel.moduleName]) ? this.modules[_panel.moduleName] : defaultModule;\n                        module.deactive(moduleContainer, moduleState);\n                    },\n                    destroy: () => {\n                        module = (_panel.moduleName in this.modules && 'destroy' in this.modules[_panel.moduleName]) ? this.modules[_panel.moduleName] : defaultModule;\n                        module.destroy(moduleContainer, moduleState);\n\n                        // 패널 데이터 제거.\n                        setPanel(_panel.panelPath, null);\n                        // 현재 패널 정보를 검사하여 패널 정보를 재 구성합니다.\n                        arrangePanel();\n                    }\n                };\n\n                // 사용자정의 함수 control.before, control.after에 전달할 인자 = that\n                let that = {\n                    panel: _panel,\n                    controlType: _control\n                };\n\n                // 비동기 처리 상황에 대응하기 위해 runProcessor를 별도 처리\n                let runProcessor = () => {\n                    processor[_control]();\n                    module = null;\n\n                    if (U.isFunction(cfg.control.after)) {\n                        cfg.control.after.call(that, that);\n                    }\n                };\n\n                if (processor[_control]) {\n                    if (U.isFunction(cfg.control.before)) {\n                        cfg.control.before.call(that, that, function () {\n                            runProcessor();\n                        });\n                    }\n                    else {\n                        runProcessor();\n                    }\n                }\n            };\n\n            const repaintPanels = () => {\n                const appendProcessor = {\n                    stack($parent, parent, myself, pIndex){\n\n                        let $dom, activeIndex = -1;\n                        myself.panelPath = getPanelPath(parent, pIndex);\n\n                        $dom = jQuery('<div data-ax5docker-pane=\"\" data-ax5docker-path=\"' + myself.panelPath + '\">' +\n                            '<ul data-ax5docker-pane-tabs=\"\"></ul>' +\n                            '<div data-ax5docker-pane-tabs-aside=\"\">' + cfg.icons.more + '</div>' +\n                            '<div data-ax5docker-pane-item-views=\"\"></div>' +\n                            '</div>');\n                        $parent.append($dom);\n\n                        if (U.isArray(myself.panels)) {\n                            myself.panels.forEach(function (P, pIndex) {\n                                if (P.active) activeIndex = pIndex;\n                            });\n                            if (activeIndex === -1) activeIndex = 0;\n                            myself.panels[activeIndex].active = true;\n\n                            myself.panels.forEach(function (P, _pIndex) {\n                                P.panelIndex = _pIndex;\n                                appendProcessor[P.type]($dom, myself, P, _pIndex);\n                            });\n                        }\n\n                        $dom = null;\n                        activeIndex = null;\n                    },\n                    panel($parent, parent, myself, pIndex){\n                        let $dom;\n                        myself.panelPath = getPanelPath(parent, pIndex);\n                        myself.$label = jQuery('<li data-ax5docker-pane-tab=\"' + pIndex + '\" data-ax5docker-path=\"' + myself.panelPath + '\">' +\n                            '<div class=\"title\">' + myself.name + '</div>' +\n                            '<div class=\"close-icon\">' + cfg.icons.close + '</div>' +\n                            '</li>');\n\n                        if (!myself.$item) {\n                            myself.$item = jQuery('<div data-ax5docker-pane-item=\"' + pIndex + '\" data-ax5docker-pane-id=\"' + getPanelId() + '\" data-ax5docker-path=\"' + myself.panelPath + '\"></div>');\n                        }\n\n                        if (parent && parent.type == \"stack\") {\n                            if (myself.active) {\n                                if (!myself.builded) controlPanel(myself, \"init\");\n                                controlPanel(myself, \"active\");\n                            }\n                            $parent.find('[data-ax5docker-pane-tabs]').append(myself.$label);\n                            $parent.find('[data-ax5docker-pane-item-views]').append(myself.$item);\n                        } else {\n                            $dom = jQuery('<div data-ax5docker-pane=\"\" data-ax5docker-path=\"' + myself.panelPath + '\">' +\n                                '<ul data-ax5docker-pane-tabs=\"\"></ul>' +\n                                '<div data-ax5docker-pane-tabs-aside=\"\">' + cfg.icons.more + '</div>' +\n                                '<div data-ax5docker-pane-item-views=\"\"></div>' +\n                                '</div>');\n\n                            if (!myself.builded) controlPanel(myself, \"init\");\n                            controlPanel(myself, \"active\");\n\n                            $dom.find('[data-ax5docker-pane-tabs]').append(myself.$label);\n                            $dom.find('[data-ax5docker-pane-item-views]').append(myself.$item);\n\n                            $parent.append($dom);\n                        }\n\n                        $dom = null;\n                    },\n                    resizeHandle($parent, parent, myself){\n                        let $dom = jQuery('<div data-ax5docker-resize-handle=\"\"></div>');\n                        $parent.append($dom);\n                        $dom = null;\n                    },\n                    row($parent, parent, myself, pIndex){\n                        let $dom;\n                        myself.panelPath = getPanelPath(parent, pIndex);\n                        if (parent && parent.type == \"stack\") {\n                            throw \"The 'stack' type child nodes are allowed only for the 'panel' type.\";\n                        }\n                        $dom = jQuery('<div data-ax5docker-pane-axis=\"row\" data-ax5docker-path=\"' + myself.panelPath + '\"></div>');\n                        $parent.append($dom);\n\n                        if (U.isArray(myself.panels)) {\n                            myself.panels.forEach(function (P, _pIndex) {\n                                if (_pIndex > 0) appendProcessor[\"resizeHandle\"]($dom, P, myself, _pIndex);\n                                P.panelIndex = _pIndex;\n                                appendProcessor[P.type]($dom, myself, P, _pIndex);\n                            });\n                        }\n\n                        $dom = null;\n                    },\n                    column($parent, parent, myself, pIndex){\n                        let $dom;\n                        myself.panelPath = getPanelPath(parent, pIndex);\n                        if (parent && parent.type == \"stack\") {\n                            throw \"The 'stack' type child nodes are allowed only for the 'panel' type.\";\n                        }\n                        $dom = jQuery('<div data-ax5docker-pane-axis=\"column\" data-ax5docker-path=\"' + myself.panelPath + '\"></div>');\n                        $parent.append($dom);\n\n                        if (U.isArray(myself.panels)) {\n                            myself.panels.forEach(function (P, _pIndex) {\n                                if (pIndex > 0) appendProcessor[\"resizeHandle\"]($dom, P, myself, _pIndex);\n                                P.panelIndex = _pIndex;\n                                appendProcessor[P.type]($dom, myself, P, _pIndex);\n                            });\n                        }\n\n                        $dom = null;\n                    }\n                };\n\n                let $root = jQuery('<div data-ax5docker-panes=\"\"></div>');\n                if (this.panels[0]) appendProcessor[this.panels[0].type]($root, null, this.panels[0], 0);\n                this.$target.html($root);\n\n                this.$target\n                    .off(\"click\")\n                    .on(\"click\", \"[data-ax5docker-pane-tab] .close-icon\", function (e) {\n                        closePanel($(this).parents('[data-ax5docker-pane-tab]'));\n                        U.stopEvent(e);\n                    })\n                    .on(\"click\", \"[data-ax5docker-pane-tab]\", function (e) {\n                        changeActiveStackPanel(this);\n                        U.stopEvent(e);\n                    });\n\n                // stackPane tabs 스크롤처리\n                alignStackPane();\n                $root = null;\n            };\n\n            /**\n             * 액티브 패널 변경(stack인 상황에서)\n             * @param clickedLabel\n             * @returns {boolean}\n             */\n            const changeActiveStackPanel = (clickedLabel) => {\n                let $clickedLabel = jQuery(clickedLabel),\n                    $pane = $clickedLabel.parents('[data-ax5docker-pane]'),\n                    labelIndex = $clickedLabel.attr(\"data-ax5docker-pane-tab\"),\n                    pane = getPanel($pane.attr(\"data-ax5docker-path\")),\n                    panel = getPanel($clickedLabel.attr(\"data-ax5docker-path\"));\n\n                if ($clickedLabel.hasClass(\"active\")) {\n                    return false;\n                } else {\n                    for (let p = 0, pl = pane.panels.length; p < pl; p++) {\n                        if (pane.panels[p].active) {\n                            controlPanel(pane.panels[p], \"deactive\");\n                        }\n                    }\n\n                    if (!panel.builded) controlPanel(panel, \"init\");\n                    controlPanel(panel, \"active\");\n                }\n                return this;\n            };\n\n            /**\n             * 패널 삭제하기\n             * @param clickedLabel\n             * @returns {ax5docker}\n             */\n            const closePanel = (clickedLabel) => {\n                let $clickedLabel = jQuery(clickedLabel),\n                    panelPath = $clickedLabel.attr(\"data-ax5docker-path\"),\n                    panel = getPanel(panelPath);\n\n                controlPanel(panel, \"destroy\");\n                return this;\n            };\n\n            /**\n             * stack type panel resize되면 탭 스크롤 처리 관련 처리\n             */\n            const debounceFn = ax5.util.debounce(function (fn) {\n                fn();\n            }, cfg.animateTime);\n\n            const alignStackPane = () => {\n                debounceFn((function () {\n                    this.$target.find('[data-ax5docker-pane-tabs]').each(function () {\n                        let $this = jQuery(this).parent();\n                        if (this.scrollWidth > this.clientWidth) {\n                            $this.addClass(\"tabs-scrolled\");\n                        } else {\n                            $this.removeClass(\"tabs-scrolled\");\n                        }\n                        $this = null;\n                    });\n                }).bind(this));\n            };\n\n            /**\n             * 패널중에 null이 된 요소를 찾아 panels를 정리 합니다.\n             * @returns {*}\n             */\n            const arrangePanel = () => {\n                // console.log(this.$target.find('[data-ax5docker-pane]'));\n                const panels = [];\n                const processor = {\n                    stack(myself){\n                        if (!U.isArray(myself.panels)) return false;\n\n                        let newObj = {\n                            type: \"stack\",\n                            panels: []\n                        };\n\n                        myself.panels.forEach(function (P, _pIndex) {\n                            if (P) {\n                                newObj.panels.push(P);\n                            }\n                        });\n\n                        if (newObj.panels.length < 2) {\n                            newObj = newObj.panels[0];\n                        }\n\n                        if (U.isArray(newObj.panels)) {\n                            for (let p = 0, pl = newObj.panels.length; p < pl; p++) {\n                                newObj.panels[p] = processor[newObj.panels[p].type](newObj.panels[p]);\n                            }\n                        }\n\n                        return newObj;\n                    },\n                    panel(myself){\n                        //console.log(myself);\n                        return myself;\n                    },\n                    row(myself){\n\n                        if (!U.isArray(myself.panels)) return false;\n\n                        let newObj = {\n                            type: \"row\",\n                            panels: []\n                        };\n\n                        myself.panels.forEach(function (P, _pIndex) {\n                            if (P) {\n                                newObj.panels.push(P);\n                            }\n                        });\n\n                        if (newObj.panels.length < 2) {\n                            newObj = newObj.panels[0];\n                        }\n\n                        if (U.isArray(newObj.panels)) {\n                            for (let p = 0, pl = newObj.panels.length; p < pl; p++) {\n                                newObj.panels[p] = processor[newObj.panels[p].type](newObj.panels[p]);\n                            }\n                        }\n\n                        return newObj;\n                    },\n                    column(myself){\n                        if (!U.isArray(myself.panels)) return false;\n\n                        let newObj = {\n                            type: \"column\",\n                            panels: []\n                        };\n\n                        myself.panels.forEach(function (P, _pIndex) {\n                            if (P) {\n                                newObj.panels.push(P);\n                            }\n                        });\n\n                        if (newObj.panels.length < 2) {\n                            newObj = newObj.panels[0];\n                        }\n\n                        if (U.isArray(newObj.panels)) {\n                            for (let p = 0, pl = newObj.panels.length; p < pl; p++) {\n                                newObj.panels[p] = processor[newObj.panels[p].type](newObj.panels[p]);\n                            }\n                        }\n\n                        return newObj;\n                    },\n                };\n\n                if (this.panels[0]) {\n                    this.panels[0] = processor[this.panels[0].type](this.panels[0]);\n                } else {\n                    this.panels = [];\n                }\n\n                repaintPanels();\n            };\n\n            /**\n             * @method ax5docker.setConfig\n             * @param {Object} config\n             * @param {Array} config.panels\n             */\n            this.init = function (_config) {\n                cfg = jQuery.extend(true, {}, cfg, _config);\n                if (!cfg.target) {\n                    console.log(ax5.info.getError(\"ax5docker\", \"401\", \"init\"));\n                    return this;\n                }\n                // memory target\n                this.$target = jQuery(cfg.target);\n                // set panels\n                this.panels = cfg.panels || [];\n                // event Functions\n                this.onStateChanged = cfg.onStateChanged;\n                this.onClick = cfg.onClick;\n                this.onLoad = cfg.onLoad;\n                this.onDataChanged = cfg.onDataChanged;\n\n                jQuery(window).bind(\"resize.ax5docker-\" + this.id, function () {\n                    // stackPane tabs 스크롤처리\n                    alignStackPane();\n                });\n            };\n\n            /**\n             * @method ax5docker.setPanels\n             * @returns {ax5docker}\n             */\n            this.setPanels = function (_panels) {\n                // set panels\n                this.panels = _panels || [];\n\n                // 패널 다시 그리기\n                repaintPanels();\n                return this;\n            };\n\n            /**\n             * @method ax5docker.addModule\n             * @param modules\n             * @returns {ax5docker}\n             */\n            this.addModule = function (modules) {\n                if (U.isObject(modules)) {\n                    jQuery.extend(true, this.modules, modules);\n                }\n                return this;\n            };\n\n            /**\n             * repaint panels of docker\n             * @method ax5docker.repaint\n             * @returns {ax5docker}\n             */\n            this.repaint = function () {\n                // 패널 다시 그리기\n                repaintPanels();\n                return this;\n            };\n\n            /**\n             * @method ax5docker.addPanel\n             * @param {String} _addPath - Position path to add panel\n             * @param _addType\n             * @param _panel\n             * @param _panelIndex\n             * @returns {ax5docker}\n             * @example\n             * ```js\n             * myDocker.addPanel('0.1', 'stack', {type:'panel', name:'addPanel', moduleName: 'content'});\n             *\n             * ```\n             */\n            this.addPanel = function (_addPath, _addType, _panel, _panelIndex) {\n                if (_addPath == \"undefined\") _addPath = \"0\";\n                _addPath = _addPath\n                    .replace(/[a-zA-Z\\[\\]]+/g, \"\")\n                    .replace(/(\\d+)/g, function (a, b) {\n                        return \"panels[\" + a + \"]\";\n                    });\n\n                //_addPath = [].concat(_addPath.split(/[\\.]/g));\n                let pane = getPanel(_addPath);\n\n                console.log(pane);\n\n                let panelProcessor = {\n                    \"stack\"(_pane, _addType, _panel){\n                        let copyPanel = jQuery.extend({}, _pane),\n                            addProcessor = {\n                                \"stack\"(_pane, _panel){\n                                    _pane.panels.push(_panel);\n                                    arrangePanel();\n                                },\n                                \"row-left\"(_pane, _panel){\n                                    let parentPath = _addPath.substr(0, _addPath.lastIndexOf(\".\"));\n                                    let parentPane = getPanel(parentPath);\n                                    if (parentPane.type == \"row\") {\n                                        this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                    } else {\n                                        _pane = setPanel(_addPath, {\n                                            type: \"row\",\n                                            panels: []\n                                        });\n                                        _pane.panels.push(_panel);\n                                        _pane.panels.push(copyPanel);\n                                        arrangePanel();\n                                    }\n                                },\n                                \"row-right\"(_pane, _panel){\n                                    let parentPath = _addPath.substr(0, _addPath.lastIndexOf(\".\"));\n                                    let parentPane = getPanel(parentPath);\n                                    if (parentPane.type == \"row\") {\n                                        this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                    } else {\n                                        _pane = setPanel(_addPath, {\n                                            type: \"row\",\n                                            panels: []\n                                        });\n                                        _pane.panels.push(copyPanel);\n                                        _pane.panels.push(_panel);\n                                        arrangePanel();\n                                    }\n                                },\n                                \"column-top\"(_pane, _panel){\n                                    let parentPath = _addPath.substr(0, _addPath.lastIndexOf(\".\"));\n                                    let parentPane = getPanel(parentPath);\n                                    if (parentPane.type == \"column\") {\n                                        this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                    } else {\n                                        _pane = setPanel(_addPath, {\n                                            type: \"column\",\n                                            panels: []\n                                        });\n                                        _pane.panels.push(_panel);\n                                        _pane.panels.push(copyPanel);\n                                        arrangePanel();\n                                    }\n                                },\n                                \"column-bottom\"(_pane, _panel){\n                                    let parentPath = _addPath.substr(0, _addPath.lastIndexOf(\".\"));\n                                    let parentPane = getPanel(parentPath);\n                                    if (parentPane.type == \"column\") {\n                                        this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                    } else {\n                                        _pane = setPanel(_addPath, {\n                                            type: \"column\",\n                                            panels: []\n                                        });\n                                        _pane.panels.push(copyPanel);\n                                        _pane.panels.push(_panel);\n                                        arrangePanel();\n                                    }\n                                }\n                            };\n                        if (_addType in addProcessor) {\n                            addProcessor[_addType].call(this, _pane, _panel);\n                        }\n\n                        copyPanel = null;\n                        addProcessor = null;\n                    },\n                    \"row\"(_pane, _addType, _panel, _panelIndex){\n                        let copyPanel = jQuery.extend({}, _pane);\n                        let addProcessor = {\n                            \"stack\"(_pane, _panel){\n                                // 처리 할 수 없는 상황 첫번째 자식을 찾아 재 요청\n                                if (_pane.panels[0] && _pane.panels[0].panelPath) {\n                                    this.addPanel(_pane.panels[0].panelPath, _addType, _panel);\n                                }\n                            },\n                            \"row-left\"(_pane, _panel, _panelIndex){\n                                let parentPath = _addPath.substr(0, _addPath.lastIndexOf(\".\"));\n                                let parentPane = getPanel(parentPath);\n                                if (parentPane.type == \"row\") {\n                                    _pane.panels.splice(_panelIndex, 0, _panel);\n                                    arrangePanel();\n                                } else {\n                                    _pane = setPanel(_addPath, {\n                                        type: \"row\",\n                                        panels: []\n                                    });\n                                    _pane.panels.push(_panel);\n                                    _pane.panels.push(copyPanel);\n                                    arrangePanel();\n                                }\n                            },\n                            \"row-right\"(_pane, _panel, _panelIndex){\n                                let parentPath = _addPath.substr(0, _addPath.lastIndexOf(\".\"));\n                                let parentPane = getPanel(parentPath);\n                                if (parentPane.type == \"row\") {\n                                    _pane.panels.splice(_panelIndex + 1, 0, _panel);\n                                    arrangePanel();\n                                } else {\n                                    _pane = setPanel(_addPath, {\n                                        type: \"row\",\n                                        panels: []\n                                    });\n                                    _pane.panels.push(copyPanel);\n                                    _pane.panels.push(_panel);\n                                    arrangePanel();\n                                }\n                            },\n                            \"column-top\"(_pane, _panel, _panelIndex){\n                                let parentPath = _addPath.substr(0, _addPath.lastIndexOf(\".\"));\n                                let parentPane = getPanel(parentPath);\n                                if (parentPane.type == \"column\") {\n                                    this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                } else {\n                                    _pane = setPanel(_addPath, {\n                                        type: \"column\",\n                                        panels: []\n                                    });\n                                    _pane.panels.push(_panel);\n                                    _pane.panels.push(copyPanel);\n                                    arrangePanel();\n                                }\n                            },\n                            \"column-bottom\"(_pane, _panel, _panelIndex){\n                                let parentPath = _addPath.substr(0, _addPath.lastIndexOf(\".\"));\n                                let parentPane = getPanel(parentPath);\n                                if (parentPane.type == \"column\") {\n                                    this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                } else {\n                                    _pane = setPanel(_addPath, {\n                                        type: \"column\",\n                                        panels: []\n                                    });\n                                    _pane.panels.push(copyPanel);\n                                    _pane.panels.push(_panel);\n                                    arrangePanel();\n                                }\n                            }\n                        };\n                        if (_addType in addProcessor) {\n                            addProcessor[_addType].call(this, _pane, _panel, _panelIndex);\n                        }\n\n                        addProcessor = null;\n                        copyPanel = null;\n                    },\n                    \"column\"(_pane, _addType, _panel, _panelIndex){\n                        let copyPanel = jQuery.extend({}, _pane);\n                        let addProcessor = {\n                            \"stack\"(_pane, _panel){\n                                if (_pane.panels[0] && _pane.panels[0].panelPath) {\n                                    this.addPanel(_pane.panels[0].panelPath, _addType, _panel);\n                                }\n                            },\n                            \"row-left\"(_pane, _panel){\n                                let parentPath = _addPath.substr(0, _addPath.lastIndexOf(\".\"));\n                                let parentPane = getPanel(parentPath);\n                                if (parentPane.type == \"row\") {\n                                    this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                } else {\n                                    _pane = setPanel(_addPath, {\n                                        type: \"row\",\n                                        panels: []\n                                    });\n                                    _pane.panels.push(_panel);\n                                    _pane.panels.push(copyPanel);\n                                    arrangePanel();\n                                }\n                            },\n                            \"row-right\"(_pane, _panel){\n                                let parentPath = _addPath.substr(0, _addPath.lastIndexOf(\".\"));\n                                let parentPane = getPanel(parentPath);\n                                if (parentPane.type == \"row\") {\n                                    this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                } else {\n                                    _pane = setPanel(_addPath, {\n                                        type: \"row\",\n                                        panels: []\n                                    });\n                                    _pane.panels.push(copyPanel);\n                                    _pane.panels.push(_panel);\n                                    arrangePanel();\n                                }\n                            },\n                            \"column-top\"(_pane, _panel){\n                                _pane.panels.splice(_panelIndex, 0, _panel);\n                                arrangePanel();\n                            },\n                            \"column-bottom\"(_pane, _panel){\n                                _pane.panels.splice(_panelIndex + 1, 0, _panel);\n                                arrangePanel();\n                            }\n                        };\n                        if (_addType in addProcessor) {\n                            addProcessor[_addType].call(this, _pane, _panel);\n                        }\n\n                        addProcessor = null;\n                        copyPanel = null;\n                    },\n                    \"panel\"(_pane, _addType, _panel){\n                        let copyPanel = jQuery.extend({}, _pane),\n                            addProcessor = {\n                                \"stack\"(_pane, _panel){\n                                    // _pane stack으로 재구성\n                                    _pane = setPanel(_addPath, {\n                                        type: \"stack\",\n                                        panels: []\n                                    });\n                                    _pane.panels.push(copyPanel);\n                                    _pane.panels.push(_panel);\n                                    arrangePanel();\n                                },\n                                \"row-left\"(_pane, _panel){\n                                    let parentPath = _addPath.substr(0, _addPath.lastIndexOf(\".\"));\n                                    let parentPane = getPanel(parentPath);\n                                    if (parentPane.type == \"row\") {\n                                        this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                    } else {\n                                        _pane = setPanel(_addPath, {\n                                            type: \"row\",\n                                            panels: []\n                                        });\n                                        _pane.panels.push(_panel);\n                                        _pane.panels.push(copyPanel);\n                                        arrangePanel();\n                                    }\n                                },\n                                \"row-right\"(_pane, _panel){\n                                    let parentPath = _addPath.substr(0, _addPath.lastIndexOf(\".\"));\n                                    let parentPane = getPanel(parentPath);\n                                    if (parentPane.type == \"row\") {\n                                        this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                    } else {\n                                        _pane = setPanel(_addPath, {\n                                            type: \"row\",\n                                            panels: []\n                                        });\n                                        _pane.panels.push(copyPanel);\n                                        _pane.panels.push(_panel);\n                                        arrangePanel();\n                                    }\n                                },\n                                \"column-top\"(_pane, _panel){\n                                    let parentPath = _addPath.substr(0, _addPath.lastIndexOf(\".\"));\n                                    let parentPane = getPanel(parentPath);\n                                    if (parentPane.type == \"column\") {\n                                        this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                    } else {\n                                        _pane = setPanel(_addPath, {\n                                            type: \"column\",\n                                            panels: []\n                                        });\n                                        _pane.panels.push(_panel);\n                                        _pane.panels.push(copyPanel);\n                                        arrangePanel();\n                                    }\n                                },\n                                \"column-bottom\"(_pane, _panel){\n                                    let parentPath = _addPath.substr(0, _addPath.lastIndexOf(\".\"));\n                                    let parentPane = getPanel(parentPath);\n                                    if (parentPane.type == \"column\") {\n                                        this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                    } else {\n                                        _pane = setPanel(_addPath, {\n                                            type: \"column\",\n                                            panels: []\n                                        });\n                                        _pane.panels.push(copyPanel);\n                                        _pane.panels.push(_panel);\n                                        arrangePanel();\n                                    }\n                                }\n                            };\n\n                        if (_addType in addProcessor) {\n                            addProcessor[_addType].call(this, _pane, _panel);\n\n                        }\n\n                        copyPanel = null;\n                        addProcessor = null;\n                    }\n                };\n\n                panelProcessor[pane.type].call(this, pane, _addType, _panel, _panelIndex);\n                return this;\n            };\n\n            // 클래스 생성자\n            this.main = (function () {\n                if (arguments && U.isObject(arguments[0])) {\n                    this.setConfig(arguments[0]);\n                }\n            }).apply(this, arguments);\n\n        };\n\n        return ax5docker;\n    })());\n\n})();\n\n// todo : active 된 패널만 표시하기 -- ok\n// todo : row > stack 구현 -- ok\n// todo : stack 패널 active change -- ok\n// todo : 패널삭제하기 -- ok ~ active 패널 정리.. -- ok\n// todo : 패널추가하기 -- ok\n// todo : 패널 스플릿 리사이즈\n// todo : stack tab overflow 처리. -- ok (탭 포커싱와 탭 목록 메뉴 처리전)\n// todo : 패널 drag & drop\n","// ax5.ui.docker.tmpl\n(function () {\n\n    let DOCKER = ax5.ui.docker;\n\n    let panels = function (columnKeys) {\n        return ` \n{{#panels}}\n{{#panels}}\n{{/panels}}\n{{^panels}}\n{{/panels}}\n{{/panels}}\n        `;\n    };\n\n    DOCKER.tmpl = {\n        \"panels\": panels,\n        get: function (tmplName, data, columnKeys) {\n            return ax5.mustache.render(DOCKER.tmpl[tmplName].call(this, columnKeys), data);\n        }\n    };\n\n})();"]}