{"version":3,"sources":["ax5docker.js","ax5docker-tmpl.js"],"names":["UI","ax5","ui","U","util","DOCKER","addClass","className","version","ax5docker","_this","this","self","cfg","instanceId","getGuid","config","theme","animateTime","columnKeys","control","icons","close","more","labelDirection","disableClosePanel","disableDragPanel","resizeDebounceTime","panelDebounceTime","xvar","menu","onResize","panels","panelId","modules","debouncer","resizeDebounceFn","debounce","fn","panelDebounceFn","fireEvent","event","eventProcessor","resize","e","that","resizer","target","resizedDom","prev","next","call","bind","eventName","getPanelId","defaultModule","init","container","state","html","name","active","deactive","destroy","getPanelPath","parent","pIndex","paths","panelPath","push","join","getPanel","_panelPath","path","_path","isArray","concat","split","forEach","n","replace","Function","getPanelParent","_panel","substr","lastIndexOf","setPanel","_value","getMousePosition","mouseObj","originalEvent","changedTouches","clientX","pageX","clientY","pageY","controlPanel","_control","moduleState","jQuery","extend","moduleContainer","$element","$item","module","processor","builded","moduleName","$label","$pane","get","clientWidth","scrollWidth","animate","scrollLeft","position","left","removeClass","arrangePanel","remove","panel","controlType","runProcessor","isFunction","after","before","repaintPanels","appendProcessor","stack","$parent","myself","$dom","activeIndex","tmpl","id","color","borderColor","append","P","_pIndex","panelIndex","type","attr","find","flexGrow","resizeHandle","row","column","$root","$target","off","on","removePanel","$","parents","stopEvent","$clickedLabel","pane","hasClass","changeActiveStackPanel","openStackPanelMore","panelTabDragEvent","datas","getAttribute","mousePosition","resizerType","resizerPath","resizerIndex","resizer$dom","resizerParent$dom","resizerPrevGrow","number","css","resizerNextGrow","resizerCanvasWidth","innerWidth","width","resizerCanvasHeight","innerHeight","height","panelResizerEvent","alignStackPane","dragPanel","length","dragger","dragOverVertical","dragOverHorizontal","dragover","dragoverDom","$dragoverDom","box","mouse","removeAttr","offset","halfWidth","draggerProcessor","right","threeQuarterHeight","threeQuarterWidth","top","left-top","right-top","center-top","left-middle","right-middle","center-middle","left-bottom","right-bottom","center-bottom","isDrop","appendType","appendPanel","_resizer","document","body","da_grow","resizerLived","__da","round","flex-grow","$prevPanel","$nextPanel","prevPane","nextPane","p","pl","stackPane","$stackPane","panePath","console","log","menuItems","map","index","label","setConfig","items","onClick","popup","each","$this","panelsDeactive","newObj","_p","_config","onStateChanged","onLoad","onDataChanged","arrow","window","info","getError","setPanels","_panels","addModule","isObject","repaint","addPanel","_addPath","_addType","_panelIndex","addPath","a","b","panelProcessor","_pane","copyPanel","addProcessor","stack-left","splice","stack-right","Number","row-left","parentPath","parentPane","row-right","column-top","column-bottom","_appendPath","_appendType","copiedPanel","addType","removePanelPath","appendPanelIndex","undefined","align","main","docker_instance","arguments","apply","docker","stack_panel","data","panel_label","stack-panel","panel-label","tmplName","mustache","render"],"mappings":"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","file":"ax5docker.min.js","sourcesContent":["/*\n * Copyright (c) 2017. tom@axisj.com\n * - github.com/thomasjang\n * - www.axisj.com\n */\n\n(function () {\n\n\n    const UI = ax5.ui,\n        U = ax5.util;\n\n    let DOCKER;\n\n    UI.addClass({\n            className: \"docker\",\n            version: \"${VERSION}\"\n        }, (function () {\n\n            /**\n             * @class ax5docker\n             * @classdesc\n             * @author tom@axisj.com\n             * @example\n             * ```\n             * var ax5docker = new ax5.ui.ax5docker();\n             * ```\n             */\n            let ax5docker = function () {\n\n                let self = this,\n                    cfg;\n\n                this.instanceId = ax5.getGuid();\n\n                /**\n                 * @member {Object} ax5docker.config\n                 */\n                this.config = {\n                    theme: 'default',\n                    animateTime: 250,\n                    columnKeys: {},\n                    control: {},\n                    icons: {\n                        close: 'X',\n                        more: '...'\n                    },\n                    labelDirection: 'top',\n                    disableClosePanel: false,\n                    disableDragPanel: false,\n                    resizeDebounceTime: 100,\n                    panelDebounceTime: 300,\n                };\n\n                /**\n                 * @member {Object} ax5docker.xvar\n                 */\n                this.xvar = {};\n                /**\n                 * @member {Object} ax5docker.menu\n                 */\n                this.menu = null;\n\n                this.onResize = null;\n\n                // 패널 정보\n                /**\n                 * @member {Array} ax5docker.panels\n                 */\n                this.panels = [];\n                /**\n                 * @member {Number} ax5docker.panelId\n                 */\n                this.panelId = 0;\n\n                // 패널의 컨텐츠 모듈\n                /**\n                 * @member {Object} ax5docker.modules\n                 */\n                this.modules = {};\n\n                cfg = this.config;\n\n                /**\n                 * @private {Object} ax5docker.debouncer\n                 */\n                const debouncer = {\n                    resizeDebounceFn: ax5.util.debounce(function (fn) {\n                        fn();\n                    }, cfg.resizeDebounceTime),\n                    panelDebounceFn: ax5.util.debounce(function (fn) {\n                        fn();\n                    }, cfg.panelDebounceTime)\n                };\n\n                /**\n                 * @private {Function} fireEvent\n                 * @param event\n                 * @returns {ax5docker}\n                 */\n                const fireEvent = (event) => {\n                    const eventProcessor = {\n                        \"resize\"(e){\n                            if (this.onResize) {\n\n\n                                debouncer.resizeDebounceFn((function () {\n                                    let that = {\n                                        self: this,\n                                        resizer: e.target,\n                                        resizedDom: [e.target.prev(), e.target.next()]\n                                    };\n                                    this.onResize.call(that, that);\n                                }).bind(this));\n                            }\n                        }\n                    };\n\n                    if (event.eventName in eventProcessor) {\n                        eventProcessor[event.eventName].call(this, event);\n                    }\n\n                    return this;\n                };\n\n                const getPanelId = () => {\n                    return this.panelId++;\n                };\n\n                /**\n                 * defaultModule은 패널의 모듈이 정의되지 않은 경우를 위해 준비된 오브젝트\n                 */\n                const defaultModule = {\n                    init(container, state){\n                        container[\"$element\"].html(state.name);\n                    },\n                    active(container, state){\n\n                    },\n                    deactive(container, state){\n\n                    },\n                    destroy(container, state){\n\n                    }\n                };\n\n                /**\n                 * 부모패널과 패널인덱스 값으로 패널 패스를 구합니다.\n                 * @param parent\n                 * @param pIndex\n                 * @returns {string}\n                 */\n                const getPanelPath = (parent, pIndex) => {\n                    let paths = [];\n                    if (parent && typeof parent.panelPath !== \"undefined\") {\n                        paths.push(parent.panelPath);\n                    }\n\n                    paths.push('panels[' + (pIndex || 0) + ']');\n                    return paths.join(\".\");\n                };\n\n                /**\n                 * 패널패스를 이용하여 패널을 가져옵니다\n                 * @param _panelPath\n                 * @returns {*}\n                 */\n                const getPanel = (_panelPath) => {\n                    let path = [],\n                        _path = (U.isArray(_panelPath)) ? [].concat(_panelPath) : [].concat(_panelPath.split(/[\\.\\[\\]]/g));\n\n                    _path.forEach(function (n) {\n                        if (n !== \"\") path.push(\"[\\\"\" + n.replace(/['\\\"]/g, \"\") + \"\\\"]\");\n                    });\n\n                    try {\n                        return (Function(\"\", \"return this\" + path.join('') + \";\")).call(this);\n                    } catch (e) {\n                        return;\n                    }\n                };\n\n                /**\n                 * 패널을 이용하여 패널의 부모 패널을 가져옵니다\n                 * @param _panel\n                 */\n                const getPanelParent = (_panel) => {\n                    try {\n                        let _path = _panel.panelPath.substr(0, _panel.panelPath.lastIndexOf(\".\"));\n                        return (Function(\"\", \"return this.\" + _path + \";\")).call(this);\n                    } catch (e) {\n                        return;\n                    }\n                };\n\n                /**\n                 * 패널패스를 이용하여 패널오브젝트에 값을 부여합니다.\n                 * @param _panelPath\n                 * @param _value\n                 * @returns {*}\n                 */\n                const setPanel = (_panelPath, _value) => {\n                    let path = [],\n                        _path = (U.isArray(_panelPath)) ? [].concat(_panelPath) : [].concat(_panelPath.split(/[\\.\\[\\]]/g));\n\n                    _path.forEach(function (n) {\n                        if (n !== \"\") path.push(\"[\\\"\" + n.replace(/['\\\"]/g, \"\") + \"\\\"]\");\n                    });\n\n                    return (Function(\"val\", \"return this\" + path.join('') + \" = val;\")).call(this, _value);\n                };\n\n                /**\n                 * get mouse position\n                 * @param e\n                 * @returns {{clientX, clientY}}\n                 */\n                const getMousePosition = (e) => {\n                    let mouseObj, originalEvent = (e.originalEvent) ? e.originalEvent : e;\n                    mouseObj = ('changedTouches' in originalEvent) ? originalEvent.changedTouches[0] : originalEvent;\n                    // clientX, Y 쓰면 스크롤에서 문제 발생\n                    return {\n                        clientX: mouseObj.pageX,\n                        clientY: mouseObj.pageY\n                    }\n                };\n\n                /**\n                 * 패널의 모듈이 초기화, 활성화, 비활성, 제거 되는 일들을 제어하는 함수.\n                 * 모든 컨트롤은 실행되기전에 사용자가 정의한 control.before 함수의 결과에 따라 실행 여부를 결정합니다. 사용자가 control.before를 정의하지 않으면 무조건 실행합니다.\n                 * @param {Object} _panel\n                 * @param {String} _control - \"init\",\"active\",\"deactive\",\"destroy\"\n                 */\n                const controlPanel = (_panel, _control) => {\n                    let moduleState = jQuery.extend(_panel.moduleState, {\n                            name: _panel.name\n                        }),\n                        moduleContainer = {\n                            '$element': _panel.$item\n                        },\n                        module;\n\n                    let processor = {\n                        init: () => {\n                            _panel.builded = true;\n                            module = (_panel.moduleName in this.modules && 'init' in this.modules[_panel.moduleName]) ? this.modules[_panel.moduleName] : defaultModule;\n                            module.init(moduleContainer, moduleState);\n                        },\n                        active: () => {\n                            _panel.active = true;\n                            _panel.$label.addClass(\"active\");\n                            _panel.$item.addClass(\"active\");\n\n                            let $pane = _panel.$label.parent();\n                            if ($pane.get(0) && $pane.get(0).clientWidth !== $pane.get(0).scrollWidth) {\n                                $pane.animate({scrollLeft: _panel.$label.position().left}, 300);\n                            }\n\n                            module = (_panel.moduleName in this.modules && 'active' in this.modules[_panel.moduleName]) ? this.modules[_panel.moduleName] : defaultModule;\n                            module.active(moduleContainer, moduleState);\n                            $pane = null;\n                        },\n                        deactive: () => {\n                            _panel.active = false;\n                            _panel.$label.removeClass(\"active\");\n                            _panel.$item.removeClass(\"active\");\n                            module = (_panel.moduleName in this.modules && 'deactive' in this.modules[_panel.moduleName]) ? this.modules[_panel.moduleName] : defaultModule;\n                            module.deactive(moduleContainer, moduleState);\n                        },\n                        destroy: () => {\n                            module = (_panel.moduleName in this.modules && 'destroy' in this.modules[_panel.moduleName]) ? this.modules[_panel.moduleName] : defaultModule;\n                            module.destroy(moduleContainer, moduleState);\n\n                            // 패널 데이터 제거.\n                            setPanel(_panel.panelPath, null);\n                            // 현재 패널 정보를 검사하여 패널 정보를 재 구성합니다.\n                            arrangePanel();\n                        },\n                        remove: () => {\n                            module = (_panel.moduleName in this.modules && 'destroy' in this.modules[_panel.moduleName]) ? this.modules[_panel.moduleName] : defaultModule;\n                            module.destroy(moduleContainer, moduleState);\n\n                            // 패널 데이터 제거.\n                            setPanel(_panel.panelPath, null);\n                            // 현재 패널 정보를 검사하여 패널 정보를 재 구성합니다.\n                            arrangePanel();\n                        },\n                    };\n\n                    // 사용자정의 함수 control.before, control.after에 전달할 인자 = that\n                    let that = {\n                        panel: _panel,\n                        controlType: _control\n                    };\n\n                    // 비동기 처리 상황에 대응하기 위해 runProcessor를 별도 처리\n                    let runProcessor = () => {\n                        processor[_control]();\n                        module = null;\n\n                        if (U.isFunction(cfg.control.after)) {\n                            cfg.control.after.call(that, that);\n                        }\n                    };\n\n                    if (processor[_control]) {\n                        if (U.isFunction(cfg.control.before)) {\n                            cfg.control.before.call(that, that, function () {\n                                runProcessor();\n                            });\n                        }\n                        else {\n                            runProcessor();\n                        }\n                    }\n                };\n\n                /**\n                 * 패널들의 패널 데이터 구조에 맞게 다시 그리기\n                 */\n                const repaintPanels = () => {\n                    const appendProcessor = {\n                        stack($parent, parent, myself, pIndex){\n\n                            let $dom, activeIndex = -1;\n                            myself.panelPath = getPanelPath(parent, pIndex);\n\n                            $dom = jQuery(DOCKER.tmpl.get.call(this, \"stack-panel\", {\n                                id: self.instanceId,\n                                name: myself.name,\n                                color: myself.color,\n                                borderColor: myself.borderColor,\n                                panelPath: myself.panelPath,\n                                icons: cfg.icons,\n                                labelDirection: myself.labelDirection || cfg.labelDirection,\n                                disableClosePanel: cfg.disableClosePanel,\n                                disableDragPanel: cfg.disableDragPanel,\n                            }, {}));\n                            $parent.append($dom);\n\n                            if (U.isArray(myself.panels)) {\n                                myself.panels.forEach(function (P, pIndex) {\n                                    if (P.active) activeIndex = pIndex;\n                                });\n                                if (activeIndex === -1) activeIndex = 0;\n                                myself.panels[activeIndex].active = true;\n\n                                myself.panels.forEach(function (P, _pIndex) {\n                                    P.panelIndex = _pIndex;\n                                    appendProcessor[P.type]($dom, myself, P, _pIndex);\n                                });\n                            }\n\n                            $dom = null;\n                            activeIndex = null;\n                        },\n                        panel($parent, parent, myself, pIndex){\n                            let $dom;\n                            myself.panelPath = getPanelPath(parent, pIndex);\n                            myself.$label = jQuery(DOCKER.tmpl.get.call(this, \"panel-label\", {\n                                id: self.instanceId,\n                                pIndex: pIndex,\n                                name: myself.name,\n                                color: myself.color,\n                                borderColor: myself.borderColor,\n                                panelPath: myself.panelPath,\n                                icons: cfg.icons,\n                                disableClosePanel: cfg.disableClosePanel,\n                                disableDragPanel: cfg.disableDragPanel,\n                            }, {}));\n\n                            if (!myself.$item) {\n                                myself.$item = jQuery('<div data-ax5docker-pane-item=\"' + pIndex + '\" data-ax5docker-id=\"' + self.instanceId + '\" data-ax5docker-pane-id=\"' + getPanelId() + '\" data-ax5docker-path=\"' + myself.panelPath + '\"></div>');\n                            } else {\n                                myself.$item.attr(\"data-ax5docker-path\", myself.panelPath);\n                                myself.$item.attr(\"data-ax5docker-pane-item\", pIndex);\n                            }\n\n                            if (parent && parent.type == \"stack\") {\n                                if (myself.active) {\n                                    if (!myself.builded) controlPanel(myself, \"init\");\n                                    controlPanel(myself, \"active\");\n                                }\n                                $parent.find('[data-ax5docker-pane-tabs=\"' + self.instanceId + '\"]').append(myself.$label);\n                                $parent.find('[data-ax5docker-pane-item-views=\"' + self.instanceId + '\"]').append(myself.$item);\n                            } else {\n                                $dom = jQuery(DOCKER.tmpl.get.call(this, \"stack-panel\", {\n                                    id: self.instanceId,\n                                    name: myself.name,\n                                    panelPath: myself.panelPath,\n                                    flexGrow: myself.flexGrow,\n                                    icons: cfg.icons,\n                                    labelDirection: myself.labelDirection || cfg.labelDirection,\n                                    disableClosePanel: cfg.disableClosePanel,\n                                    disableDragPanel: cfg.disableDragPanel,\n                                }, {}));\n\n                                if (!myself.builded) controlPanel(myself, \"init\");\n                                controlPanel(myself, \"active\");\n\n                                $dom.find('[data-ax5docker-pane-tabs=\"' + self.instanceId + '\"]').append(myself.$label);\n                                $dom.find('[data-ax5docker-pane-item-views=\"' + self.instanceId + '\"]').append(myself.$item);\n\n                                $parent.append($dom);\n                            }\n\n                            $dom = null;\n                        },\n                        resizeHandle($parent, parent, myself, pIndex){\n                            let $dom = jQuery('<div data-ax5docker-id=\"' + self.instanceId + '\" data-ax5docker-resize-handle=\"' + parent.type + \"/\" + parent.panelPath + \"/\" + pIndex + '\"></div>');\n                            $parent.append($dom);\n                            $dom = null;\n                        },\n                        row($parent, parent, myself, pIndex){\n                            let $dom;\n                            myself.panelPath = getPanelPath(parent, pIndex);\n                            if (parent && parent.type == \"stack\") {\n                                throw \"The 'stack' type child nodes are allowed only for the 'panel' type.\";\n                            }\n                            $dom = jQuery('<div data-ax5docker-pane-axis=\"row\" data-ax5docker-id=\"' + self.instanceId + '\" data-ax5docker-path=\"' + myself.panelPath + '\" style=\"flex-grow: ' + (myself.flexGrow || 1) + ';\"></div>');\n                            $parent.append($dom);\n\n                            if (U.isArray(myself.panels)) {\n                                myself.panels.forEach(function (P, _pIndex) {\n                                    if (_pIndex > 0) appendProcessor[\"resizeHandle\"]($dom, myself, P, _pIndex);\n                                    P.panelIndex = _pIndex;\n                                    appendProcessor[P.type]($dom, myself, P, _pIndex);\n                                });\n                            }\n\n                            $dom = null;\n                        },\n                        column($parent, parent, myself, pIndex){\n                            let $dom;\n                            myself.panelPath = getPanelPath(parent, pIndex);\n                            if (parent && parent.type == \"stack\") {\n                                throw \"The 'stack' type child nodes are allowed only for the 'panel' type.\";\n                            }\n                            $dom = jQuery('<div data-ax5docker-pane-axis=\"column\" data-ax5docker-id=\"' + self.instanceId + '\" data-ax5docker-path=\"' + myself.panelPath + '\" style=\"flex-grow: ' + (myself.flexGrow || 1) + ';\"></div>');\n                            $parent.append($dom);\n\n                            if (U.isArray(myself.panels)) {\n                                myself.panels.forEach(function (P, _pIndex) {\n                                    if (_pIndex > 0) appendProcessor[\"resizeHandle\"]($dom, myself, P, _pIndex);\n                                    P.panelIndex = _pIndex;\n                                    appendProcessor[P.type]($dom, myself, P, _pIndex);\n                                });\n                            }\n\n                            $dom = null;\n                        }\n                    };\n\n                    let $root = jQuery('<div data-ax5docker-panes=\"' + this.instanceId + '\"></div>');\n                    if (this.panels[0]) appendProcessor[this.panels[0].type]($root, null, this.panels[0], 0);\n                    this.$target.html($root);\n\n                    this.$target\n                        .off(\"click.ax5docker-pane\")\n                        .on(\"click.ax5docker-pane\", '[data-ax5docker-id=\"' + self.instanceId + '\"][data-ax5docker-pane-tab] .close-icon', function (e) {\n                            self.removePanel($(this).parents('[data-ax5docker-pane-tab]').attr(\"data-ax5docker-path\"));\n                            U.stopEvent(e);\n                        })\n                        .on(\"click.ax5docker-pane\", '[data-ax5docker-id=\"' + self.instanceId + '\"][data-ax5docker-pane-tab]', function (e) {\n                            // pane, panelIndex 인자 변경.\n                            let $clickedLabel = jQuery(this);\n                            let pane = getPanel($clickedLabel.parents('[data-ax5docker-pane]').attr(\"data-ax5docker-path\"));\n                            let panelIndex = $clickedLabel.attr(\"data-ax5docker-pane-tab\");\n\n                            if (!$clickedLabel.hasClass(\"active\")) {\n                                changeActiveStackPanel(pane, panelIndex);\n                            }\n\n                            $clickedLabel = null;\n                            pane = null;\n                            panelIndex = null;\n                            U.stopEvent(e);\n                        })\n                        .on(\"click.ax5docker-pane\", '[data-ax5docker-pane-tabs-more=\"' + this.instanceId + '\"]', function (e) {\n                            openStackPanelMore($(this).parents('[data-ax5docker-pane]'), e);\n                            U.stopEvent(e);\n                        });\n\n                    this.$target\n                        .off(\"mousedown.ax5docker-pane-resize\")\n                        .off(\"dragstart.ax5docker-pane-resize\")\n                        .on(\"dragstart.ax5docker-pane-resize\", '[data-ax5docker-id=\"' + self.instanceId + '\"][data-ax5docker-pane-tab]', function (e) {\n                            if (!cfg.disableDragPanel) {\n                                panelTabDragEvent.on(this);\n                            }\n                        })\n                        .on(\"mousedown.ax5docker-pane-resize\", '[data-ax5docker-id=\"' + self.instanceId + '\"][data-ax5docker-resize-handle]', function (e) {\n                            let datas = this.getAttribute(\"data-ax5docker-resize-handle\").split(/\\//g);\n\n                            // panelResizerEvent.init\n                            self.xvar.mousePosition = getMousePosition(e);\n                            self.xvar.resizerType = datas[0];\n                            self.xvar.resizerPath = datas[1];\n                            self.xvar.resizerIndex = datas[2];\n                            // 주변 패널들\n                            self.xvar.resizer$dom = $(this);\n                            self.xvar.resizerParent$dom = self.xvar.resizer$dom.parent();\n                            self.xvar.resizerPrevGrow = U.number(self.xvar.resizer$dom.prev().css(\"flex-grow\"));\n                            self.xvar.resizerNextGrow = U.number(self.xvar.resizer$dom.next().css(\"flex-grow\"));\n\n                            if (self.xvar.resizerType == \"row\") {\n                                //self.xvar.resizerCanvasWidth = self.xvar.resizerParent$dom.innerWidth();\n                                self.xvar.resizerCanvasWidth = self.xvar.resizer$dom.prev().innerWidth() + self.xvar.resizer$dom.next().innerWidth() + self.xvar.resizer$dom.width();\n                            } else {\n                                //self.xvar.resizerCanvasHeight = self.xvar.resizerParent$dom.innerHeight();\n                                self.xvar.resizerCanvasHeight = self.xvar.resizer$dom.prev().innerHeight() + self.xvar.resizer$dom.next().innerHeight() + self.xvar.resizer$dom.height();\n                            }\n\n                            panelResizerEvent.on(this);\n                            U.stopEvent(e);\n                        })\n                        .on(\"dragstart.ax5docker-pane-resize\", '[data-ax5docker-id=\"' + self.instanceId + '\"][data-ax5docker-resize-handle]', function (e) {\n                            U.stopEvent(e);\n                            return false;\n                        });\n\n                    // stackPane tabs 스크롤처리\n                    alignStackPane();\n                    $root = null;\n                };\n\n                /**\n                 * repaintPanels이 작동할 때. 패널탭에 dragStart 이벤트를 연결합니다.\n                 * 발생된 이벤트가 panelTabDragEvent.on를 작동.\n                 */\n                const panelTabDragEvent = {\n                    \"on\": (dragPanel) => {\n                        if (this.panels[0] && this.panels[0].panels && this.panels[0].panels.length) {\n\n                            this.xvar.dragger = {\n                                dragPanel: dragPanel,\n                                target: null,\n                                dragOverVertical: null,\n                                dragOverHorizontal: null,\n                            };\n\n                            this.$target\n                                .on(\"dragover.ax5docker-\" + this.instanceId, '[data-ax5docker-id=\"' + this.instanceId + '\"][data-ax5docker-path]', function (e) {\n                                    // todo : dragover 구현\n                                    // console.log(\"dargover\", getMousePosition(e));\n                                    // console.log(e.target);\n                                    panelTabDragEvent.dragover(this, e);\n                                    U.stopEvent(e);\n                                })\n                                .on(\"drop.ax5docker-\" + this.instanceId, function (e) {\n                                    panelTabDragEvent.off(\"drop\");\n                                    U.stopEvent(e);\n                                })\n                                .on(\"dragend.ax5docker-\" + this.instanceId, function (e) {\n                                    panelTabDragEvent.off();\n                                    U.stopEvent(e);\n                                });\n                        }\n                    },\n                    \"dragover\": (dragoverDom, e) => {\n\n                        let $dragoverDom = jQuery(dragoverDom),\n                            box = {},\n                            mouse = getMousePosition(e),\n                            dragOverVertical,\n                            dragOverHorizontal;\n\n                        if (this.xvar.dragger.target == null || this.xvar.dragger.target.get(0) != $dragoverDom.get(0)) {\n                            if (this.xvar.dragger.target) this.xvar.dragger.target.removeAttr(\"data-dropper\");\n\n                            this.xvar.dragger.target = $dragoverDom;\n                            this.xvar.dragger.dragOverVertical = null;\n                            this.xvar.dragger.dragOverHorizontal = null;\n                        }\n\n                        box = $dragoverDom.offset();\n                        box.width = $dragoverDom.width();\n                        box.height = $dragoverDom.height();\n\n                        if ($dragoverDom.attr(\"data-ax5docker-pane-tab\")) {\n                            let halfWidth = box.width / 2;\n                            if (box.left <= mouse.clientX && (box.left + halfWidth) >= mouse.clientX) {\n                                dragOverHorizontal = \"left\";\n                            }\n                            else if ((box.left + halfWidth) <= mouse.clientX && (box.left + halfWidth * 2) >= mouse.clientX) {\n                                dragOverHorizontal = \"right\";\n                            }\n                            if (this.xvar.dragger.dragOverHorizontal != dragOverHorizontal && typeof dragOverHorizontal != \"undefined\") {\n                                this.xvar.dragger.dragOverHorizontal = dragOverHorizontal;\n                                const draggerProcessor = {\n                                    \"left\"($target){\n                                        $target.attr(\"data-dropper\", \"left\");\n                                    },\n                                    \"right\"($target){\n                                        $target.attr(\"data-dropper\", \"right\");\n                                    },\n                                };\n                                if (this.xvar.dragger.dragOverHorizontal in draggerProcessor) {\n                                    draggerProcessor[this.xvar.dragger.dragOverHorizontal](this.xvar.dragger.target);\n                                }\n                            }\n                            halfWidth = null;\n                        }\n                        else if ($dragoverDom.attr(\"data-ax5docker-pane-tabs\")) {\n                            //this.xvar.dragger.dragOverVertical = \"center\";\n                            this.xvar.dragger.dragOverHorizontal = \"last-child\";\n                            this.xvar.dragger.target.attr(\"data-dropper\", \"true\");\n                        }\n                        else if ($dragoverDom.attr(\"data-ax5docker-pane-item\")) {\n                            // panel dragover 포지션 구하기\n                            let threeQuarterHeight = box.height / 3;\n                            let threeQuarterWidth = box.width / 3;\n\n                            if (box.top <= mouse.clientY && (box.top + threeQuarterHeight) >= mouse.clientY) {\n                                dragOverVertical = \"top\";\n                            }\n                            else if ((box.top + threeQuarterHeight) <= mouse.clientY && (box.top + threeQuarterHeight * 2) >= mouse.clientY) {\n                                dragOverVertical = \"middle\";\n                            }\n                            else if ((box.top + threeQuarterHeight * 2) <= mouse.clientY && (box.top + threeQuarterHeight * 3) >= mouse.clientY) {\n                                dragOverVertical = \"bottom\";\n                            }\n\n                            if (box.left <= mouse.clientX && (box.left + threeQuarterWidth) >= mouse.clientX) {\n                                dragOverHorizontal = \"left\";\n                            }\n                            else if ((box.left + threeQuarterWidth) <= mouse.clientX && (box.left + threeQuarterWidth * 2) >= mouse.clientX) {\n                                dragOverHorizontal = \"center\";\n                            }\n                            else if ((box.left + threeQuarterWidth * 2) <= mouse.clientX && (box.left + threeQuarterWidth * 3) >= mouse.clientX) {\n                                dragOverHorizontal = \"right\";\n                            }\n\n                            if (this.xvar.dragger.dragOverVertical != dragOverVertical || this.xvar.dragger.dragOverHorizontal != dragOverHorizontal) {\n                                this.xvar.dragger.dragOverVertical = dragOverVertical;\n                                this.xvar.dragger.dragOverHorizontal = dragOverHorizontal;\n\n                                var draggerProcessor = {\n                                    \"left-top\"($target){\n                                        $target.attr(\"data-dropper\", \"left\");\n                                    },\n                                    \"right-top\"($target){\n                                        $target.attr(\"data-dropper\", \"right\");\n                                    },\n                                    \"center-top\"($target){\n                                        $target.attr(\"data-dropper\", \"top\");\n                                    },\n                                    \"left-middle\"($target){\n                                        $target.attr(\"data-dropper\", \"left\");\n                                    },\n                                    \"right-middle\"($target){\n                                        $target.attr(\"data-dropper\", \"right\");\n                                    },\n                                    \"center-middle\"($target){\n                                        $target.attr(\"data-dropper\", \"center\");\n                                    },\n                                    \"left-bottom\"($target){\n                                        $target.attr(\"data-dropper\", \"left\");\n                                    },\n                                    \"right-bottom\"($target){\n                                        $target.attr(\"data-dropper\", \"right\");\n                                    },\n                                    \"center-bottom\"($target){\n                                        $target.attr(\"data-dropper\", \"bottom\");\n                                    },\n                                };\n                                if (this.xvar.dragger.dragOverHorizontal + \"-\" + this.xvar.dragger.dragOverVertical in draggerProcessor) {\n                                    draggerProcessor[this.xvar.dragger.dragOverHorizontal + \"-\" + this.xvar.dragger.dragOverVertical](this.xvar.dragger.target);\n                                }\n                            }\n\n                            threeQuarterHeight = null;\n                            threeQuarterWidth = null;\n                        }\n\n\n                    },\n                    \"off\": (isDrop) => {\n                        if (isDrop) {\n                            let dragPanel = getPanel(this.xvar.dragger.dragPanel.getAttribute(\"data-ax5docker-path\")),\n                                appendType = [];\n\n                            if (this.xvar.dragger.dragOverHorizontal) appendType.push(this.xvar.dragger.dragOverHorizontal);\n                            if (this.xvar.dragger.dragOverVertical) appendType.push(this.xvar.dragger.dragOverVertical);\n\n                            this.appendPanel(dragPanel, this.xvar.dragger.target.attr(\"data-ax5docker-path\"), appendType);\n\n                            dragPanel = null;\n                            appendType = null;\n                        }\n\n                        alignStackPane();\n\n                        this.$target\n                            .off(\"dragover.ax5docker-\" + this.instanceId)\n                            .off(\"drop.ax5docker-\" + this.instanceId)\n                            .off(\"dragend.ax5docker-\" + this.instanceId);\n\n                        this.xvar.dragger.target.removeAttr(\"data-dropper\");\n                    }\n                };\n\n                /**\n                 * repaintPanels이 작동할 때. 리사이저에 mousedown 이벤트를 연결합니다.\n                 * 발생된 이벤트가 panelResizerEvent.on 을 작동시켜 리사이저를 움직이게 합니다\n                 */\n                const panelResizerEvent = {\n                    \"on\": (_resizer) => {\n\n                        jQuery(document.body)\n                            .on(\"mousemove.ax5docker-\" + this.instanceId, function (e) {\n                                let mouseObj = getMousePosition(e),\n                                    da_grow;\n\n                                if (self.xvar.resizerLived) {\n                                    if (self.xvar.resizerType == \"row\") {\n                                        self.xvar.__da = mouseObj.clientX - self.xvar.mousePosition.clientX;\n                                        da_grow = U.number(self.xvar.__da * 2 / self.xvar.resizerCanvasWidth, {round: 6});\n\n                                        self.xvar.resizer$dom.prev().css({\"flex-grow\": self.xvar.resizerPrevGrow + da_grow});\n                                        self.xvar.resizer$dom.next().css({\"flex-grow\": self.xvar.resizerNextGrow - da_grow});\n                                    } else {\n                                        self.xvar.__da = mouseObj.clientY - self.xvar.mousePosition.clientY;\n                                        da_grow = U.number(self.xvar.__da * 2 / self.xvar.resizerCanvasHeight, {round: 6});\n\n                                        self.xvar.resizer$dom.prev().css({\"flex-grow\": self.xvar.resizerPrevGrow + da_grow});\n                                        self.xvar.resizer$dom.next().css({\"flex-grow\": self.xvar.resizerNextGrow - da_grow});\n                                    }\n\n                                    fireEvent({\n                                        eventName: \"resize\",\n                                        target: self.xvar.resizer$dom\n                                    });\n                                } else {\n                                    self.xvar.resizerLived = true;\n                                }\n\n                                mouseObj = null;\n                                da_grow = null;\n                            })\n                            .on(\"mouseup.ax5docker-\" + this.instanceId, function (e) {\n                                panelResizerEvent.off();\n                                U.stopEvent(e);\n                            })\n                            .on(\"mouseleave.ax5docker-\" + this.instanceId, function (e) {\n                                panelResizerEvent.off();\n                                U.stopEvent(e);\n                            });\n\n                        jQuery(document.body)\n                            .attr('unselectable', 'on')\n                            .css('user-select', 'none')\n                            .on('selectstart', false);\n                    },\n                    \"off\": () => {\n                        self.xvar.resizerLived = false;\n\n                        if (typeof this.xvar.__da === \"undefined\") {\n\n                        }\n                        else {\n                            let $prevPanel = self.xvar.resizer$dom.prev(),\n                                $nextPanel = self.xvar.resizer$dom.next(),\n                                prevPane = getPanel($prevPanel.attr(\"data-ax5docker-path\")),\n                                nextPane = getPanel($nextPanel.attr(\"data-ax5docker-path\"));\n\n                            prevPane.flexGrow = U.number($prevPanel.css(\"flex-grow\"));\n                            nextPane.flexGrow = U.number($nextPanel.css(\"flex-grow\"));\n\n                            $prevPanel = null;\n                            $nextPanel = null;\n                            prevPane = null;\n                            nextPane = null;\n                        }\n\n                        alignStackPane();\n\n                        jQuery(document.body)\n                            .off(\"mousemove.ax5docker-\" + this.instanceId)\n                            .off(\"mouseup.ax5docker-\" + this.instanceId)\n                            .off(\"mouseleave.ax5docker-\" + this.instanceId);\n\n                        jQuery(document.body)\n                            .removeAttr('unselectable')\n                            .css('user-select', 'auto')\n                            .off('selectstart');\n                    }\n                };\n\n                /**\n                 * 액티브 패널 변경(stack인 상황에서)\n                 * @param pane\n                 * @param panelIndex\n                 * @returns {boolean}\n                 */\n                const changeActiveStackPanel = (pane, panelIndex) => {\n                    let panel = pane.panels[panelIndex];\n\n                    for (let p = 0, pl = pane.panels.length; p < pl; p++) {\n                        if (pane.panels[p].active) {\n                            controlPanel(pane.panels[p], \"deactive\");\n                        }\n                    }\n\n                    if (!panel.builded) controlPanel(panel, \"init\");\n                    controlPanel(panel, \"active\");\n\n                    pane = null;\n                    panelIndex = null;\n                    panel = null;\n                    return this;\n                };\n\n                /**\n                 * stackTab의 더보기 아이콘이 클릭되면~~~\n                 * @param stackPane\n                 * @param e\n                 * @returns {ax5docker}\n                 */\n                const openStackPanelMore = (stackPane, e) => {\n                    let $stackPane = jQuery(stackPane),\n                        panePath = $stackPane.attr(\"data-ax5docker-path\"),\n                        pane = getPanel(panePath);\n\n                    if (this.menu) {\n                        let menuItems = U.map(pane.panels, function (index) {\n                            return {\n                                label: this.name,\n                                index: index,\n                                panePath: panePath\n                            }\n                        });\n\n                        this.menu.setConfig({\n                            items: menuItems,\n                            onClick: function () {\n                                //console.log(pane);\n                                changeActiveStackPanel(getPanel(this.panePath), this.index);\n                            }\n                        });\n\n                        this.menu.popup(e);\n                    } else {\n                        console.log(pane.panels);\n                        throw \"'ax5ui-menu' is required to implement the function.\";\n                    }\n\n                    $stackPane = null;\n                    panePath = null;\n                    pane = null;\n                    return this;\n                };\n\n                /**\n                 * stackPane이 리사이즈 되면 탭을 스크롤여부를 판단해야 합니다.\n                 */\n                const alignStackPane = () => {\n                    debouncer.panelDebounceFn((function () {\n                        this.$target.find('[data-ax5docker-pane-tabs=\"' + this.instanceId + '\"]').each(function () {\n                            let $this = jQuery(this).parent();\n                            if (this.scrollWidth > this.clientWidth) {\n                                $this.addClass(\"tabs-scrolled\");\n                            } else {\n                                $this.removeClass(\"tabs-scrolled\");\n                            }\n                            $this = null;\n                        });\n                    }).bind(this));\n                };\n\n                const panelsDeactive = (panels) => {\n                    if (U.isArray(panels)) {\n                        panels.forEach(function (p) {\n                            //p.active = false;\n                            //p.$item.removeClass(\"active\");\n                            controlPanel(p, \"deactive\");\n                        });\n                    } else {\n                        //panels.active = false;\n                        //panels.$item.removeClass(\"active\");\n                        controlPanel(panels, \"deactive\");\n                    }\n                };\n\n                /**\n                 * 패널중에 null이 된 요소를 찾아 panels를 정리 합니다.\n                 * @returns {*}\n                 */\n                const arrangePanel = () => {\n                    const panels = [];\n                    const processor = {\n                        stack(myself){\n                            if (!U.isArray(myself.panels)) return false;\n\n                            let newObj = {\n                                type: \"stack\",\n                                panels: []\n                            };\n\n                            myself.panels.forEach(function (P, _pIndex) {\n                                if (P) {\n                                    let _p = processor[P.type](P);\n                                    if (_p) newObj.panels.push(_p);\n                                    _p = null;\n                                }\n                            });\n\n                            if (newObj.panels.length == 0) {\n                                return null;\n                            } else if (newObj.panels.length < 2) {\n                                newObj = newObj.panels[0];\n                            }\n\n                            return newObj;\n                        },\n                        panel(myself){\n                            //console.log(myself);\n                            return myself;\n                        },\n                        row(myself){\n\n                            if (!U.isArray(myself.panels)) return false;\n\n                            let newObj = {\n                                type: \"row\",\n                                panels: []\n                            };\n\n                            myself.panels.forEach(function (P, _pIndex) {\n                                if (P) {\n                                    let _p = processor[P.type](P);\n                                    if (_p) newObj.panels.push(_p);\n                                    _p = null;\n                                }\n                            });\n\n                            if (newObj.panels.length == 0) {\n                                return null;\n                            } else if (newObj.panels.length < 2) {\n                                newObj = newObj.panels[0];\n                            }\n\n                            return newObj;\n                        },\n                        column(myself){\n                            if (!U.isArray(myself.panels)) return false;\n\n                            let newObj = {\n                                type: \"column\",\n                                panels: []\n                            };\n\n                            myself.panels.forEach(function (P, _pIndex) {\n                                if (P) {\n                                    let _p = processor[P.type](P);\n                                    if (_p) newObj.panels.push(_p);\n                                    _p = null;\n                                }\n                            });\n\n                            if (newObj.panels.length == 0) {\n                                return null;\n                            } else if (newObj.panels.length < 2) {\n                                newObj = newObj.panels[0];\n                            }\n\n                            return newObj;\n                        },\n                    };\n\n                    if (this.panels[0]) {\n                        this.panels[0] = processor[this.panels[0].type](this.panels[0]);\n                    } else {\n                        this.panels = [];\n                    }\n\n                    repaintPanels();\n                };\n\n                /**\n                 * @method ax5docker.setConfig\n                 * @param {Object} config\n                 * @param {Element} config.target\n                 * @param {Object[]} config.panels\n                 * @param {String} config.panels[].type - panel, stack, row, column\n                 * @param {String} config.panels[].name\n                 * @param {String} [config.panels[].color]\n                 * @param {String} [config.panels[].borderColor]\n                 * @param {String} config.panels[].moduleName\n                 * @param {Object} config.panels[].moduleState\n                 * @param {Object[]} config.panels[].panels\n                 * @param {Object} [config.icons]\n                 * @param {String} [config.icons.close]\n                 * @param {String} [config.icons.more]\n                 * @param {Boolean} [config.disableClosePanel=false]\n                 * @param {Boolean} [config.disableDragPanel=false]\n                 * @param {Object} [config.control]\n                 * @param {Function} [config.control.before]\n                 * @param {Function} [config.control.after]\n                 * @param {Object} [config.menu]\n                 * @param {String} [config.menu.theme=\"default\"]\n                 * @param {String} [config.menu.position=\"absolute\"]\n                 * @param {Object} [config.menu.icons]\n                 * @param {String} [config.menu.icons.arrow]\n                 * @param {Number} [config.resizeDebounceTime=100]\n                 * @param {Number} [config.panelDebounceTime=300]\n                 * @example\n                 * ```js\n                 * var myDocker = new ax5.ui.docker();\n                 * myDocker.setConfig({\n                 *      target: $('[data-ax5docker=\"docker1\"]'),\n                 *      panels: [\n                 *          {\n                 *              type: \"panel\",\n                 *              name: \"panel name\",\n                 *              color: \"#ff3300\",\n                 *              borderColor: \"#000000\",\n                 *              moduleName: \"content\",\n                 *              moduleState:{\n                 *                  data: \"data1\"\n                 *              }\n                 *          }\n                 *      ]\n                 * });\n                 * ```\n                 */\n                this.init = function (_config) {\n                    cfg = jQuery.extend(true, {}, cfg, _config);\n                    if (!cfg.target) {\n                        console.log(ax5.info.getError(\"ax5docker\", \"401\", \"init\"));\n                        return this;\n                    }\n\n                    // 이벤트 정의 영역\n                    this.onResize = cfg.onResize;\n\n                    // memory target\n                    this.$target = jQuery(cfg.target);\n                    // set panels\n                    this.panels = cfg.panels || [];\n                    // event Functions\n                    this.onStateChanged = cfg.onStateChanged;\n                    this.onClick = cfg.onClick;\n                    this.onLoad = cfg.onLoad;\n                    this.onDataChanged = cfg.onDataChanged;\n\n                    if (ax5.ui.menu) {\n                        this.menu = new ax5.ui.menu({\n                            theme: 'default',\n                            position: \"absolute\",\n                            icons: {\n                                'arrow': '▸'\n                            }\n                        });\n                    }\n\n                    jQuery(window).bind(\"resize.ax5docker-\" + this.id, function () {\n                        // stackPane tabs 스크롤처리\n                        alignStackPane();\n                    });\n                };\n\n                /**\n                 * @method ax5docker.setPanels\n                 * @returns {ax5docker}\n                 */\n                this.setPanels = function (_panels) {\n                    // set panels\n                    this.panels = _panels || [];\n\n                    // 패널 다시 그리기\n                    repaintPanels();\n                    return this;\n                };\n\n                /**\n                 * @method ax5docker.addModule\n                 * @param modules\n                 * @returns {ax5docker}\n                 */\n                this.addModule = function (modules) {\n                    if (U.isObject(modules)) {\n                        jQuery.extend(true, this.modules, modules);\n                    }\n                    return this;\n                };\n\n                /**\n                 * repaint panels of docker\n                 * @method ax5docker.repaint\n                 * @returns {ax5docker}\n                 */\n                this.repaint = function () {\n                    // 패널 다시 그리기\n                    repaintPanels();\n                    return this;\n                };\n\n                /**\n                 * @method ax5docker.addPanel\n                 * @param {String} _addPath - Position path to add panel\n                 * @param _addType\n                 * @param _panel\n                 * @param _panelIndex\n                 * @returns {ax5docker}\n                 * @example\n                 * ```js\n                 * myDocker.addPanel('0.1', 'stack', {type:'panel', name:'addPanel', moduleName: 'content'});\n                 *\n                 * ```\n                 */\n                this.addPanel = function (_addPath, _addType, _panel, _panelIndex) {\n                    let addPath = \"\";\n                    let pane;\n                    let parent;\n\n                    if (this.panels.length === 0 || !this.panels[0]) {\n                        return this.setPanels([{type: \"stack\", panels: [_panel]}]);\n                    } else {\n                        if (_addPath == \"undefined\") {\n                            addPath = \"0\";\n                        } else {\n                            addPath = _addPath\n                                .replace(/[a-zA-Z\\[\\]]+/g, \"\")\n                                .replace(/(\\d+)/g, function (a, b) {\n                                    return \"panels[\" + a + \"]\";\n                                });\n                        }\n                        pane = getPanel(addPath);\n                        parent = getPanelParent(pane);\n                    }\n\n                    if (parent && parent.type == \"stack\") {\n                        // 부모패널로 ~\n                        //console.log(addPath, _addPath);\n                        pane = parent;\n                        addPath = pane.panelPath;\n                    }\n                    let panelProcessor = {\n                        \"stack\"(_pane, _addType, _panel, _panelIndex){\n                            let copyPanel = jQuery.extend({}, _pane),\n                                addProcessor = {\n                                    \"stack\"(_pane, _panel){\n                                        if (_panel.active) {\n                                            panelsDeactive(_pane.panels);\n                                        }\n                                        _pane.panels.push(_panel);\n                                        arrangePanel();\n                                    },\n                                    \"stack-left\"(_pane, _panel){\n                                        if (_panel.active) {\n                                            panelsDeactive(_pane.panels);\n                                        }\n                                        _pane.panels.splice(_panelIndex, 0, _panel);\n                                        arrangePanel();\n                                    },\n                                    \"stack-right\"(_pane, _panel){\n                                        if (_panel.active) {\n                                            panelsDeactive(_pane.panels);\n                                        }\n                                        _pane.panels.splice(Number(_panelIndex) + 1, 0, _panel);\n                                        arrangePanel();\n                                    },\n                                    \"row-left\"(_pane, _panel){\n                                        let parentPath = addPath.substr(0, addPath.lastIndexOf(\".\"));\n                                        let parentPane = getPanel(parentPath);\n                                        if (parentPane && parentPane.type == \"row\") {\n                                            this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                        } else {\n                                            _pane = setPanel(addPath, {\n                                                type: \"row\",\n                                                panels: []\n                                            });\n                                            _pane.panels.push(_panel);\n                                            _pane.panels.push(copyPanel);\n                                            arrangePanel();\n                                        }\n                                    },\n                                    \"row-right\"(_pane, _panel){\n                                        let parentPath = addPath.substr(0, addPath.lastIndexOf(\".\"));\n                                        let parentPane = getPanel(parentPath);\n                                        if (parentPane && parentPane.type == \"row\") {\n                                            this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                        } else {\n                                            _pane = setPanel(addPath, {\n                                                type: \"row\",\n                                                panels: []\n                                            });\n                                            _pane.panels.push(copyPanel);\n                                            _pane.panels.push(_panel);\n                                            arrangePanel();\n                                        }\n                                    },\n                                    \"column-top\"(_pane, _panel){\n                                        let parentPath = addPath.substr(0, addPath.lastIndexOf(\".\"));\n                                        let parentPane = getPanel(parentPath);\n                                        if (parentPane && parentPane.type == \"column\") {\n                                            this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                        } else {\n                                            _pane = setPanel(addPath, {\n                                                type: \"column\",\n                                                panels: []\n                                            });\n                                            _pane.panels.push(_panel);\n                                            _pane.panels.push(copyPanel);\n                                            arrangePanel();\n                                        }\n                                    },\n                                    \"column-bottom\"(_pane, _panel){\n                                        let parentPath = addPath.substr(0, addPath.lastIndexOf(\".\"));\n                                        let parentPane = getPanel(parentPath);\n                                        if (parentPane && parentPane.type == \"column\") {\n                                            this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                        } else {\n                                            _pane = setPanel(addPath, {\n                                                type: \"column\",\n                                                panels: []\n                                            });\n                                            _pane.panels.push(copyPanel);\n                                            _pane.panels.push(_panel);\n                                            arrangePanel();\n                                        }\n                                    }\n                                };\n                            if (_addType in addProcessor) {\n                                addProcessor[_addType].call(this, _pane, _panel);\n                            }\n\n                            copyPanel = null;\n                            addProcessor = null;\n                        },\n                        \"row\"(_pane, _addType, _panel, _panelIndex){\n                            let copyPanel = jQuery.extend({}, _pane),\n                                addProcessor = {\n                                    \"stack\"(_pane, _panel){\n                                        // 처리 할 수 없는 상황 첫번째 자식을 찾아 재 요청\n                                        if (_pane.panels[0] && _pane.panels[0].panelPath) {\n                                            this.addPanel(_pane.panels[0].panelPath, _addType, _panel);\n                                        }\n                                    },\n                                    \"row-left\"(_pane, _panel, _panelIndex){\n                                        _pane.panels.splice(_panelIndex, 0, _panel);\n                                        arrangePanel();\n                                    },\n                                    \"row-right\"(_pane, _panel, _panelIndex){\n                                        _pane.panels.splice(_panelIndex + 1, 0, _panel);\n                                        arrangePanel();\n                                    },\n                                    \"column-top\"(_pane, _panel, _panelIndex){\n                                        let parentPath = addPath.substr(0, addPath.lastIndexOf(\".\"));\n                                        let parentPane = getPanel(parentPath);\n                                        if (parentPane && parentPane.type == \"column\") {\n                                            this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                        } else {\n                                            _pane = setPanel(addPath, {\n                                                type: \"column\",\n                                                panels: []\n                                            });\n                                            _pane.panels.push(_panel);\n                                            _pane.panels.push(copyPanel);\n                                            arrangePanel();\n                                        }\n                                    },\n                                    \"column-bottom\"(_pane, _panel, _panelIndex){\n                                        let parentPath = addPath.substr(0, addPath.lastIndexOf(\".\"));\n                                        let parentPane = getPanel(parentPath);\n                                        if (parentPane && parentPane.type == \"column\") {\n                                            this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                        } else {\n                                            _pane = setPanel(addPath, {\n                                                type: \"column\",\n                                                panels: []\n                                            });\n                                            _pane.panels.push(copyPanel);\n                                            _pane.panels.push(_panel);\n                                            arrangePanel();\n                                        }\n                                    }\n                                };\n                            if (_addType in addProcessor) {\n                                addProcessor[_addType].call(this, _pane, _panel, _panelIndex);\n                            }\n\n                            addProcessor = null;\n                            copyPanel = null;\n                        },\n                        \"column\"(_pane, _addType, _panel, _panelIndex){\n                            let copyPanel = jQuery.extend({}, _pane),\n                                addProcessor = {\n                                    \"stack\"(_pane, _panel){\n                                        if (_pane.panels[0] && _pane.panels[0].panelPath) {\n                                            this.addPanel(_pane.panels[0].panelPath, _addType, _panel);\n                                        }\n                                    },\n                                    \"row-left\"(_pane, _panel){\n                                        let parentPath = addPath.substr(0, addPath.lastIndexOf(\".\"));\n                                        let parentPane = getPanel(parentPath);\n                                        if (parentPane && parentPane.type == \"row\") {\n                                            this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                        } else {\n                                            _pane = setPanel(addPath, {\n                                                type: \"row\",\n                                                panels: []\n                                            });\n                                            _pane.panels.push(_panel);\n                                            _pane.panels.push(copyPanel);\n                                            arrangePanel();\n                                        }\n                                    },\n                                    \"row-right\"(_pane, _panel){\n                                        let parentPath = addPath.substr(0, addPath.lastIndexOf(\".\"));\n                                        let parentPane = getPanel(parentPath);\n                                        if (parentPane && parentPane.type == \"row\") {\n                                            this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                        } else {\n                                            _pane = setPanel(addPath, {\n                                                type: \"row\",\n                                                panels: []\n                                            });\n                                            _pane.panels.push(copyPanel);\n                                            _pane.panels.push(_panel);\n                                            arrangePanel();\n                                        }\n                                    },\n                                    \"column-top\"(_pane, _panel){\n                                        _pane.panels.splice(_panelIndex, 0, _panel);\n                                        arrangePanel();\n                                    },\n                                    \"column-bottom\"(_pane, _panel){\n                                        _pane.panels.splice(_panelIndex + 1, 0, _panel);\n                                        arrangePanel();\n                                    }\n                                };\n                            if (_addType in addProcessor) {\n                                addProcessor[_addType].call(this, _pane, _panel);\n                            }\n\n                            addProcessor = null;\n                            copyPanel = null;\n                        },\n                        \"panel\"(_pane, _addType, _panel){\n                            let copyPanel = jQuery.extend({}, _pane),\n                                addProcessor = {\n                                    \"stack\"(_pane, _panel){\n                                        // _pane stack으로 재구성\n                                        _pane = setPanel(addPath, {\n                                            type: \"stack\",\n                                            panels: []\n                                        });\n\n                                        if (_panel.active) {\n                                            panelsDeactive(copyPanel);\n                                        }\n\n                                        _pane.panels.push(copyPanel);\n                                        _pane.panels.push(_panel);\n                                        arrangePanel();\n                                    },\n                                    \"stack-left\"(_pane, _panel){\n                                        // _pane stack으로 재구성\n                                        _pane = setPanel(addPath, {\n                                            type: \"stack\",\n                                            panels: []\n                                        });\n\n                                        if (_panel.active) {\n                                            panelsDeactive(copyPanel);\n                                        }\n                                        _pane.panels.push(_panel);\n                                        _pane.panels.push(copyPanel);\n                                        arrangePanel();\n                                    },\n                                    \"stack-right\"(_pane, _panel){\n                                        // _pane stack으로 재구성\n                                        _pane = setPanel(addPath, {\n                                            type: \"stack\",\n                                            panels: []\n                                        });\n\n                                        if (_panel.active) {\n                                            panelsDeactive(copyPanel);\n                                        }\n                                        _pane.panels.push(copyPanel);\n                                        _pane.panels.push(_panel);\n                                        arrangePanel();\n                                    },\n                                    \"row-left\"(_pane, _panel){\n                                        let parentPath = addPath.substr(0, addPath.lastIndexOf(\".\"));\n                                        let parentPane = getPanel(parentPath);\n                                        if (parentPane && parentPane.type == \"row\" || parentPane.type == \"column\") {\n                                            this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                        } else {\n                                            _pane = setPanel(addPath, {\n                                                type: \"row\",\n                                                panels: []\n                                            });\n                                            _pane.panels.push(_panel);\n                                            _pane.panels.push(copyPanel);\n                                            arrangePanel();\n                                        }\n                                    },\n                                    \"row-right\"(_pane, _panel){\n                                        let parentPath = addPath.substr(0, addPath.lastIndexOf(\".\"));\n                                        let parentPane = getPanel(parentPath);\n                                        if (parentPane && parentPane.type == \"row\" || parentPane.type == \"column\") {\n                                            this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                        } else {\n                                            _pane = setPanel(addPath, {\n                                                type: \"row\",\n                                                panels: []\n                                            });\n                                            _pane.panels.push(copyPanel);\n                                            _pane.panels.push(_panel);\n                                            arrangePanel();\n                                        }\n                                    },\n                                    \"column-top\"(_pane, _panel){\n                                        let parentPath = addPath.substr(0, addPath.lastIndexOf(\".\"));\n                                        let parentPane = getPanel(parentPath);\n                                        if (parentPane && parentPane.type == \"column\" || parentPane.type == \"row\") {\n                                            this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                        } else {\n                                            _pane = setPanel(addPath, {\n                                                type: \"column\",\n                                                panels: []\n                                            });\n                                            _pane.panels.push(_panel);\n                                            _pane.panels.push(copyPanel);\n                                            arrangePanel();\n                                        }\n                                    },\n                                    \"column-bottom\"(_pane, _panel){\n                                        let parentPath = addPath.substr(0, addPath.lastIndexOf(\".\"));\n                                        let parentPane = getPanel(parentPath);\n\n                                        if (parentPane && parentPane.type == \"column\" || parentPane.type == \"row\") {\n                                            this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                        } else {\n                                            _pane = setPanel(addPath, {\n                                                type: \"column\",\n                                                panels: []\n                                            });\n                                            _pane.panels.push(copyPanel);\n                                            _pane.panels.push(_panel);\n                                            arrangePanel();\n                                        }\n                                    }\n                                };\n\n                            if (_addType in addProcessor) {\n                                addProcessor[_addType].call(this, _pane, _panel);\n                            }\n\n                            copyPanel = null;\n                            addProcessor = null;\n                        }\n                    };\n\n                    if ((pane) ? pane.type : \"stack\" in panelProcessor) {\n                        panelProcessor[(pane) ? pane.type : \"stack\"].call(this, pane, _addType, _panel, _panelIndex);\n                    }\n\n                    return this;\n                };\n\n                /**\n                 * 패널 삭제하기\n                 * @method ax5docker.removePanel\n                 * @param clickedLabel\n                 * @returns {ax5docker}\n                 */\n                this.removePanel = function (panelPath) {\n                    let panel = getPanel(panelPath);\n\n                    controlPanel(panel, \"destroy\");\n\n                    panel = null;\n                    return this;\n                };\n\n                /**\n                 * @method ax5docker.appendPanel\n                 * @param _panel\n                 * @param _appendPath\n                 * @param _appendType\n                 * @returns {ax5docker}\n                 */\n                this.appendPanel = function (_panel, _appendPath, _appendType) {\n\n                    let copiedPanel = $.extend({}, _panel, {panelPath: \"\"}),\n                        addType;\n\n                    let removePanelPath = _panel.panelPath;\n                    let appendPanelIndex = U.right(_appendPath, \".\").replace(/\\D/g, \"\");\n\n                    if (_appendType.length == 0) {\n                        return this;\n                    }\n\n                    if (_panel.panelPath === _appendPath) {\n                        let parentPath = _appendPath.substr(0, _appendPath.lastIndexOf(\".\"));\n                        let parentPane = getPanel(parentPath);\n                        if (parentPane.type != \"stack\") {\n                            return this;\n                        }\n                    }\n\n                    if (_appendType.length == 1) { // stack\n                        addType = (_appendType[0] == \"last-child\") ? \"stack\" : \"stack-\" + _appendType[0];\n                        copiedPanel.active = false;\n                        copiedPanel.$item.removeClass(\"active\");\n                        controlPanel(copiedPanel, \"deactive\");\n\n                    } else {\n                        switch (_appendType[0] + \"-\" + _appendType[1]) {\n                            case \"left-top\":\n                                addType = \"row-left\";\n                                break;\n                            case \"left-middle\":\n                                addType = \"row-left\";\n                                break;\n                            case \"left-bottom\":\n                                addType = \"row-left\";\n                                break;\n                            case \"center-top\":\n                                addType = \"column-top\";\n                                break;\n                            case \"center-middle\":\n                                addType = \"stack\";\n                                copiedPanel.active = false;\n                                copiedPanel.$item.removeClass(\"active\");\n                                appendPanelIndex = undefined;\n                                controlPanel(copiedPanel, \"deactive\");\n                                break;\n                            case \"center-bottom\":\n                                addType = \"column-bottom\";\n                                break;\n                            case \"right-top\":\n                                addType = \"row-right\";\n                                break;\n                            case \"right-middle\":\n                                addType = \"row-right\";\n                                break;\n                            case \"right-bottom\":\n                                addType = \"row-right\";\n                                break;\n                        }\n                    }\n\n                    if (_panel.panelPath === _appendPath) {\n                        // 부모레벨로 이동\n                        _appendPath = U.left(_appendPath, \".\");\n                    }\n                    // todo : deactive call\n\n                    setPanel(removePanelPath, null);\n                    this.addPanel(_appendPath, addType, copiedPanel, appendPanelIndex);\n\n                    copiedPanel = null;\n                    return this;\n                };\n\n                /**\n                 * @method ax5docker.align\n                 * @returns {ax5docker}\n                 */\n                this.align = function () {\n                    alignStackPane();\n                    return this;\n                };\n\n                // 클래스 생성자\n                this.main = (function () {\n                    UI.docker_instance = UI.docker_instance || [];\n                    UI.docker_instance.push(this);\n\n                    if (arguments && U.isObject(arguments[0])) {\n                        this.setConfig(arguments[0]);\n                    }\n                }).apply(this, arguments);\n\n            };\n\n            return ax5docker;\n        })()\n    );\n\n    DOCKER = ax5.ui.docker;\n})();","// ax5.ui.docker.tmpl\n(function () {\n\n    let DOCKER = ax5.ui.docker;\n\n    let stack_panel = function (columnKeys, data) {\n        if(data.labelDirection === \"bottom\"){\n            return `<div data-ax5docker-pane=\"{{id}}\" data-ax5docker-label-direction=\"{{labelDirection}}\" data-ax5docker-path=\"{{panelPath}}\" style=\"flex-grow: {{#flexGrow}}{{.}}{{/flexGrow}}{{^flexGrow}}1{{/flexGrow}};\">\n    <div data-ax5docker-pane-item-views=\"{{id}}\"></div>\n    <ul data-ax5docker-pane-tabs=\"{{id}}\" data-ax5docker-id=\"{{id}}\" data-ax5docker-path=\"{{panelPath}}\"></ul>\n    <div data-ax5docker-pane-tabs-more=\"{{id}}\">{{{icons.more}}}</div>\n</div>`;\n        }else{\n            return `<div data-ax5docker-pane=\"{{id}}\" data-ax5docker-label-direction=\"{{labelDirection}}\" data-ax5docker-path=\"{{panelPath}}\" style=\"flex-grow: {{#flexGrow}}{{.}}{{/flexGrow}}{{^flexGrow}}1{{/flexGrow}};\">\n    <ul data-ax5docker-pane-tabs=\"{{id}}\" data-ax5docker-id=\"{{id}}\" data-ax5docker-path=\"{{panelPath}}\"></ul>\n    <div data-ax5docker-pane-tabs-more=\"{{id}}\">{{{icons.more}}}</div>\n    <div data-ax5docker-pane-item-views=\"{{id}}\"></div>\n</div>`;\n        }\n    };\n\n    let panel_label = function () {\n        return `<li data-ax5docker-pane-tab=\"{{pIndex}}\" data-ax5docker-id=\"{{id}}\" data-ax5docker-path=\"{{panelPath}}\">\n    <div class=\"label-icon\" style=\"{{#color}}background: {{color}};{{/color}}{{#borderColor}}border-color: {{borderColor}};{{/borderColor}}\"></div>\n    <div class=\"title\">{{{name}}}</div>\n    {{^disableClosePanel}}<div class=\"close-icon\">{{{icons.close}}}</div>{{/disableClosePanel}}\n</li><li class=\"pane-tab-margin\"></li>`;\n    };\n\n    DOCKER.tmpl = {\n        \"stack-panel\": stack_panel,\n        \"panel-label\": panel_label,\n\n        get: function (tmplName, data, columnKeys) {\n            return ax5.mustache.render(DOCKER.tmpl[tmplName].call(this, columnKeys, data), data);\n        }\n    };\n\n})();"]}