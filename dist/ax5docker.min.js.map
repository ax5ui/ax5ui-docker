{"version":3,"sources":["ax5docker.js","ax5docker-tmpl.js"],"names":["UI","ax5","ui","U","util","addClass","className","version","ax5docker","_this","this","self","cfg","instanceId","getGuid","config","theme","animateTime","columnKeys","control","icons","close","more","xvar","menu","panels","panelId","modules","getPanelId","defaultModule","init","container","state","html","name","active","deactive","destroy","getPanelPath","parent","pIndex","paths","panelPath","push","join","getPanel","_panelPath","path","_path","isArray","concat","split","forEach","n","replace","Function","call","e","getPanelParent","_panel","substr","lastIndexOf","console","log","setPanel","_value","getMousePosition","mouseObj","originalEvent","changedTouches","clientX","pageX","clientY","pageY","controlPanel","_control","moduleState","jQuery","extend","moduleContainer","$element","$item","module","processor","builded","moduleName","$label","$pane","get","clientWidth","scrollWidth","animate","scrollLeft","position","left","removeClass","arrangePanel","that","panel","controlType","runProcessor","isFunction","after","before","repaintPanels","appendProcessor","stack","$parent","myself","$dom","activeIndex","flexGrow","append","P","_pIndex","panelIndex","type","find","resizeHandle","row","column","$root","$target","off","on","closePanel","$","parents","stopEvent","$clickedLabel","pane","attr","hasClass","changeActiveStackPanel","openStackPanelMore","panelTabDragEvent","datas","getAttribute","mousePosition","resizerType","resizerPath","resizerIndex","resizer$dom","resizerParent$dom","resizerPrevGrow","number","prev","css","resizerNextGrow","next","resizerCanvasWidth","innerWidth","width","resizerCanvasHeight","innerHeight","height","panelResizerEvent","alignStackPane","p","pl","length","clickedLabel","stackPane","$stackPane","panePath","menuItems","map","index","label","setConfig","items","onClick","popup","_resizer","$resizer","offset","document","body","da_grow","resizerLived","__da","round","flex-grow","$prevPanel","$nextPanel","prevPane","nextPane","removeAttr","dragger","target","dragOverVertical","dragOverHorizontal","dragover","dragoverDom","$dragoverDom","box","mouse","halfWidth","draggerProcessor","right","threeQuarterHeight","threeQuarterWidth","top","left-top","right-top","center-top","left-middle","right-middle","center-middle","left-bottom","right-bottom","center-bottom","isDrop","debounceFn","debounce","fn","each","$this","bind","newObj","_p","_config","onStateChanged","onLoad","onDataChanged","arrow","window","id","info","getError","setPanels","_panels","addModule","isObject","repaint","addPanel","_addPath","_addType","_panelIndex","addPath","a","b","panelProcessor","_pane","copyPanel","addProcessor","row-left","parentPath","parentPane","row-right","column-top","column-bottom","splice","movePanel","_movePath","_moveType","main","arguments","apply","DOCKER","docker","tmpl","tmplName","data","mustache","render"],"mappings":"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","file":"ax5docker.min.js","sourcesContent":["/*\n * Copyright (c) 2017. tom@axisj.com\n * - github.com/thomasjang\n * - www.axisj.com\n */\n\n(function () {\n\n    const UI = ax5.ui,\n        U = ax5.util;\n\n    UI.addClass({\n        className: \"docker\",\n        version: \"${VERSION}\"\n    }, (function () {\n\n        /**\n         * @class ax5docker\n         * @classdesc\n         * @author tom@axisj.com\n         * @example\n         * ```\n         * var ax5docker = new ax5.ui.ax5docker();\n         * ```\n         */\n        let ax5docker = function () {\n            let self = this,\n                cfg;\n\n            this.instanceId = ax5.getGuid();\n            this.config = {\n                theme: 'default',\n                animateTime: 250,\n                columnKeys: {},\n                control: {},\n                icons: {\n                    close: 'X',\n                    more: '...'\n                }\n            };\n            this.xvar = {};\n            this.menu = null;\n\n            // 패널 정보\n            this.panels = [];\n            this.panelId = 0;\n\n            // 패널의 컨텐츠 모듈\n            this.modules = {};\n\n            cfg = this.config;\n\n            const getPanelId = () => {\n                return this.panelId++;\n            };\n\n            /**\n             * defaultModule은 패널의 모듈이 정의되지 않은 경우를 위해 준비된 오브젝트\n             * @type {{init: ((container, state)), active: ((container, state)), deactive: ((container, state)), destroy: ((container, state))}}\n             */\n            const defaultModule = {\n                init(container, state){\n                    container[\"$element\"].html(state.name);\n                },\n                active(container, state){\n\n                },\n                deactive(container, state){\n\n                },\n                destroy(container, state){\n\n                }\n            };\n\n            /**\n             * 부모패널과 패널인덱스 값으로 패널 패스를 구합니다.\n             * @param parent\n             * @param pIndex\n             * @returns {string}\n             */\n            const getPanelPath = (parent, pIndex) => {\n                let paths = [];\n                if (parent && typeof parent.panelPath !== \"undefined\") {\n                    paths.push(parent.panelPath);\n                }\n\n                paths.push('panels[' + (pIndex || 0) + ']');\n                return paths.join(\".\");\n            };\n\n            /**\n             * 패널패스를 이용하여 패널을 가져옵니다\n             * @param _panelPath\n             * @returns {*}\n             */\n            const getPanel = (_panelPath) => {\n                let path = [],\n                    _path = (U.isArray(_panelPath)) ? [].concat(_panelPath) : [].concat(_panelPath.split(/[\\.\\[\\]]/g));\n\n                _path.forEach(function (n) {\n                    if (n !== \"\") path.push(\"[\\\"\" + n.replace(/['\\\"]/g, \"\") + \"\\\"]\");\n                });\n\n                try {\n                    return (Function(\"\", \"return this\" + path.join('') + \";\")).call(this);\n                } catch (e) {\n                    return;\n                }\n            };\n\n            /**\n             * 패널을 이용하여 패널의 부모 패널을 가져옵니다\n             * @param _panel\n             */\n            const getPanelParent = (_panel) => {\n                let _path = _panel.panelPath.substr(0, _panel.panelPath.lastIndexOf(\".\"));\n                try {\n                    return (Function(\"\", \"return this.\" + _path + \";\")).call(this);\n                } catch (e) {\n                    console.log(e);\n                    return;\n                }\n            };\n\n            /**\n             * 패널패스를 이용하여 패널오브젝트에 값을 부여합니다.\n             * @param _panelPath\n             * @param _value\n             * @returns {*}\n             */\n            const setPanel = (_panelPath, _value) => {\n                let path = [],\n                    _path = (U.isArray(_panelPath)) ? [].concat(_panelPath) : [].concat(_panelPath.split(/[\\.\\[\\]]/g));\n\n                _path.forEach(function (n) {\n                    if (n !== \"\") path.push(\"[\\\"\" + n.replace(/['\\\"]/g, \"\") + \"\\\"]\");\n                });\n\n                return (Function(\"val\", \"return this\" + path.join('') + \" = val;\")).call(this, _value);\n            };\n\n            /**\n             * get mouse position\n             * @param e\n             * @returns {{clientX, clientY}}\n             */\n            const getMousePosition = (e) => {\n                let mouseObj, originalEvent = (e.originalEvent) ? e.originalEvent : e;\n                mouseObj = ('changedTouches' in originalEvent) ? originalEvent.changedTouches[0] : originalEvent;\n                // clientX, Y 쓰면 스크롤에서 문제 발생\n                return {\n                    clientX: mouseObj.pageX,\n                    clientY: mouseObj.pageY\n                }\n            };\n\n            /**\n             * 패널의 모듈이 초기화, 활성화, 비활성, 제거 되는 일들을 제어하는 함수.\n             * 모든 컨트롤은 실행되기전에 사용자가 정의한 control.before 함수의 결과에 따라 실행 여부를 결정합니다. 사용자가 control.before를 정의하지 않으면 무조건 실행합니다.\n             * @param {Object} _panel\n             * @param {String} _control - \"init\",\"active\",\"deactive\",\"destroy\"\n             */\n            const controlPanel = (_panel, _control) => {\n                let moduleState = jQuery.extend(_panel.moduleState, {\n                        name: _panel.name\n                    }),\n                    moduleContainer = {\n                        '$element': _panel.$item\n                    },\n                    module;\n\n                let processor = {\n                    init: () => {\n                        _panel.builded = true;\n                        module = (_panel.moduleName in this.modules && 'init' in this.modules[_panel.moduleName]) ? this.modules[_panel.moduleName] : defaultModule;\n                        module.init(moduleContainer, moduleState);\n                    },\n                    active: () => {\n                        _panel.active = true;\n                        _panel.$label.addClass(\"active\");\n                        _panel.$item.addClass(\"active\");\n\n                        let $pane = _panel.$label.parent();\n                        if ($pane.get(0) && $pane.get(0).clientWidth !== $pane.get(0).scrollWidth) {\n                            $pane.animate({scrollLeft: _panel.$label.position().left}, 300);\n                        }\n\n                        module = (_panel.moduleName in this.modules && 'active' in this.modules[_panel.moduleName]) ? this.modules[_panel.moduleName] : defaultModule;\n                        module.active(moduleContainer, moduleState);\n                        $pane = null;\n                    },\n                    deactive: () => {\n                        _panel.active = false;\n                        _panel.$label.removeClass(\"active\");\n                        _panel.$item.removeClass(\"active\");\n                        module = (_panel.moduleName in this.modules && 'deactive' in this.modules[_panel.moduleName]) ? this.modules[_panel.moduleName] : defaultModule;\n                        module.deactive(moduleContainer, moduleState);\n                    },\n                    destroy: () => {\n                        module = (_panel.moduleName in this.modules && 'destroy' in this.modules[_panel.moduleName]) ? this.modules[_panel.moduleName] : defaultModule;\n                        module.destroy(moduleContainer, moduleState);\n\n                        // 패널 데이터 제거.\n                        setPanel(_panel.panelPath, null);\n                        // 현재 패널 정보를 검사하여 패널 정보를 재 구성합니다.\n                        arrangePanel();\n                    }\n                };\n\n                // 사용자정의 함수 control.before, control.after에 전달할 인자 = that\n                let that = {\n                    panel: _panel,\n                    controlType: _control\n                };\n\n                // 비동기 처리 상황에 대응하기 위해 runProcessor를 별도 처리\n                let runProcessor = () => {\n                    processor[_control]();\n                    module = null;\n\n                    if (U.isFunction(cfg.control.after)) {\n                        cfg.control.after.call(that, that);\n                    }\n                };\n\n                if (processor[_control]) {\n                    if (U.isFunction(cfg.control.before)) {\n                        cfg.control.before.call(that, that, function () {\n                            runProcessor();\n                        });\n                    }\n                    else {\n                        runProcessor();\n                    }\n                }\n            };\n\n            /**\n             * 패널들의 패널 데이터 구조에 맞게 다시 그리기\n             */\n            const repaintPanels = () => {\n                const appendProcessor = {\n                    stack($parent, parent, myself, pIndex){\n\n                        let $dom, activeIndex = -1;\n                        myself.panelPath = getPanelPath(parent, pIndex);\n\n                        $dom = jQuery('<div data-ax5docker-pane=\"\" data-ax5docker-path=\"' + myself.panelPath + '\" style=\"flex-grow: ' + (myself.flexGrow || 1) + ';\">' +\n                            '<ul data-ax5docker-pane-tabs=\"\"></ul>' +\n                            '<div data-ax5docker-pane-tabs-more=\"\">' + cfg.icons.more + '</div>' +\n                            '<div data-ax5docker-pane-item-views=\"\"></div>' +\n                            '</div>');\n                        $parent.append($dom);\n\n                        if (U.isArray(myself.panels)) {\n                            myself.panels.forEach(function (P, pIndex) {\n                                if (P.active) activeIndex = pIndex;\n                            });\n                            if (activeIndex === -1) activeIndex = 0;\n                            myself.panels[activeIndex].active = true;\n\n                            myself.panels.forEach(function (P, _pIndex) {\n                                P.panelIndex = _pIndex;\n                                appendProcessor[P.type]($dom, myself, P, _pIndex);\n                            });\n                        }\n\n                        $dom = null;\n                        activeIndex = null;\n                    },\n                    panel($parent, parent, myself, pIndex){\n                        let $dom;\n                        myself.panelPath = getPanelPath(parent, pIndex);\n                        myself.$label = jQuery('<li data-ax5docker-pane-tab=\"' + pIndex + '\" data-ax5docker-path=\"' + myself.panelPath + '\">' +\n                            '<div class=\"title\">' + myself.name + '</div>' +\n                            '<div class=\"close-icon\">' + cfg.icons.close + '</div>' +\n                            '</li>');\n\n                        if (!myself.$item) {\n                            myself.$item = jQuery('<div data-ax5docker-pane-item=\"' + pIndex + '\" data-ax5docker-pane-id=\"' + getPanelId() + '\" data-ax5docker-path=\"' + myself.panelPath + '\"></div>');\n                        }\n\n                        if (parent && parent.type == \"stack\") {\n                            if (myself.active) {\n                                if (!myself.builded) controlPanel(myself, \"init\");\n                                controlPanel(myself, \"active\");\n                            }\n                            $parent.find('[data-ax5docker-pane-tabs]').append(myself.$label);\n                            $parent.find('[data-ax5docker-pane-item-views]').append(myself.$item);\n                        } else {\n                            $dom = jQuery('<div data-ax5docker-pane=\"\" data-ax5docker-path=\"' + myself.panelPath + '\" style=\"flex-grow: ' + (myself.flexGrow || 1) + ';\">' +\n                                '<ul data-ax5docker-pane-tabs=\"\"></ul>' +\n                                '<div data-ax5docker-pane-tabs-more=\"\">' + cfg.icons.more + '</div>' +\n                                '<div data-ax5docker-pane-item-views=\"\"></div>' +\n                                '</div>');\n\n                            if (!myself.builded) controlPanel(myself, \"init\");\n                            controlPanel(myself, \"active\");\n\n                            $dom.find('[data-ax5docker-pane-tabs]').append(myself.$label);\n                            $dom.find('[data-ax5docker-pane-item-views]').append(myself.$item);\n\n                            $parent.append($dom);\n                        }\n\n                        $dom = null;\n                    },\n                    resizeHandle($parent, parent, myself, pIndex){\n                        let $dom = jQuery('<div data-ax5docker-resize-handle=\"' + parent.type + \"/\" + parent.panelPath + \"/\" + pIndex + '\"></div>');\n                        $parent.append($dom);\n                        $dom = null;\n                    },\n                    row($parent, parent, myself, pIndex){\n                        let $dom;\n                        myself.panelPath = getPanelPath(parent, pIndex);\n                        if (parent && parent.type == \"stack\") {\n                            throw \"The 'stack' type child nodes are allowed only for the 'panel' type.\";\n                        }\n                        $dom = jQuery('<div data-ax5docker-pane-axis=\"row\" data-ax5docker-path=\"' + myself.panelPath + '\" style=\"flex-grow: ' + (myself.flexGrow || 1) + ';\"></div>');\n                        $parent.append($dom);\n\n                        if (U.isArray(myself.panels)) {\n                            myself.panels.forEach(function (P, _pIndex) {\n                                if (_pIndex > 0) appendProcessor[\"resizeHandle\"]($dom, myself, P, _pIndex);\n                                P.panelIndex = _pIndex;\n                                appendProcessor[P.type]($dom, myself, P, _pIndex);\n                            });\n                        }\n\n                        $dom = null;\n                    },\n                    column($parent, parent, myself, pIndex){\n                        let $dom;\n                        myself.panelPath = getPanelPath(parent, pIndex);\n                        if (parent && parent.type == \"stack\") {\n                            throw \"The 'stack' type child nodes are allowed only for the 'panel' type.\";\n                        }\n                        $dom = jQuery('<div data-ax5docker-pane-axis=\"column\" data-ax5docker-path=\"' + myself.panelPath + '\" style=\"flex-grow: ' + (myself.flexGrow || 1) + ';\"></div>');\n                        $parent.append($dom);\n\n                        if (U.isArray(myself.panels)) {\n                            myself.panels.forEach(function (P, _pIndex) {\n                                if (_pIndex > 0) appendProcessor[\"resizeHandle\"]($dom, myself, P, _pIndex);\n                                P.panelIndex = _pIndex;\n                                appendProcessor[P.type]($dom, myself, P, _pIndex);\n                            });\n                        }\n\n                        $dom = null;\n                    }\n                };\n\n                let $root = jQuery('<div data-ax5docker-panes=\"\"></div>');\n                if (this.panels[0]) appendProcessor[this.panels[0].type]($root, null, this.panels[0], 0);\n                this.$target.html($root);\n\n                this.$target\n                    .off(\"click.ax5docker-pane\")\n                    .on(\"click.ax5docker-pane\", \"[data-ax5docker-pane-tab] .close-icon\", function (e) {\n                        closePanel($(this).parents('[data-ax5docker-pane-tab]'));\n                        U.stopEvent(e);\n                    })\n                    .on(\"click.ax5docker-pane\", \"[data-ax5docker-pane-tab]\", function (e) {\n                        // pane, panelIndex 인자 변경.\n                        let $clickedLabel = jQuery(this);\n                        let pane = getPanel($clickedLabel.parents('[data-ax5docker-pane]').attr(\"data-ax5docker-path\"));\n                        let panelIndex = $clickedLabel.attr(\"data-ax5docker-pane-tab\");\n\n                        if (!$clickedLabel.hasClass(\"active\")) {\n                            changeActiveStackPanel(pane, panelIndex);\n                        }\n\n                        $clickedLabel = null;\n                        pane = null;\n                        panelIndex = null;\n                        U.stopEvent(e);\n                    })\n                    .on(\"click.ax5docker-pane\", \"[data-ax5docker-pane-tabs-more]\", function (e) {\n                        openStackPanelMore($(this).parents('[data-ax5docker-pane]'), e);\n                        U.stopEvent(e);\n                    });\n\n                this.$target\n                    .off(\"mousedown.ax5docker-pane-resize\")\n                    .off(\"dragstart.ax5docker-pane-resize\")\n                    .on(\"dragstart.ax5docker-pane-resize\", \"[data-ax5docker-pane-tab]\", function (e) {\n                        panelTabDragEvent.on(this);\n                    })\n                    .on(\"mousedown.ax5docker-pane-resize\", \"[data-ax5docker-resize-handle]\", function (e) {\n                        let datas = this.getAttribute(\"data-ax5docker-resize-handle\").split(/\\//g);\n\n                        // panelResizerEvent.init\n                        self.xvar.mousePosition = getMousePosition(e);\n                        self.xvar.resizerType = datas[0];\n                        self.xvar.resizerPath = datas[1];\n                        self.xvar.resizerIndex = datas[2];\n                        // 주변 패널들\n                        self.xvar.resizer$dom = $(this);\n                        self.xvar.resizerParent$dom = self.xvar.resizer$dom.parent();\n                        self.xvar.resizerPrevGrow = U.number(self.xvar.resizer$dom.prev().css(\"flex-grow\"));\n                        self.xvar.resizerNextGrow = U.number(self.xvar.resizer$dom.next().css(\"flex-grow\"));\n\n                        if (self.xvar.resizerType == \"row\") {\n                            //self.xvar.resizerCanvasWidth = self.xvar.resizerParent$dom.innerWidth();\n                            self.xvar.resizerCanvasWidth = self.xvar.resizer$dom.prev().innerWidth() + self.xvar.resizer$dom.next().innerWidth() + self.xvar.resizer$dom.width();\n                        } else {\n                            //self.xvar.resizerCanvasHeight = self.xvar.resizerParent$dom.innerHeight();\n                            self.xvar.resizerCanvasHeight = self.xvar.resizer$dom.prev().innerHeight() + self.xvar.resizer$dom.next().innerHeight() + self.xvar.resizer$dom.height();\n                        }\n\n                        panelResizerEvent.on(this);\n                        U.stopEvent(e);\n                    })\n                    .on(\"dragstart.ax5docker-pane-resize\", \"[data-ax5docker-resize-handle]\", function (e) {\n                        U.stopEvent(e);\n                        return false;\n                    });\n\n                // stackPane tabs 스크롤처리\n                alignStackPane();\n                $root = null;\n            };\n\n            /**\n             * 액티브 패널 변경(stack인 상황에서)\n             * @param pane\n             * @param panelIndex\n             * @returns {boolean}\n             */\n            const changeActiveStackPanel = (pane, panelIndex) => {\n                let panel = pane.panels[panelIndex];\n\n                for (let p = 0, pl = pane.panels.length; p < pl; p++) {\n                    if (pane.panels[p].active) {\n                        controlPanel(pane.panels[p], \"deactive\");\n                    }\n                }\n\n                if (!panel.builded) controlPanel(panel, \"init\");\n                controlPanel(panel, \"active\");\n\n                pane = null;\n                panelIndex = null;\n                panel = null;\n                return this;\n            };\n\n            /**\n             * 패널 삭제하기\n             * @param clickedLabel\n             * @returns {ax5docker}\n             */\n            const closePanel = (clickedLabel) => {\n                let $clickedLabel = jQuery(clickedLabel),\n                    panelPath = $clickedLabel.attr(\"data-ax5docker-path\"),\n                    panel = getPanel(panelPath);\n\n                controlPanel(panel, \"destroy\");\n\n                $clickedLabel = null;\n                panelPath = null;\n                panel = null;\n                return this;\n            };\n\n            /**\n             * stackTab의 더보기 아이콘이 클릭되면~~~\n             * @param stackPane\n             * @param e\n             * @returns {ax5docker}\n             */\n            const openStackPanelMore = (stackPane, e) => {\n                let $stackPane = jQuery(stackPane),\n                    panePath = $stackPane.attr(\"data-ax5docker-path\"),\n                    pane = getPanel(panePath);\n\n                if (this.menu) {\n                    let menuItems = U.map(pane.panels, function (index) {\n                        return {\n                            label: this.name,\n                            index: index,\n                            panePath: panePath\n                        }\n                    });\n\n                    this.menu.setConfig({\n                        items: menuItems,\n                        onClick: function () {\n                            //console.log(pane);\n                            changeActiveStackPanel(getPanel(this.panePath), this.index);\n                        }\n                    });\n\n                    this.menu.popup(e);\n                } else {\n                    console.log(pane.panels);\n                    throw \"'ax5ui-menu' is required to implement the function.\";\n                }\n\n                $stackPane = null;\n                panePath = null;\n                pane = null;\n                return this;\n            };\n\n            /**\n             * repaintPanels이 작동할 때. 리사이저에 mousedown 이벤트를 연결합니다.\n             * 발생된 이벤트가 panelResizerEvent.on 을 작동시켜 리사이저를 움직이게 합니다\n             */\n            const panelResizerEvent = {\n                \"on\": (_resizer) => {\n                    const $resizer = $(_resizer);\n                    const resizerPositionLeft = $resizer.offset().left;\n                    const dockerTargetOffsetLeft = this.$target.offset().left;\n\n                    jQuery(document.body)\n                        .on(\"mousemove.ax5docker-\" + this.instanceId, function (e) {\n                            let mouseObj = getMousePosition(e);\n                            let da_grow;\n                            if (self.xvar.resizerLived) {\n                                if (self.xvar.resizerType == \"row\") {\n                                    self.xvar.__da = mouseObj.clientX - self.xvar.mousePosition.clientX;\n                                    da_grow = U.number(self.xvar.__da * 2 / self.xvar.resizerCanvasWidth, {round: 6});\n\n                                    self.xvar.resizer$dom.prev().css({\"flex-grow\": self.xvar.resizerPrevGrow + da_grow});\n                                    self.xvar.resizer$dom.next().css({\"flex-grow\": self.xvar.resizerNextGrow - da_grow});\n                                } else {\n                                    self.xvar.__da = mouseObj.clientY - self.xvar.mousePosition.clientY;\n                                    da_grow = U.number(self.xvar.__da * 2 / self.xvar.resizerCanvasHeight, {round: 6});\n\n                                    self.xvar.resizer$dom.prev().css({\"flex-grow\": self.xvar.resizerPrevGrow + da_grow});\n                                    self.xvar.resizer$dom.next().css({\"flex-grow\": self.xvar.resizerNextGrow - da_grow});\n                                }\n                            } else {\n                                self.xvar.resizerLived = true;\n                            }\n\n                            mouseObj = null;\n                            da_grow = null;\n                        })\n                        .on(\"mouseup.ax5docker-\" + this.instanceId, function (e) {\n                            panelResizerEvent.off();\n                            U.stopEvent(e);\n                        })\n                        .on(\"mouseleave.ax5docker-\" + this.instanceId, function (e) {\n                            panelResizerEvent.off();\n                            U.stopEvent(e);\n                        });\n\n                    jQuery(document.body)\n                        .attr('unselectable', 'on')\n                        .css('user-select', 'none')\n                        .on('selectstart', false);\n                },\n                \"off\": () => {\n                    self.xvar.resizerLived = false;\n\n                    if (typeof this.xvar.__da === \"undefined\") {\n\n                    }\n                    else {\n                        let $prevPanel = self.xvar.resizer$dom.prev(),\n                            $nextPanel = self.xvar.resizer$dom.next(),\n                            prevPane = getPanel($prevPanel.attr(\"data-ax5docker-path\")),\n                            nextPane = getPanel($nextPanel.attr(\"data-ax5docker-path\"));\n\n                        prevPane.flexGrow = U.number($prevPanel.css(\"flex-grow\"));\n                        nextPane.flexGrow = U.number($nextPanel.css(\"flex-grow\"));\n\n                        $prevPanel = null;\n                        $nextPanel = null;\n                        prevPane = null;\n                        nextPane = null;\n                    }\n\n                    jQuery(document.body)\n                        .off(\"mousemove.ax5docker-\" + this.instanceId)\n                        .off(\"mouseup.ax5docker-\" + this.instanceId)\n                        .off(\"mouseleave.ax5docker-\" + this.instanceId);\n\n                    jQuery(document.body)\n                        .removeAttr('unselectable')\n                        .css('user-select', 'auto')\n                        .off('selectstart');\n                }\n            };\n\n            /**\n             * repaintPanels이 작동할 때. 패널탭에 dragStart 이벤트를 연결합니다.\n             * 발생된 이벤트가 panelTabDragEvent.on를 작동.\n             */\n            const panelTabDragEvent = {\n                \"on\": () => {\n                    if (this.panels[0] && this.panels[0].panels && this.panels[0].panels.length) {\n\n                        this.xvar.dragger = {\n                            target: null,\n                            dragOverVertical: null,\n                            dragOverHorizontal: null\n                        };\n\n                        this.$target\n                            .on(\"dragover.ax5docker-\" + this.instanceId, '[data-ax5docker-path]', function (e) {\n                                // todo : dragover 구현\n                                // console.log(\"dargover\", getMousePosition(e));\n                                // console.log(e.target);\n                                panelTabDragEvent.dragover(this, e);\n                                U.stopEvent(e);\n                            })\n                            .on(\"drop.ax5docker-\" + this.instanceId, function (e) {\n                                panelTabDragEvent.off(\"drop\");\n                                U.stopEvent(e);\n                            })\n                            .on(\"dragend.ax5docker-\" + this.instanceId, function (e) {\n                                panelTabDragEvent.off();\n                                U.stopEvent(e);\n                            });\n                    }\n                },\n                \"dragover\": (dragoverDom, e) => {\n                    let $dragoverDom = jQuery(dragoverDom);\n                    if (this.xvar.dragger.target == null || this.xvar.dragger.target.get(0) != $dragoverDom.get(0)) {\n\n                        if (this.xvar.dragger.target) this.xvar.dragger.target.removeAttr(\"data-dropper\");\n\n                        this.xvar.dragger.target = $dragoverDom;\n                        this.xvar.dragger.dragOverVertical = null;\n                        this.xvar.dragger.dragOverHorizontal = null;\n                    }\n\n                    // e.target\n                    let box = {};\n                    box = $dragoverDom.offset();\n                    box.width = $dragoverDom.width();\n                    box.height = $dragoverDom.height();\n\n                    let mouse = getMousePosition(e);\n                    let dragOverVertical, dragOverHorizontal;\n                    if ($dragoverDom.attr(\"data-ax5docker-pane-tab\")) {\n                        let halfWidth = box.width / 2;\n                        if (box.left <= mouse.clientX && (box.left + halfWidth) >= mouse.clientX) {\n                            dragOverHorizontal = \"left\";\n                        }\n                        else if ((box.left + halfWidth) <= mouse.clientX && (box.left + halfWidth * 2) >= mouse.clientX) {\n                            dragOverHorizontal = \"right\";\n                        }\n                        if (this.xvar.dragger.dragOverHorizontal != dragOverHorizontal && typeof dragOverHorizontal != \"undefined\") {\n                            this.xvar.dragger.dragOverHorizontal = dragOverHorizontal;\n\n                            var draggerProcessor = {\n                                \"left\"($target){\n                                    $target.attr(\"data-dropper\", \"left\");\n                                },\n                                \"right\"($target){\n                                    $target.attr(\"data-dropper\", \"right\");\n                                },\n                            };\n\n                            draggerProcessor[this.xvar.dragger.dragOverHorizontal](this.xvar.dragger.target);\n\n                        }\n                    }\n                    else if ($dragoverDom.attr(\"data-ax5docker-pane-item\")) {\n                        // panel dragover 포지션 구하기\n                        let threeQuarterHeight = box.height / 3;\n                        let threeQuarterWidth = box.width / 3;\n\n                        if (box.top <= mouse.clientY && (box.top + threeQuarterHeight) >= mouse.clientY) {\n                            dragOverVertical = \"top\";\n                        }\n                        else if ((box.top + threeQuarterHeight) <= mouse.clientY && (box.top + threeQuarterHeight * 2) >= mouse.clientY) {\n                            dragOverVertical = \"middle\";\n                        }\n                        else if ((box.top + threeQuarterHeight * 2) <= mouse.clientY && (box.top + threeQuarterHeight * 3) >= mouse.clientY) {\n                            dragOverVertical = \"bottom\";\n                        }\n\n                        if (box.left <= mouse.clientX && (box.left + threeQuarterWidth) >= mouse.clientX) {\n                            dragOverHorizontal = \"left\";\n                        }\n                        else if ((box.left + threeQuarterWidth) <= mouse.clientX && (box.left + threeQuarterWidth * 2) >= mouse.clientX) {\n                            dragOverHorizontal = \"center\";\n                        }\n                        else if ((box.left + threeQuarterWidth * 2) <= mouse.clientX && (box.left + threeQuarterWidth * 3) >= mouse.clientX) {\n                            dragOverHorizontal = \"right\";\n                        }\n\n                        if (this.xvar.dragger.dragOverVertical != dragOverVertical || this.xvar.dragger.dragOverHorizontal != dragOverHorizontal) {\n                            this.xvar.dragger.dragOverVertical = dragOverVertical;\n                            this.xvar.dragger.dragOverHorizontal = dragOverHorizontal;\n\n                            var draggerProcessor = {\n                                \"left-top\"($target){\n                                    $target.attr(\"data-dropper\", \"left\");\n                                },\n                                \"right-top\"($target){\n                                    $target.attr(\"data-dropper\", \"right\");\n                                },\n                                \"center-top\"($target){\n                                    $target.attr(\"data-dropper\", \"top\");\n                                },\n                                \"left-middle\"($target){\n                                    $target.attr(\"data-dropper\", \"left\");\n                                },\n                                \"right-middle\"($target){\n                                    $target.attr(\"data-dropper\", \"right\");\n                                },\n                                \"center-middle\"($target){\n                                    $target.attr(\"data-dropper\", \"center\");\n                                },\n                                \"left-bottom\"($target){\n                                    $target.attr(\"data-dropper\", \"left\");\n                                },\n                                \"right-bottom\"($target){\n                                    $target.attr(\"data-dropper\", \"right\");\n                                },\n                                \"center-bottom\"($target){\n                                    $target.attr(\"data-dropper\", \"bottom\");\n                                },\n                            };\n\n                            draggerProcessor[this.xvar.dragger.dragOverHorizontal + \"-\" + this.xvar.dragger.dragOverVertical](this.xvar.dragger.target);\n                        }\n                    }\n                },\n                \"off\": (isDrop) => {\n                    if(isDrop){\n                        console.log(this.xvar.dragger);\n\n\n\n                    }\n                    \n                    this.$target\n                        .off(\"dragover.ax5docker-\" + this.instanceId)\n                        .off(\"drop.ax5docker-\" + this.instanceId)\n                        .off(\"dragend.ax5docker-\" + this.instanceId);\n\n                    this.xvar.dragger.target.removeAttr(\"data-dropper\");\n                }\n            };\n\n            /**\n             * stack type panel resize되면 탭 스크롤 처리 관련 처리\n             */\n            const debounceFn = ax5.util.debounce(function (fn) {\n                fn();\n            }, cfg.animateTime);\n\n            /**\n             * stackPane이 리사이즈 되면 탭을 스크롤여부를 판단해야 합니다.\n             */\n            const alignStackPane = () => {\n                debounceFn((function () {\n                    this.$target.find('[data-ax5docker-pane-tabs]').each(function () {\n                        let $this = jQuery(this).parent();\n                        if (this.scrollWidth > this.clientWidth) {\n                            $this.addClass(\"tabs-scrolled\");\n                        } else {\n                            $this.removeClass(\"tabs-scrolled\");\n                        }\n                        $this = null;\n                    });\n                }).bind(this));\n            };\n\n            /**\n             * 패널중에 null이 된 요소를 찾아 panels를 정리 합니다.\n             * @returns {*}\n             */\n            const arrangePanel = () => {\n                // console.log(this.$target.find('[data-ax5docker-pane]'));\n                const panels = [];\n                const processor = {\n                    stack(myself){\n                        if (!U.isArray(myself.panels)) return false;\n\n                        let newObj = {\n                            type: \"stack\",\n                            panels: []\n                        };\n\n                        myself.panels.forEach(function (P, _pIndex) {\n                            if (P) {\n                                let _p = processor[P.type](P);\n                                if (_p) newObj.panels.push(_p);\n                                _p = null;\n                            }\n                        });\n\n                        if (newObj.panels.length == 0) {\n                            return null;\n                        } else if (newObj.panels.length < 2) {\n                            newObj = newObj.panels[0];\n                        }\n\n                        return newObj;\n                    },\n                    panel(myself){\n                        //console.log(myself);\n                        return myself;\n                    },\n                    row(myself){\n\n                        if (!U.isArray(myself.panels)) return false;\n\n                        let newObj = {\n                            type: \"row\",\n                            panels: []\n                        };\n\n                        myself.panels.forEach(function (P, _pIndex) {\n                            if (P) {\n                                let _p = processor[P.type](P);\n                                if (_p) newObj.panels.push(_p);\n                                _p = null;\n                            }\n                        });\n\n                        if (newObj.panels.length == 0) {\n                            return null;\n                        } else if (newObj.panels.length < 2) {\n                            newObj = newObj.panels[0];\n                        }\n\n                        return newObj;\n                    },\n                    column(myself){\n                        if (!U.isArray(myself.panels)) return false;\n\n                        let newObj = {\n                            type: \"column\",\n                            panels: []\n                        };\n\n                        myself.panels.forEach(function (P, _pIndex) {\n                            if (P) {\n                                let _p = processor[P.type](P);\n                                if (_p) newObj.panels.push(_p);\n                                _p = null;\n                            }\n                        });\n\n                        if (newObj.panels.length == 0) {\n                            return null;\n                        } else if (newObj.panels.length < 2) {\n                            newObj = newObj.panels[0];\n                        }\n\n                        return newObj;\n                    },\n                };\n\n                if (this.panels[0]) {\n                    this.panels[0] = processor[this.panels[0].type](this.panels[0]);\n                } else {\n                    this.panels = [];\n                }\n\n                repaintPanels();\n            };\n\n            /**\n             * @method ax5docker.setConfig\n             * @param {Object} config\n             * @param {Array} config.panels\n             */\n            this.init = function (_config) {\n                cfg = jQuery.extend(true, {}, cfg, _config);\n                if (!cfg.target) {\n                    console.log(ax5.info.getError(\"ax5docker\", \"401\", \"init\"));\n                    return this;\n                }\n                // memory target\n                this.$target = jQuery(cfg.target);\n                // set panels\n                this.panels = cfg.panels || [];\n                // event Functions\n                this.onStateChanged = cfg.onStateChanged;\n                this.onClick = cfg.onClick;\n                this.onLoad = cfg.onLoad;\n                this.onDataChanged = cfg.onDataChanged;\n\n                if (ax5.ui.menu) {\n                    this.menu = new ax5.ui.menu({\n                        theme: 'default',\n                        position: \"absolute\",\n                        icons: {\n                            'arrow': '▸'\n                        }\n                    });\n                }\n\n                jQuery(window).bind(\"resize.ax5docker-\" + this.id, function () {\n                    // stackPane tabs 스크롤처리\n                    alignStackPane();\n                });\n            };\n\n            /**\n             * @method ax5docker.setPanels\n             * @returns {ax5docker}\n             */\n            this.setPanels = function (_panels) {\n                // set panels\n                this.panels = _panels || [];\n\n                // 패널 다시 그리기\n                repaintPanels();\n                return this;\n            };\n\n            /**\n             * @method ax5docker.addModule\n             * @param modules\n             * @returns {ax5docker}\n             */\n            this.addModule = function (modules) {\n                if (U.isObject(modules)) {\n                    jQuery.extend(true, this.modules, modules);\n                }\n                return this;\n            };\n\n            /**\n             * repaint panels of docker\n             * @method ax5docker.repaint\n             * @returns {ax5docker}\n             */\n            this.repaint = function () {\n                // 패널 다시 그리기\n                repaintPanels();\n                return this;\n            };\n\n            /**\n             * @method ax5docker.addPanel\n             * @param {String} _addPath - Position path to add panel\n             * @param _addType\n             * @param _panel\n             * @param _panelIndex\n             * @returns {ax5docker}\n             * @example\n             * ```js\n             * myDocker.addPanel('0.1', 'stack', {type:'panel', name:'addPanel', moduleName: 'content'});\n             *\n             * ```\n             */\n            this.addPanel = function (_addPath, _addType, _panel, _panelIndex) {\n                let addPath = \"\";\n                if (_addPath == \"undefined\") addPath = \"0\";\n                addPath = _addPath\n                    .replace(/[a-zA-Z\\[\\]]+/g, \"\")\n                    .replace(/(\\d+)/g, function (a, b) {\n                        return \"panels[\" + a + \"]\";\n                    });\n\n                let pane = getPanel(addPath);\n                let parent = getPanelParent(pane);\n                if (parent.type == \"stack\") {\n                    // 부모패널로 ~\n                    //console.log(addPath, _addPath);\n                    pane = parent;\n                    addPath = pane.panelPath;\n                }\n                let panelProcessor = {\n                    \"stack\"(_pane, _addType, _panel){\n                        let copyPanel = jQuery.extend({}, _pane),\n                            addProcessor = {\n                                \"stack\"(_pane, _panel){\n                                    _pane.panels.push(_panel);\n                                    arrangePanel();\n                                },\n                                \"row-left\"(_pane, _panel){\n                                    let parentPath = addPath.substr(0, addPath.lastIndexOf(\".\"));\n                                    let parentPane = getPanel(parentPath);\n                                    if (parentPane && parentPane.type == \"row\") {\n                                        this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                    } else {\n                                        _pane = setPanel(addPath, {\n                                            type: \"row\",\n                                            panels: []\n                                        });\n                                        _pane.panels.push(_panel);\n                                        _pane.panels.push(copyPanel);\n                                        arrangePanel();\n                                    }\n                                },\n                                \"row-right\"(_pane, _panel){\n                                    let parentPath = addPath.substr(0, addPath.lastIndexOf(\".\"));\n                                    let parentPane = getPanel(parentPath);\n                                    if (parentPane && parentPane.type == \"row\") {\n                                        this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                    } else {\n                                        _pane = setPanel(addPath, {\n                                            type: \"row\",\n                                            panels: []\n                                        });\n                                        _pane.panels.push(copyPanel);\n                                        _pane.panels.push(_panel);\n                                        arrangePanel();\n                                    }\n                                },\n                                \"column-top\"(_pane, _panel){\n                                    let parentPath = addPath.substr(0, addPath.lastIndexOf(\".\"));\n                                    let parentPane = getPanel(parentPath);\n                                    if (parentPane && parentPane.type == \"column\") {\n                                        this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                    } else {\n                                        _pane = setPanel(addPath, {\n                                            type: \"column\",\n                                            panels: []\n                                        });\n                                        _pane.panels.push(_panel);\n                                        _pane.panels.push(copyPanel);\n                                        arrangePanel();\n                                    }\n                                },\n                                \"column-bottom\"(_pane, _panel){\n                                    let parentPath = addPath.substr(0, addPath.lastIndexOf(\".\"));\n                                    let parentPane = getPanel(parentPath);\n                                    if (parentPane && parentPane.type == \"column\") {\n                                        this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                    } else {\n                                        _pane = setPanel(addPath, {\n                                            type: \"column\",\n                                            panels: []\n                                        });\n                                        _pane.panels.push(copyPanel);\n                                        _pane.panels.push(_panel);\n                                        arrangePanel();\n                                    }\n                                }\n                            };\n                        if (_addType in addProcessor) {\n                            addProcessor[_addType].call(this, _pane, _panel);\n                        }\n\n                        copyPanel = null;\n                        addProcessor = null;\n                    },\n                    \"row\"(_pane, _addType, _panel, _panelIndex){\n                        let copyPanel = jQuery.extend({}, _pane);\n                        let addProcessor = {\n                            \"stack\"(_pane, _panel){\n                                // 처리 할 수 없는 상황 첫번째 자식을 찾아 재 요청\n                                if (_pane.panels[0] && _pane.panels[0].panelPath) {\n                                    this.addPanel(_pane.panels[0].panelPath, _addType, _panel);\n                                }\n                            },\n                            \"row-left\"(_pane, _panel, _panelIndex){\n                                let parentPath = addPath.substr(0, addPath.lastIndexOf(\".\"));\n                                let parentPane = getPanel(parentPath);\n                                if (parentPane && parentPane.type == \"row\") {\n                                    _pane.panels.splice(_panelIndex, 0, _panel);\n                                    arrangePanel();\n                                } else {\n                                    _pane = setPanel(addPath, {\n                                        type: \"row\",\n                                        panels: []\n                                    });\n                                    _pane.panels.push(_panel);\n                                    _pane.panels.push(copyPanel);\n                                    arrangePanel();\n                                }\n                            },\n                            \"row-right\"(_pane, _panel, _panelIndex){\n                                let parentPath = addPath.substr(0, addPath.lastIndexOf(\".\"));\n                                let parentPane = getPanel(parentPath);\n                                if (parentPane && parentPane.type == \"row\") {\n                                    _pane.panels.splice(_panelIndex + 1, 0, _panel);\n                                    arrangePanel();\n                                } else {\n                                    _pane = setPanel(addPath, {\n                                        type: \"row\",\n                                        panels: []\n                                    });\n                                    _pane.panels.push(copyPanel);\n                                    _pane.panels.push(_panel);\n                                    arrangePanel();\n                                }\n                            },\n                            \"column-top\"(_pane, _panel, _panelIndex){\n                                let parentPath = addPath.substr(0, addPath.lastIndexOf(\".\"));\n                                let parentPane = getPanel(parentPath);\n                                if (parentPane && parentPane.type == \"column\") {\n                                    this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                } else {\n                                    _pane = setPanel(addPath, {\n                                        type: \"column\",\n                                        panels: []\n                                    });\n                                    _pane.panels.push(_panel);\n                                    _pane.panels.push(copyPanel);\n                                    arrangePanel();\n                                }\n                            },\n                            \"column-bottom\"(_pane, _panel, _panelIndex){\n                                let parentPath = addPath.substr(0, addPath.lastIndexOf(\".\"));\n                                let parentPane = getPanel(parentPath);\n                                if (parentPane && parentPane.type == \"column\") {\n                                    this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                } else {\n                                    _pane = setPanel(addPath, {\n                                        type: \"column\",\n                                        panels: []\n                                    });\n                                    _pane.panels.push(copyPanel);\n                                    _pane.panels.push(_panel);\n                                    arrangePanel();\n                                }\n                            }\n                        };\n                        if (_addType in addProcessor) {\n                            addProcessor[_addType].call(this, _pane, _panel, _panelIndex);\n                        }\n\n                        addProcessor = null;\n                        copyPanel = null;\n                    },\n                    \"column\"(_pane, _addType, _panel, _panelIndex){\n                        let copyPanel = jQuery.extend({}, _pane);\n                        let addProcessor = {\n                            \"stack\"(_pane, _panel){\n                                if (_pane.panels[0] && _pane.panels[0].panelPath) {\n                                    this.addPanel(_pane.panels[0].panelPath, _addType, _panel);\n                                }\n                            },\n                            \"row-left\"(_pane, _panel){\n                                let parentPath = addPath.substr(0, addPath.lastIndexOf(\".\"));\n                                let parentPane = getPanel(parentPath);\n                                if (parentPane && parentPane.type == \"row\") {\n                                    this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                } else {\n                                    _pane = setPanel(addPath, {\n                                        type: \"row\",\n                                        panels: []\n                                    });\n                                    _pane.panels.push(_panel);\n                                    _pane.panels.push(copyPanel);\n                                    arrangePanel();\n                                }\n                            },\n                            \"row-right\"(_pane, _panel){\n                                let parentPath = addPath.substr(0, addPath.lastIndexOf(\".\"));\n                                let parentPane = getPanel(parentPath);\n                                if (parentPane && parentPane.type == \"row\") {\n                                    this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                } else {\n                                    _pane = setPanel(addPath, {\n                                        type: \"row\",\n                                        panels: []\n                                    });\n                                    _pane.panels.push(copyPanel);\n                                    _pane.panels.push(_panel);\n                                    arrangePanel();\n                                }\n                            },\n                            \"column-top\"(_pane, _panel){\n                                _pane.panels.splice(_panelIndex, 0, _panel);\n                                arrangePanel();\n                            },\n                            \"column-bottom\"(_pane, _panel){\n                                _pane.panels.splice(_panelIndex + 1, 0, _panel);\n                                arrangePanel();\n                            }\n                        };\n                        if (_addType in addProcessor) {\n                            addProcessor[_addType].call(this, _pane, _panel);\n                        }\n\n                        addProcessor = null;\n                        copyPanel = null;\n                    },\n                    \"panel\"(_pane, _addType, _panel){\n                        // todo : 부모가 stack인지 체크 하자.\n                        let copyPanel = jQuery.extend({}, _pane),\n                            addProcessor = {\n                                \"stack\"(_pane, _panel){\n                                    // _pane stack으로 재구성\n                                    _pane = setPanel(addPath, {\n                                        type: \"stack\",\n                                        panels: []\n                                    });\n                                    _pane.panels.push(copyPanel);\n                                    _pane.panels.push(_panel);\n                                    arrangePanel();\n                                },\n                                \"row-left\"(_pane, _panel){\n                                    let parentPath = addPath.substr(0, addPath.lastIndexOf(\".\"));\n                                    let parentPane = getPanel(parentPath);\n                                    if (parentPane && parentPane.type == \"row\") {\n                                        this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                    } else {\n                                        _pane = setPanel(addPath, {\n                                            type: \"row\",\n                                            panels: []\n                                        });\n                                        _pane.panels.push(_panel);\n                                        _pane.panels.push(copyPanel);\n                                        arrangePanel();\n                                    }\n                                },\n                                \"row-right\"(_pane, _panel){\n                                    let parentPath = addPath.substr(0, addPath.lastIndexOf(\".\"));\n                                    let parentPane = getPanel(parentPath);\n                                    if (parentPane && parentPane.type == \"row\") {\n                                        this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                    } else {\n                                        _pane = setPanel(addPath, {\n                                            type: \"row\",\n                                            panels: []\n                                        });\n                                        _pane.panels.push(copyPanel);\n                                        _pane.panels.push(_panel);\n                                        arrangePanel();\n                                    }\n                                },\n                                \"column-top\"(_pane, _panel){\n                                    let parentPath = addPath.substr(0, addPath.lastIndexOf(\".\"));\n                                    let parentPane = getPanel(parentPath);\n                                    if (parentPane && parentPane.type == \"column\") {\n                                        this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                    } else {\n                                        _pane = setPanel(addPath, {\n                                            type: \"column\",\n                                            panels: []\n                                        });\n                                        _pane.panels.push(_panel);\n                                        _pane.panels.push(copyPanel);\n                                        arrangePanel();\n                                    }\n                                },\n                                \"column-bottom\"(_pane, _panel){\n                                    let parentPath = addPath.substr(0, addPath.lastIndexOf(\".\"));\n                                    let parentPane = getPanel(parentPath);\n                                    if (parentPane && parentPane.type == \"column\") {\n                                        this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                    } else {\n                                        _pane = setPanel(addPath, {\n                                            type: \"column\",\n                                            panels: []\n                                        });\n                                        _pane.panels.push(copyPanel);\n                                        _pane.panels.push(_panel);\n                                        arrangePanel();\n                                    }\n                                }\n                            };\n\n                        if (_addType in addProcessor) {\n                            addProcessor[_addType].call(this, _pane, _panel);\n                        }\n\n                        copyPanel = null;\n                        addProcessor = null;\n                    }\n                };\n\n                panelProcessor[pane.type].call(this, pane, _addType, _panel, _panelIndex);\n                return this;\n            };\n\n\n            /**\n             * @method ax5docker.movePanel\n             * @param _panel\n             * @param _movePath\n             * @param _moveType\n             * @returns {ax5docker}\n             */\n            this.movePanel = function (_panel, _movePath, _moveType) {\n\n                return this;\n            };\n\n            // 클래스 생성자\n            this.main = (function () {\n                if (arguments && U.isObject(arguments[0])) {\n                    this.setConfig(arguments[0]);\n                }\n            }).apply(this, arguments);\n\n        };\n\n        return ax5docker;\n    })());\n\n})();\n\n// todo : row > stack 구현 -- ok\n// todo : stack 패널 active change -- ok\n// todo : 패널삭제하기 -- ok ~ active 패널 정리.. -- ok\n// todo : 패널추가하기 -- ok\n// todo : 패널 스플릿 리사이즈 -- ok\n// todo : stack tab overflow 처리. -- ok\n// todo : 탭 포커싱와 탭 목록 메뉴 처리 -- ok\n// todo : 패널 drag & drop","// ax5.ui.docker.tmpl\n(function () {\n\n    let DOCKER = ax5.ui.docker;\n\n\n\n    DOCKER.tmpl = {\n\n        get: function (tmplName, data, columnKeys) {\n            return ax5.mustache.render(DOCKER.tmpl[tmplName].call(this, columnKeys), data);\n        }\n    };\n\n})();"]}