{"version":3,"sources":["ax5docker.min.js","ax5docker.js","ax5docker-tmpl.js"],"names":["UI","ax5","ui","U","util","addClass","className","version","ax5docker","_this","this","cfg","instanceId","getGuid","config","theme","animateTime","columnKeys","panels","panelId","modules","getPanelId","defaultModuleInit","container","state","html","name","repaintPanels","buildPanel","_pane","moduleState","jQuery","extend","moduleContainer","$element","$item","moduleName","init","appendProcessor","stack","$parent","parent","myself","$dom","activeIndex","append","isArray","forEach","P","pIndex","active","type","panel","$label","icons","close","find","resizeHandel","row","column","$root","$target","_config","target","onStateChanged","onClick","onLoad","onDataChanged","console","log","info","getError","setPanels","_panels","addModule","isObject","main","arguments","setConfig","apply","DOCKER","docker","tmpl","get","tmplName","data","mustache","render","call"],"mappings":"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","file":"ax5docker.min.js","sourcesContent":["\"use strict\";\n\n/*\n * Copyright (c) 2017. tom@axisj.com\n * - github.com/thomasjang\n * - www.axisj.com\n */\n\n(function () {\n\n    var UI = ax5.ui,\n        U = ax5.util;\n\n    UI.addClass({\n        className: \"docker\",\n        version: \"${VERSION}\"\n    }, function () {\n\n        /**\n         * @class ax5docker\n         * @classdesc\n         * @author tom@axisj.com\n         * @example\n         * ```\n         * var ax5docker = new ax5.ui.ax5docker();\n         * ```\n         */\n        var ax5docker = function ax5docker() {\n            var _this = this;\n\n            var self = this,\n                cfg = void 0;\n\n            this.instanceId = ax5.getGuid();\n            this.config = {\n                theme: 'default',\n                animateTime: 250,\n                columnKeys: {}\n            };\n            // 패널 정보\n            this.panels = [];\n            this.panelId = 0;\n\n            // 패널의 컨텐츠 모듈\n            this.modules = {};\n\n            cfg = this.config;\n\n            var getPanelId = function getPanelId() {\n                return _this.panelId++;\n            };\n\n            var defaultModuleInit = function defaultModuleInit(container, state) {\n                container[\"$element\"].html(state.name);\n            };\n\n            var repaintPanels = function repaintPanels() {\n\n                var buildPanel = function buildPanel(_pane) {\n                    var moduleState = jQuery.extend(_pane.moduleState, {\n                        name: _pane.name\n                    }),\n                        moduleContainer = {\n                        '$element': _pane.$item\n                    };\n\n                    if (_pane.moduleName in _this.modules && 'init' in _this.modules[_pane.moduleName]) {\n                        _this.modules[_pane.moduleName].init(moduleContainer, moduleState);\n                    } else {\n                        defaultModuleInit(moduleContainer, moduleState);\n                    }\n                };\n\n                var appendProcessor = {\n                    stack: function stack($parent, parent, myself) {\n                        var $dom = void 0,\n                            activeIndex = -1;\n\n                        $dom = jQuery('<div data-ax5docker-pane=\"\">' + '<ul data-ax5docker-pane-tabs=\"\"></ul>' + '<div data-ax5docker-pane-item-views=\"\"></div>' + '</div>');\n                        $parent.append($dom);\n\n                        if (U.isArray(myself.panels)) {\n                            myself.panels.forEach(function (P, pIndex) {\n                                if (myself.active) activeIndex = pIndex;\n                            });\n                            if (activeIndex === -1) activeIndex = 0;\n                            myself.panels[activeIndex].active = true;\n\n                            myself.panels.forEach(function (P, pIndex) {\n                                appendProcessor[P.type]($dom, myself, P, pIndex);\n                            });\n                        }\n\n                        $dom = null;\n                        activeIndex = null;\n                    },\n                    panel: function panel($parent, parent, myself, pIndex) {\n                        var $dom = void 0,\n                            $item = void 0,\n                            $label = void 0;\n\n                        $label = jQuery('<li data-ax5docker-pane-tab=\"' + pIndex + '\">' + '<div class=\"title\">' + myself.name + '</div>' + '<div class=\"close-icon\">' + cfg.icons.close + '</div>' + '</li>');\n\n                        if (!myself.$item) {\n                            myself.$item = jQuery('<div data-ax5docker-pane-item=\"' + pIndex + '\" data-ax5docker-pane-id=\"' + getPanelId() + '\"></div>');\n                            buildPanel(myself);\n                        }\n\n                        if (parent && parent.type == \"stack\") {\n                            if (myself.active) {\n                                $label.addClass(\"active\");\n                                myself.$item.addClass(\"active\");\n                            }\n                            $parent.find('[data-ax5docker-pane-tabs]').append($label);\n                            $parent.find('[data-ax5docker-pane-item-views]').append(myself.$item);\n                        } else {\n                            $dom = jQuery('<div data-ax5docker-pane=\"\">' + '<ul data-ax5docker-pane-tabs=\"\"></ul>' + '<div data-ax5docker-pane-item-views=\"\"></div>' + '</div>');\n\n                            $label.addClass(\"active\");\n                            myself.$item.addClass(\"active\");\n\n                            $dom.find('[data-ax5docker-pane-tabs]').append($label);\n                            $dom.find('[data-ax5docker-pane-item-views]').append(myself.$item);\n\n                            $parent.append($dom);\n                        }\n\n                        $dom = null;\n                        $item = null;\n                        $label = null;\n                    },\n                    resizeHandel: function resizeHandel($parent, parent, myself) {\n                        var $dom = jQuery('<div data-ax5docker-resize-handle=\"\"></div>');\n                        $parent.append($dom);\n                        $dom = null;\n                    },\n                    row: function row($parent, parent, myself) {\n                        var $dom = void 0;\n\n                        $dom = jQuery('<div data-ax5docker-pane-axis=\"row\"></div>');\n                        $parent.append($dom);\n\n                        if (U.isArray(myself.panels)) {\n                            myself.panels.forEach(function (P, pIndex) {\n                                if (pIndex > 0) appendProcessor[\"resizeHandel\"]($dom, P, myself);\n                                appendProcessor[P.type]($dom, myself, P);\n                            });\n                        }\n\n                        $dom = null;\n                    },\n                    column: function column($parent, parent, myself) {\n                        var $dom = void 0;\n\n                        $dom = jQuery('<div data-ax5docker-pane-axis=\"column\"></div>');\n                        $parent.append($dom);\n\n                        if (U.isArray(myself.panels)) {\n                            myself.panels.forEach(function (P, pIndex) {\n                                if (pIndex > 0) appendProcessor[\"resizeHandel\"]($dom, P, myself);\n                                appendProcessor[P.type]($dom, myself, P);\n                            });\n                        }\n\n                        $dom = null;\n                    }\n                };\n\n                var $root = jQuery('<div data-ax5docker-panes=\"\"></div>');\n                appendProcessor[_this.panels[0].type]($root, null, _this.panels[0], 0);\n                _this.$target.html($root);\n\n                $root = null;\n            };\n\n            /**\n             * @method ax5docker.setConfig\n             * @param {Object} config\n             * @param {Array} config.panels\n             */\n            this.init = function (_config) {\n                cfg = jQuery.extend(true, {}, cfg, _config);\n                if (!cfg.target) {\n                    console.log(ax5.info.getError(\"ax5docker\", \"401\", \"init\"));\n                    return this;\n                }\n                // memory target\n                this.$target = jQuery(cfg.target);\n                // set panels\n                this.panels = cfg.panels || [];\n                // event Functions\n                this.onStateChanged = cfg.onStateChanged;\n                this.onClick = cfg.onClick;\n                this.onLoad = cfg.onLoad;\n                this.onDataChanged = cfg.onDataChanged;\n\n                // 패널 다시 그리기\n                repaintPanels();\n            };\n            /**\n             * @method ax5docker.setPanels\n             * @returns {ax5docker}\n             */\n            this.setPanels = function (_panels) {\n                // set panels\n                this.panels = _panels || [];\n\n                // 패널 다시 그리기\n                repaintPanels();\n                return this;\n            };\n\n            this.addModule = function (modules) {\n                if (U.isObject(modules)) {\n                    jQuery.extend(true, this.modules, modules);\n                }\n                return this;\n            };\n\n            // 클래스 생성자\n            this.main = function () {\n                if (arguments && U.isObject(arguments[0])) {\n                    this.setConfig(arguments[0]);\n                }\n            }.apply(this, arguments);\n        };\n\n        return ax5docker;\n    }());\n})();\n// ax5.ui.docker.tmpl\n(function () {\n\n    var DOCKER = ax5.ui.docker;\n\n    var panels = function panels(columnKeys) {\n        return \" \\n{{#panels}}\\n{{#panels}}\\n{{/panels}}\\n{{^panels}}\\n{{/panels}}\\n{{/panels}}\\n        \";\n    };\n\n    DOCKER.tmpl = {\n        \"panels\": panels,\n        get: function get(tmplName, data, columnKeys) {\n            return ax5.mustache.render(DOCKER.tmpl[tmplName].call(this, columnKeys), data);\n        }\n    };\n})();","/*\n * Copyright (c) 2017. tom@axisj.com\n * - github.com/thomasjang\n * - www.axisj.com\n */\n\n(function () {\n\n    let UI = ax5.ui,\n        U = ax5.util;\n\n    UI.addClass({\n        className: \"docker\",\n        version: \"${VERSION}\"\n    }, (function () {\n\n        /**\n         * @class ax5docker\n         * @classdesc\n         * @author tom@axisj.com\n         * @example\n         * ```\n         * var ax5docker = new ax5.ui.ax5docker();\n         * ```\n         */\n        let ax5docker = function () {\n            let self = this,\n                cfg;\n\n            this.instanceId = ax5.getGuid();\n            this.config = {\n                theme: 'default',\n                animateTime: 250,\n                columnKeys: {}\n            };\n            // 패널 정보\n            this.panels = [];\n            this.panelId = 0;\n\n            // 패널의 컨텐츠 모듈\n            this.modules = {};\n\n            cfg = this.config;\n\n            const getPanelId = () => {\n                return this.panelId++;\n            };\n\n            const defaultModuleInit = (container, state) => {\n                container[\"$element\"].html(state.name);\n            };\n\n            const repaintPanels = () => {\n\n                const buildPanel = (_pane) => {\n                    let moduleState = jQuery.extend(_pane.moduleState, {\n                            name: _pane.name\n                        }),\n                        moduleContainer = {\n                            '$element': _pane.$item\n                        };\n\n                    if (_pane.moduleName in this.modules && 'init' in this.modules[_pane.moduleName]) {\n                        this.modules[_pane.moduleName].init(moduleContainer, moduleState);\n                    } else {\n                        defaultModuleInit(moduleContainer, moduleState);\n                    }\n                };\n\n                const appendProcessor = {\n                    stack($parent, parent, myself){\n                        let $dom, activeIndex = -1;\n\n                        $dom = jQuery('<div data-ax5docker-pane=\"\">' +\n                            '<ul data-ax5docker-pane-tabs=\"\"></ul>' +\n                            '<div data-ax5docker-pane-item-views=\"\"></div>' +\n                            '</div>');\n                        $parent.append($dom);\n\n                        if (U.isArray(myself.panels)) {\n                            myself.panels.forEach(function (P, pIndex) {\n                                if (myself.active) activeIndex = pIndex;\n                            });\n                            if (activeIndex === -1) activeIndex = 0;\n                            myself.panels[activeIndex].active = true;\n\n                            myself.panels.forEach(function (P, pIndex) {\n                                appendProcessor[P.type]($dom, myself, P, pIndex);\n                            });\n                        }\n\n                        $dom = null;\n                        activeIndex = null;\n                    },\n                    panel($parent, parent, myself, pIndex){\n                        let $dom, $item, $label;\n\n                        $label = jQuery('<li data-ax5docker-pane-tab=\"' + pIndex + '\">' +\n                            '<div class=\"title\">' + myself.name + '</div>' +\n                            '<div class=\"close-icon\">' + cfg.icons.close + '</div>' +\n                            '</li>');\n\n                        if (!myself.$item) {\n                            myself.$item = jQuery('<div data-ax5docker-pane-item=\"' + pIndex + '\" data-ax5docker-pane-id=\"' + getPanelId() + '\"></div>');\n                            buildPanel(myself);\n                        }\n\n                        if (parent && parent.type == \"stack\") {\n                            if (myself.active) {\n                                $label.addClass(\"active\");\n                                myself.$item.addClass(\"active\");\n                            }\n                            $parent.find('[data-ax5docker-pane-tabs]').append($label);\n                            $parent.find('[data-ax5docker-pane-item-views]').append(myself.$item);\n                        } else {\n                            $dom = jQuery('<div data-ax5docker-pane=\"\">' +\n                                '<ul data-ax5docker-pane-tabs=\"\"></ul>' +\n                                '<div data-ax5docker-pane-item-views=\"\"></div>' +\n                                '</div>');\n\n                            $label.addClass(\"active\");\n                            myself.$item.addClass(\"active\");\n\n                            $dom.find('[data-ax5docker-pane-tabs]').append($label);\n                            $dom.find('[data-ax5docker-pane-item-views]').append(myself.$item);\n\n                            $parent.append($dom);\n                        }\n\n                        $dom = null;\n                        $item = null;\n                        $label = null;\n                    },\n                    resizeHandel($parent, parent, myself){\n                        let $dom = jQuery('<div data-ax5docker-resize-handle=\"\"></div>');\n                        $parent.append($dom);\n                        $dom = null;\n                    },\n                    row($parent, parent, myself){\n                        let $dom;\n\n                        $dom = jQuery('<div data-ax5docker-pane-axis=\"row\"></div>');\n                        $parent.append($dom);\n\n                        if (U.isArray(myself.panels)) {\n                            myself.panels.forEach(function (P, pIndex) {\n                                if (pIndex > 0) appendProcessor[\"resizeHandel\"]($dom, P, myself);\n                                appendProcessor[P.type]($dom, myself, P);\n                            });\n                        }\n\n                        $dom = null;\n                    },\n                    column($parent, parent, myself){\n                        let $dom;\n\n                        $dom = jQuery('<div data-ax5docker-pane-axis=\"column\"></div>');\n                        $parent.append($dom);\n\n                        if (U.isArray(myself.panels)) {\n                            myself.panels.forEach(function (P, pIndex) {\n                                if (pIndex > 0) appendProcessor[\"resizeHandel\"]($dom, P, myself);\n                                appendProcessor[P.type]($dom, myself, P);\n                            });\n                        }\n\n                        $dom = null;\n                    }\n                };\n\n                let $root = jQuery('<div data-ax5docker-panes=\"\"></div>');\n                appendProcessor[this.panels[0].type]($root, null, this.panels[0], 0);\n                this.$target.html($root);\n\n                $root = null;\n            };\n\n\n            /**\n             * @method ax5docker.setConfig\n             * @param {Object} config\n             * @param {Array} config.panels\n             */\n            this.init = function (_config) {\n                cfg = jQuery.extend(true, {}, cfg, _config);\n                if (!cfg.target) {\n                    console.log(ax5.info.getError(\"ax5docker\", \"401\", \"init\"));\n                    return this;\n                }\n                // memory target\n                this.$target = jQuery(cfg.target);\n                // set panels\n                this.panels = cfg.panels || [];\n                // event Functions\n                this.onStateChanged = cfg.onStateChanged;\n                this.onClick = cfg.onClick;\n                this.onLoad = cfg.onLoad;\n                this.onDataChanged = cfg.onDataChanged;\n\n                // 패널 다시 그리기\n                repaintPanels();\n            };\n            /**\n             * @method ax5docker.setPanels\n             * @returns {ax5docker}\n             */\n            this.setPanels = function (_panels) {\n                // set panels\n                this.panels = _panels || [];\n\n                // 패널 다시 그리기\n                repaintPanels();\n                return this;\n            };\n\n            this.addModule = function (modules) {\n                if (U.isObject(modules)) {\n                    jQuery.extend(true, this.modules, modules);\n                }\n                return this;\n            };\n\n            // 클래스 생성자\n            this.main = (function () {\n                if (arguments && U.isObject(arguments[0])) {\n                    this.setConfig(arguments[0]);\n                }\n            }).apply(this, arguments);\n\n        };\n\n        return ax5docker;\n    })());\n\n})();","// ax5.ui.docker.tmpl\n(function () {\n\n    let DOCKER = ax5.ui.docker;\n\n    let panels = function (columnKeys) {\n        return ` \n{{#panels}}\n{{#panels}}\n{{/panels}}\n{{^panels}}\n{{/panels}}\n{{/panels}}\n        `;\n    };\n\n    DOCKER.tmpl = {\n        \"panels\": panels,\n        get: function (tmplName, data, columnKeys) {\n            return ax5.mustache.render(DOCKER.tmpl[tmplName].call(this, columnKeys), data);\n        }\n    };\n\n})();"]}