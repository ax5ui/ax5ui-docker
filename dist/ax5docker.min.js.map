{"version":3,"sources":["ax5docker.js","ax5docker-tmpl.js"],"names":["UI","ax5","ui","U","util","DOCKER","addClass","className","version","ax5docker","_this","this","self","cfg","instanceId","getGuid","config","theme","animateTime","columnKeys","control","icons","close","more","disableClosePanel","disableDragPanel","xvar","menu","panels","panelId","modules","getPanelId","defaultModule","init","container","state","html","name","active","deactive","destroy","getPanelPath","parent","pIndex","paths","panelPath","push","join","getPanel","_panelPath","path","_path","isArray","concat","split","forEach","n","replace","Function","call","e","getPanelParent","_panel","substr","lastIndexOf","setPanel","_value","getMousePosition","mouseObj","originalEvent","changedTouches","clientX","pageX","clientY","pageY","controlPanel","_control","moduleState","jQuery","extend","moduleContainer","$element","$item","module","processor","builded","moduleName","$label","$pane","get","clientWidth","scrollWidth","animate","scrollLeft","position","left","removeClass","arrangePanel","remove","that","panel","controlType","runProcessor","isFunction","after","before","repaintPanels","appendProcessor","stack","$parent","myself","$dom","activeIndex","tmpl","append","P","_pIndex","panelIndex","type","attr","find","flexGrow","resizeHandle","row","column","$root","$target","off","on","removePanel","$","parents","stopEvent","$clickedLabel","pane","hasClass","changeActiveStackPanel","openStackPanelMore","panelTabDragEvent","datas","getAttribute","mousePosition","resizerType","resizerPath","resizerIndex","resizer$dom","resizerParent$dom","resizerPrevGrow","number","prev","css","resizerNextGrow","next","resizerCanvasWidth","innerWidth","width","resizerCanvasHeight","innerHeight","height","panelResizerEvent","alignStackPane","p","pl","length","stackPane","$stackPane","panePath","console","log","menuItems","map","index","label","setConfig","items","onClick","popup","_resizer","$resizer","offset","document","body","da_grow","resizerLived","__da","round","flex-grow","$prevPanel","$nextPanel","prevPane","nextPane","removeAttr","dragPanel","dragger","target","dragOverVertical","dragOverHorizontal","dragover","dragoverDom","$dragoverDom","box","mouse","halfWidth","draggerProcessor","right","threeQuarterHeight","threeQuarterWidth","top","left-top","right-top","center-top","left-middle","right-middle","center-middle","left-bottom","right-bottom","center-bottom","isDrop","appendType","appendPanel","debounceFn","debounce","fn","each","$this","bind","newObj","_p","_config","onStateChanged","onLoad","onDataChanged","arrow","window","id","info","getError","setPanels","_panels","addModule","isObject","repaint","addPanel","_addPath","_addType","_panelIndex","addPath","a","b","panelProcessor","_pane","copyPanel","addProcessor","stack-left","splice","stack-right","Number","row-left","parentPath","parentPane","row-right","column-top","column-bottom","_appendPath","_appendType","copiedPanel","addType","removePanelPath","appendPanelIndex","undefined","main","docker_instance","arguments","apply","docker","stack_panel","panel_label","stack-panel","panel-label","tmplName","data","mustache","render"],"mappings":"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","file":"ax5docker.min.js","sourcesContent":["/*\n * Copyright (c) 2017. tom@axisj.com\n * - github.com/thomasjang\n * - www.axisj.com\n */\n\n(function () {\n\n\n    const UI = ax5.ui,\n        U = ax5.util;\n\n    let DOCKER;\n\n    UI.addClass({\n            className: \"docker\",\n            version: \"${VERSION}\"\n        }, (function () {\n\n            /**\n             * @class ax5docker\n             * @classdesc\n             * @author tom@axisj.com\n             * @example\n             * ```\n             * var ax5docker = new ax5.ui.ax5docker();\n             * ```\n             */\n            let ax5docker = function () {\n                let self = this,\n                    cfg;\n\n                this.instanceId = ax5.getGuid();\n                this.config = {\n                    theme: 'default',\n                    animateTime: 250,\n                    columnKeys: {},\n                    control: {},\n                    icons: {\n                        close: 'X',\n                        more: '...'\n                    },\n                    disableClosePanel: false,\n                    disableDragPanel: false,\n                };\n                this.xvar = {};\n                this.menu = null;\n\n                // 패널 정보\n                this.panels = [];\n                this.panelId = 0;\n\n                // 패널의 컨텐츠 모듈\n                this.modules = {};\n\n                cfg = this.config;\n\n                const getPanelId = () => {\n                    return this.panelId++;\n                };\n\n                /**\n                 * defaultModule은 패널의 모듈이 정의되지 않은 경우를 위해 준비된 오브젝트\n                 * @type {{init: ((container, state)), active: ((container, state)), deactive: ((container, state)), destroy: ((container, state))}}\n                 */\n                const defaultModule = {\n                    init(container, state){\n                        container[\"$element\"].html(state.name);\n                    },\n                    active(container, state){\n\n                    },\n                    deactive(container, state){\n\n                    },\n                    destroy(container, state){\n\n                    }\n                };\n\n                /**\n                 * 부모패널과 패널인덱스 값으로 패널 패스를 구합니다.\n                 * @param parent\n                 * @param pIndex\n                 * @returns {string}\n                 */\n                const getPanelPath = (parent, pIndex) => {\n                    let paths = [];\n                    if (parent && typeof parent.panelPath !== \"undefined\") {\n                        paths.push(parent.panelPath);\n                    }\n\n                    paths.push('panels[' + (pIndex || 0) + ']');\n                    return paths.join(\".\");\n                };\n\n                /**\n                 * 패널패스를 이용하여 패널을 가져옵니다\n                 * @param _panelPath\n                 * @returns {*}\n                 */\n                const getPanel = (_panelPath) => {\n                    let path = [],\n                        _path = (U.isArray(_panelPath)) ? [].concat(_panelPath) : [].concat(_panelPath.split(/[\\.\\[\\]]/g));\n\n                    _path.forEach(function (n) {\n                        if (n !== \"\") path.push(\"[\\\"\" + n.replace(/['\\\"]/g, \"\") + \"\\\"]\");\n                    });\n\n                    try {\n                        return (Function(\"\", \"return this\" + path.join('') + \";\")).call(this);\n                    } catch (e) {\n                        return;\n                    }\n                };\n\n                /**\n                 * 패널을 이용하여 패널의 부모 패널을 가져옵니다\n                 * @param _panel\n                 */\n                const getPanelParent = (_panel) => {\n                    let _path = _panel.panelPath.substr(0, _panel.panelPath.lastIndexOf(\".\"));\n                    try {\n                        return (Function(\"\", \"return this.\" + _path + \";\")).call(this);\n                    } catch (e) {\n                        return;\n                    }\n                };\n\n                /**\n                 * 패널패스를 이용하여 패널오브젝트에 값을 부여합니다.\n                 * @param _panelPath\n                 * @param _value\n                 * @returns {*}\n                 */\n                const setPanel = (_panelPath, _value) => {\n                    let path = [],\n                        _path = (U.isArray(_panelPath)) ? [].concat(_panelPath) : [].concat(_panelPath.split(/[\\.\\[\\]]/g));\n\n                    _path.forEach(function (n) {\n                        if (n !== \"\") path.push(\"[\\\"\" + n.replace(/['\\\"]/g, \"\") + \"\\\"]\");\n                    });\n\n                    return (Function(\"val\", \"return this\" + path.join('') + \" = val;\")).call(this, _value);\n                };\n\n                /**\n                 * get mouse position\n                 * @param e\n                 * @returns {{clientX, clientY}}\n                 */\n                const getMousePosition = (e) => {\n                    let mouseObj, originalEvent = (e.originalEvent) ? e.originalEvent : e;\n                    mouseObj = ('changedTouches' in originalEvent) ? originalEvent.changedTouches[0] : originalEvent;\n                    // clientX, Y 쓰면 스크롤에서 문제 발생\n                    return {\n                        clientX: mouseObj.pageX,\n                        clientY: mouseObj.pageY\n                    }\n                };\n\n                /**\n                 * 패널의 모듈이 초기화, 활성화, 비활성, 제거 되는 일들을 제어하는 함수.\n                 * 모든 컨트롤은 실행되기전에 사용자가 정의한 control.before 함수의 결과에 따라 실행 여부를 결정합니다. 사용자가 control.before를 정의하지 않으면 무조건 실행합니다.\n                 * @param {Object} _panel\n                 * @param {String} _control - \"init\",\"active\",\"deactive\",\"destroy\"\n                 */\n                const controlPanel = (_panel, _control) => {\n                    let moduleState = jQuery.extend(_panel.moduleState, {\n                            name: _panel.name\n                        }),\n                        moduleContainer = {\n                            '$element': _panel.$item\n                        },\n                        module;\n\n                    let processor = {\n                        init: () => {\n                            _panel.builded = true;\n                            module = (_panel.moduleName in this.modules && 'init' in this.modules[_panel.moduleName]) ? this.modules[_panel.moduleName] : defaultModule;\n                            module.init(moduleContainer, moduleState);\n                        },\n                        active: () => {\n                            _panel.active = true;\n                            _panel.$label.addClass(\"active\");\n                            _panel.$item.addClass(\"active\");\n\n                            let $pane = _panel.$label.parent();\n                            if ($pane.get(0) && $pane.get(0).clientWidth !== $pane.get(0).scrollWidth) {\n                                $pane.animate({scrollLeft: _panel.$label.position().left}, 300);\n                            }\n\n                            module = (_panel.moduleName in this.modules && 'active' in this.modules[_panel.moduleName]) ? this.modules[_panel.moduleName] : defaultModule;\n                            module.active(moduleContainer, moduleState);\n                            $pane = null;\n                        },\n                        deactive: () => {\n                            _panel.active = false;\n                            _panel.$label.removeClass(\"active\");\n                            _panel.$item.removeClass(\"active\");\n                            module = (_panel.moduleName in this.modules && 'deactive' in this.modules[_panel.moduleName]) ? this.modules[_panel.moduleName] : defaultModule;\n                            module.deactive(moduleContainer, moduleState);\n                        },\n                        destroy: () => {\n                            module = (_panel.moduleName in this.modules && 'destroy' in this.modules[_panel.moduleName]) ? this.modules[_panel.moduleName] : defaultModule;\n                            module.destroy(moduleContainer, moduleState);\n\n                            // 패널 데이터 제거.\n                            setPanel(_panel.panelPath, null);\n                            // 현재 패널 정보를 검사하여 패널 정보를 재 구성합니다.\n                            arrangePanel();\n                        },\n                        remove: () => {\n                            module = (_panel.moduleName in this.modules && 'destroy' in this.modules[_panel.moduleName]) ? this.modules[_panel.moduleName] : defaultModule;\n                            module.destroy(moduleContainer, moduleState);\n\n                            // 패널 데이터 제거.\n                            setPanel(_panel.panelPath, null);\n                            // 현재 패널 정보를 검사하여 패널 정보를 재 구성합니다.\n                            arrangePanel();\n                        },\n                    };\n\n                    // 사용자정의 함수 control.before, control.after에 전달할 인자 = that\n                    let that = {\n                        panel: _panel,\n                        controlType: _control\n                    };\n\n                    // 비동기 처리 상황에 대응하기 위해 runProcessor를 별도 처리\n                    let runProcessor = () => {\n                        processor[_control]();\n                        module = null;\n\n                        if (U.isFunction(cfg.control.after)) {\n                            cfg.control.after.call(that, that);\n                        }\n                    };\n\n                    if (processor[_control]) {\n                        if (U.isFunction(cfg.control.before)) {\n                            cfg.control.before.call(that, that, function () {\n                                runProcessor();\n                            });\n                        }\n                        else {\n                            runProcessor();\n                        }\n                    }\n                };\n\n                /**\n                 * 패널들의 패널 데이터 구조에 맞게 다시 그리기\n                 */\n                const repaintPanels = () => {\n                    const appendProcessor = {\n                        stack($parent, parent, myself, pIndex){\n\n                            let $dom, activeIndex = -1;\n                            myself.panelPath = getPanelPath(parent, pIndex);\n\n                            $dom = jQuery(DOCKER.tmpl.get.call(this, \"stack-panel\", {\n                                name: myself.name,\n                                panelPath: myself.panelPath,\n                                icons: cfg.icons,\n                                disableClosePanel: cfg.disableClosePanel,\n                                disableDragPanel: cfg.disableDragPanel,\n                            }, {}));\n                            $parent.append($dom);\n\n                            if (U.isArray(myself.panels)) {\n                                myself.panels.forEach(function (P, pIndex) {\n                                    if (P.active) activeIndex = pIndex;\n                                });\n                                if (activeIndex === -1) activeIndex = 0;\n                                myself.panels[activeIndex].active = true;\n\n                                myself.panels.forEach(function (P, _pIndex) {\n                                    P.panelIndex = _pIndex;\n                                    appendProcessor[P.type]($dom, myself, P, _pIndex);\n                                });\n                            }\n\n                            $dom = null;\n                            activeIndex = null;\n                        },\n                        panel($parent, parent, myself, pIndex){\n                            let $dom;\n                            myself.panelPath = getPanelPath(parent, pIndex);\n                            myself.$label = jQuery(DOCKER.tmpl.get.call(this, \"panel-label\", {\n                                pIndex: pIndex,\n                                name: myself.name,\n                                panelPath: myself.panelPath,\n                                icons: cfg.icons,\n                                disableClosePanel: cfg.disableClosePanel,\n                                disableDragPanel: cfg.disableDragPanel,\n                            }, {}));\n\n                            if (!myself.$item) {\n                                myself.$item = jQuery('<div data-ax5docker-pane-item=\"' + pIndex + '\" data-ax5docker-pane-id=\"' + getPanelId() + '\" data-ax5docker-path=\"' + myself.panelPath + '\"></div>');\n                            } else {\n                                myself.$item.attr(\"data-ax5docker-path\", myself.panelPath);\n                                myself.$item.attr(\"data-ax5docker-pane-item\", pIndex);\n                            }\n\n                            if (parent && parent.type == \"stack\") {\n                                if (myself.active) {\n                                    if (!myself.builded) controlPanel(myself, \"init\");\n                                    controlPanel(myself, \"active\");\n                                }\n                                $parent.find('[data-ax5docker-pane-tabs]').append(myself.$label);\n                                $parent.find('[data-ax5docker-pane-item-views]').append(myself.$item);\n                            } else {\n                                $dom = jQuery(DOCKER.tmpl.get.call(this, \"stack-panel\", {\n                                    name: myself.name,\n                                    panelPath: myself.panelPath,\n                                    flexGrow: myself.flexGrow,\n                                    icons: cfg.icons,\n                                    disableClosePanel: cfg.disableClosePanel,\n                                    disableDragPanel: cfg.disableDragPanel,\n                                }, {}));\n\n                                if (!myself.builded) controlPanel(myself, \"init\");\n                                controlPanel(myself, \"active\");\n\n                                $dom.find('[data-ax5docker-pane-tabs]').append(myself.$label);\n                                $dom.find('[data-ax5docker-pane-item-views]').append(myself.$item);\n\n                                $parent.append($dom);\n                            }\n\n                            $dom = null;\n                        },\n                        resizeHandle($parent, parent, myself, pIndex){\n                            let $dom = jQuery('<div data-ax5docker-resize-handle=\"' + parent.type + \"/\" + parent.panelPath + \"/\" + pIndex + '\"></div>');\n                            $parent.append($dom);\n                            $dom = null;\n                        },\n                        row($parent, parent, myself, pIndex){\n                            let $dom;\n                            myself.panelPath = getPanelPath(parent, pIndex);\n                            if (parent && parent.type == \"stack\") {\n                                throw \"The 'stack' type child nodes are allowed only for the 'panel' type.\";\n                            }\n                            $dom = jQuery('<div data-ax5docker-pane-axis=\"row\" data-ax5docker-path=\"' + myself.panelPath + '\" style=\"flex-grow: ' + (myself.flexGrow || 1) + ';\"></div>');\n                            $parent.append($dom);\n\n                            if (U.isArray(myself.panels)) {\n                                myself.panels.forEach(function (P, _pIndex) {\n                                    if (_pIndex > 0) appendProcessor[\"resizeHandle\"]($dom, myself, P, _pIndex);\n                                    P.panelIndex = _pIndex;\n                                    appendProcessor[P.type]($dom, myself, P, _pIndex);\n                                });\n                            }\n\n                            $dom = null;\n                        },\n                        column($parent, parent, myself, pIndex){\n                            let $dom;\n                            myself.panelPath = getPanelPath(parent, pIndex);\n                            if (parent && parent.type == \"stack\") {\n                                throw \"The 'stack' type child nodes are allowed only for the 'panel' type.\";\n                            }\n                            $dom = jQuery('<div data-ax5docker-pane-axis=\"column\" data-ax5docker-path=\"' + myself.panelPath + '\" style=\"flex-grow: ' + (myself.flexGrow || 1) + ';\"></div>');\n                            $parent.append($dom);\n\n                            if (U.isArray(myself.panels)) {\n                                myself.panels.forEach(function (P, _pIndex) {\n                                    if (_pIndex > 0) appendProcessor[\"resizeHandle\"]($dom, myself, P, _pIndex);\n                                    P.panelIndex = _pIndex;\n                                    appendProcessor[P.type]($dom, myself, P, _pIndex);\n                                });\n                            }\n\n                            $dom = null;\n                        }\n                    };\n\n                    let $root = jQuery('<div data-ax5docker-panes=\"\"></div>');\n                    if (this.panels[0]) appendProcessor[this.panels[0].type]($root, null, this.panels[0], 0);\n                    this.$target.html($root);\n\n                    this.$target\n                        .off(\"click.ax5docker-pane\")\n                        .on(\"click.ax5docker-pane\", \"[data-ax5docker-pane-tab] .close-icon\", function (e) {\n                            self.removePanel($(this).parents('[data-ax5docker-pane-tab]').attr(\"data-ax5docker-path\"));\n                            U.stopEvent(e);\n                        })\n                        .on(\"click.ax5docker-pane\", \"[data-ax5docker-pane-tab]\", function (e) {\n                            // pane, panelIndex 인자 변경.\n                            let $clickedLabel = jQuery(this);\n                            let pane = getPanel($clickedLabel.parents('[data-ax5docker-pane]').attr(\"data-ax5docker-path\"));\n                            let panelIndex = $clickedLabel.attr(\"data-ax5docker-pane-tab\");\n\n                            if (!$clickedLabel.hasClass(\"active\")) {\n                                changeActiveStackPanel(pane, panelIndex);\n                            }\n\n                            $clickedLabel = null;\n                            pane = null;\n                            panelIndex = null;\n                            U.stopEvent(e);\n                        })\n                        .on(\"click.ax5docker-pane\", \"[data-ax5docker-pane-tabs-more]\", function (e) {\n                            openStackPanelMore($(this).parents('[data-ax5docker-pane]'), e);\n                            U.stopEvent(e);\n                        });\n\n                    this.$target\n                        .off(\"mousedown.ax5docker-pane-resize\")\n                        .off(\"dragstart.ax5docker-pane-resize\")\n                        .on(\"dragstart.ax5docker-pane-resize\", \"[data-ax5docker-pane-tab]\", function (e) {\n                            if (!cfg.disableDragPanel) {\n                                panelTabDragEvent.on(this);\n                            }\n                        })\n                        .on(\"mousedown.ax5docker-pane-resize\", \"[data-ax5docker-resize-handle]\", function (e) {\n                            let datas = this.getAttribute(\"data-ax5docker-resize-handle\").split(/\\//g);\n\n                            // panelResizerEvent.init\n                            self.xvar.mousePosition = getMousePosition(e);\n                            self.xvar.resizerType = datas[0];\n                            self.xvar.resizerPath = datas[1];\n                            self.xvar.resizerIndex = datas[2];\n                            // 주변 패널들\n                            self.xvar.resizer$dom = $(this);\n                            self.xvar.resizerParent$dom = self.xvar.resizer$dom.parent();\n                            self.xvar.resizerPrevGrow = U.number(self.xvar.resizer$dom.prev().css(\"flex-grow\"));\n                            self.xvar.resizerNextGrow = U.number(self.xvar.resizer$dom.next().css(\"flex-grow\"));\n\n                            if (self.xvar.resizerType == \"row\") {\n                                //self.xvar.resizerCanvasWidth = self.xvar.resizerParent$dom.innerWidth();\n                                self.xvar.resizerCanvasWidth = self.xvar.resizer$dom.prev().innerWidth() + self.xvar.resizer$dom.next().innerWidth() + self.xvar.resizer$dom.width();\n                            } else {\n                                //self.xvar.resizerCanvasHeight = self.xvar.resizerParent$dom.innerHeight();\n                                self.xvar.resizerCanvasHeight = self.xvar.resizer$dom.prev().innerHeight() + self.xvar.resizer$dom.next().innerHeight() + self.xvar.resizer$dom.height();\n                            }\n\n                            panelResizerEvent.on(this);\n                            U.stopEvent(e);\n                        })\n                        .on(\"dragstart.ax5docker-pane-resize\", \"[data-ax5docker-resize-handle]\", function (e) {\n                            U.stopEvent(e);\n                            return false;\n                        });\n\n                    // stackPane tabs 스크롤처리\n                    alignStackPane();\n                    $root = null;\n                };\n\n                /**\n                 * 액티브 패널 변경(stack인 상황에서)\n                 * @param pane\n                 * @param panelIndex\n                 * @returns {boolean}\n                 */\n                const changeActiveStackPanel = (pane, panelIndex) => {\n                    let panel = pane.panels[panelIndex];\n\n                    for (let p = 0, pl = pane.panels.length; p < pl; p++) {\n                        if (pane.panels[p].active) {\n                            controlPanel(pane.panels[p], \"deactive\");\n                        }\n                    }\n\n                    if (!panel.builded) controlPanel(panel, \"init\");\n                    controlPanel(panel, \"active\");\n\n                    pane = null;\n                    panelIndex = null;\n                    panel = null;\n                    return this;\n                };\n\n                /**\n                 * stackTab의 더보기 아이콘이 클릭되면~~~\n                 * @param stackPane\n                 * @param e\n                 * @returns {ax5docker}\n                 */\n                const openStackPanelMore = (stackPane, e) => {\n                    let $stackPane = jQuery(stackPane),\n                        panePath = $stackPane.attr(\"data-ax5docker-path\"),\n                        pane = getPanel(panePath);\n\n                    if (this.menu) {\n                        let menuItems = U.map(pane.panels, function (index) {\n                            return {\n                                label: this.name,\n                                index: index,\n                                panePath: panePath\n                            }\n                        });\n\n                        this.menu.setConfig({\n                            items: menuItems,\n                            onClick: function () {\n                                //console.log(pane);\n                                changeActiveStackPanel(getPanel(this.panePath), this.index);\n                            }\n                        });\n\n                        this.menu.popup(e);\n                    } else {\n                        console.log(pane.panels);\n                        throw \"'ax5ui-menu' is required to implement the function.\";\n                    }\n\n                    $stackPane = null;\n                    panePath = null;\n                    pane = null;\n                    return this;\n                };\n\n                /**\n                 * repaintPanels이 작동할 때. 리사이저에 mousedown 이벤트를 연결합니다.\n                 * 발생된 이벤트가 panelResizerEvent.on 을 작동시켜 리사이저를 움직이게 합니다\n                 */\n                const panelResizerEvent = {\n                    \"on\": (_resizer) => {\n                        const $resizer = $(_resizer);\n                        const resizerPositionLeft = $resizer.offset().left;\n                        const dockerTargetOffsetLeft = this.$target.offset().left;\n\n                        jQuery(document.body)\n                            .on(\"mousemove.ax5docker-\" + this.instanceId, function (e) {\n                                let mouseObj = getMousePosition(e);\n                                let da_grow;\n                                if (self.xvar.resizerLived) {\n                                    if (self.xvar.resizerType == \"row\") {\n                                        self.xvar.__da = mouseObj.clientX - self.xvar.mousePosition.clientX;\n                                        da_grow = U.number(self.xvar.__da * 2 / self.xvar.resizerCanvasWidth, {round: 6});\n\n                                        self.xvar.resizer$dom.prev().css({\"flex-grow\": self.xvar.resizerPrevGrow + da_grow});\n                                        self.xvar.resizer$dom.next().css({\"flex-grow\": self.xvar.resizerNextGrow - da_grow});\n                                    } else {\n                                        self.xvar.__da = mouseObj.clientY - self.xvar.mousePosition.clientY;\n                                        da_grow = U.number(self.xvar.__da * 2 / self.xvar.resizerCanvasHeight, {round: 6});\n\n                                        self.xvar.resizer$dom.prev().css({\"flex-grow\": self.xvar.resizerPrevGrow + da_grow});\n                                        self.xvar.resizer$dom.next().css({\"flex-grow\": self.xvar.resizerNextGrow - da_grow});\n                                    }\n                                } else {\n                                    self.xvar.resizerLived = true;\n                                }\n\n                                mouseObj = null;\n                                da_grow = null;\n                            })\n                            .on(\"mouseup.ax5docker-\" + this.instanceId, function (e) {\n                                panelResizerEvent.off();\n                                U.stopEvent(e);\n                            })\n                            .on(\"mouseleave.ax5docker-\" + this.instanceId, function (e) {\n                                panelResizerEvent.off();\n                                U.stopEvent(e);\n                            });\n\n                        jQuery(document.body)\n                            .attr('unselectable', 'on')\n                            .css('user-select', 'none')\n                            .on('selectstart', false);\n                    },\n                    \"off\": () => {\n                        self.xvar.resizerLived = false;\n\n                        if (typeof this.xvar.__da === \"undefined\") {\n\n                        }\n                        else {\n                            let $prevPanel = self.xvar.resizer$dom.prev(),\n                                $nextPanel = self.xvar.resizer$dom.next(),\n                                prevPane = getPanel($prevPanel.attr(\"data-ax5docker-path\")),\n                                nextPane = getPanel($nextPanel.attr(\"data-ax5docker-path\"));\n\n                            prevPane.flexGrow = U.number($prevPanel.css(\"flex-grow\"));\n                            nextPane.flexGrow = U.number($nextPanel.css(\"flex-grow\"));\n\n                            $prevPanel = null;\n                            $nextPanel = null;\n                            prevPane = null;\n                            nextPane = null;\n                        }\n\n                        jQuery(document.body)\n                            .off(\"mousemove.ax5docker-\" + this.instanceId)\n                            .off(\"mouseup.ax5docker-\" + this.instanceId)\n                            .off(\"mouseleave.ax5docker-\" + this.instanceId);\n\n                        jQuery(document.body)\n                            .removeAttr('unselectable')\n                            .css('user-select', 'auto')\n                            .off('selectstart');\n                    }\n                };\n\n                /**\n                 * repaintPanels이 작동할 때. 패널탭에 dragStart 이벤트를 연결합니다.\n                 * 발생된 이벤트가 panelTabDragEvent.on를 작동.\n                 */\n                const panelTabDragEvent = {\n                    \"on\": (dragPanel) => {\n                        if (this.panels[0] && this.panels[0].panels && this.panels[0].panels.length) {\n\n                            this.xvar.dragger = {\n                                dragPanel: dragPanel,\n                                target: null,\n                                dragOverVertical: null,\n                                dragOverHorizontal: null,\n                            };\n\n                            this.$target\n                                .on(\"dragover.ax5docker-\" + this.instanceId, '[data-ax5docker-path]', function (e) {\n                                    // todo : dragover 구현\n                                    // console.log(\"dargover\", getMousePosition(e));\n                                    // console.log(e.target);\n                                    panelTabDragEvent.dragover(this, e);\n                                    U.stopEvent(e);\n                                })\n                                .on(\"drop.ax5docker-\" + this.instanceId, function (e) {\n                                    panelTabDragEvent.off(\"drop\");\n                                    U.stopEvent(e);\n                                })\n                                .on(\"dragend.ax5docker-\" + this.instanceId, function (e) {\n                                    panelTabDragEvent.off();\n                                    U.stopEvent(e);\n                                });\n                        }\n                    },\n                    \"dragover\": (dragoverDom, e) => {\n                        let $dragoverDom = jQuery(dragoverDom);\n                        if (this.xvar.dragger.target == null || this.xvar.dragger.target.get(0) != $dragoverDom.get(0)) {\n\n                            if (this.xvar.dragger.target) this.xvar.dragger.target.removeAttr(\"data-dropper\");\n\n                            this.xvar.dragger.target = $dragoverDom;\n                            this.xvar.dragger.dragOverVertical = null;\n                            this.xvar.dragger.dragOverHorizontal = null;\n                        }\n\n                        // e.target\n                        let box = {};\n                        box = $dragoverDom.offset();\n                        box.width = $dragoverDom.width();\n                        box.height = $dragoverDom.height();\n\n                        let mouse = getMousePosition(e);\n                        let dragOverVertical, dragOverHorizontal;\n                        if ($dragoverDom.attr(\"data-ax5docker-pane-tab\")) {\n                            let halfWidth = box.width / 2;\n                            if (box.left <= mouse.clientX && (box.left + halfWidth) >= mouse.clientX) {\n                                dragOverHorizontal = \"left\";\n                            }\n                            else if ((box.left + halfWidth) <= mouse.clientX && (box.left + halfWidth * 2) >= mouse.clientX) {\n                                dragOverHorizontal = \"right\";\n                            }\n                            if (this.xvar.dragger.dragOverHorizontal != dragOverHorizontal && typeof dragOverHorizontal != \"undefined\") {\n                                this.xvar.dragger.dragOverHorizontal = dragOverHorizontal;\n                                var draggerProcessor = {\n                                    \"left\"($target){\n                                        $target.attr(\"data-dropper\", \"left\");\n                                    },\n                                    \"right\"($target){\n                                        $target.attr(\"data-dropper\", \"right\");\n                                    },\n                                };\n                                if (this.xvar.dragger.dragOverHorizontal in draggerProcessor) {\n                                    draggerProcessor[this.xvar.dragger.dragOverHorizontal](this.xvar.dragger.target);\n                                }\n                            }\n                        }\n                        else if ($dragoverDom.attr(\"data-ax5docker-pane-item\")) {\n                            // panel dragover 포지션 구하기\n                            let threeQuarterHeight = box.height / 3;\n                            let threeQuarterWidth = box.width / 3;\n\n                            if (box.top <= mouse.clientY && (box.top + threeQuarterHeight) >= mouse.clientY) {\n                                dragOverVertical = \"top\";\n                            }\n                            else if ((box.top + threeQuarterHeight) <= mouse.clientY && (box.top + threeQuarterHeight * 2) >= mouse.clientY) {\n                                dragOverVertical = \"middle\";\n                            }\n                            else if ((box.top + threeQuarterHeight * 2) <= mouse.clientY && (box.top + threeQuarterHeight * 3) >= mouse.clientY) {\n                                dragOverVertical = \"bottom\";\n                            }\n\n                            if (box.left <= mouse.clientX && (box.left + threeQuarterWidth) >= mouse.clientX) {\n                                dragOverHorizontal = \"left\";\n                            }\n                            else if ((box.left + threeQuarterWidth) <= mouse.clientX && (box.left + threeQuarterWidth * 2) >= mouse.clientX) {\n                                dragOverHorizontal = \"center\";\n                            }\n                            else if ((box.left + threeQuarterWidth * 2) <= mouse.clientX && (box.left + threeQuarterWidth * 3) >= mouse.clientX) {\n                                dragOverHorizontal = \"right\";\n                            }\n\n                            if (this.xvar.dragger.dragOverVertical != dragOverVertical || this.xvar.dragger.dragOverHorizontal != dragOverHorizontal) {\n                                this.xvar.dragger.dragOverVertical = dragOverVertical;\n                                this.xvar.dragger.dragOverHorizontal = dragOverHorizontal;\n\n                                var draggerProcessor = {\n                                    \"left-top\"($target){\n                                        $target.attr(\"data-dropper\", \"left\");\n                                    },\n                                    \"right-top\"($target){\n                                        $target.attr(\"data-dropper\", \"right\");\n                                    },\n                                    \"center-top\"($target){\n                                        $target.attr(\"data-dropper\", \"top\");\n                                    },\n                                    \"left-middle\"($target){\n                                        $target.attr(\"data-dropper\", \"left\");\n                                    },\n                                    \"right-middle\"($target){\n                                        $target.attr(\"data-dropper\", \"right\");\n                                    },\n                                    \"center-middle\"($target){\n                                        $target.attr(\"data-dropper\", \"center\");\n                                    },\n                                    \"left-bottom\"($target){\n                                        $target.attr(\"data-dropper\", \"left\");\n                                    },\n                                    \"right-bottom\"($target){\n                                        $target.attr(\"data-dropper\", \"right\");\n                                    },\n                                    \"center-bottom\"($target){\n                                        $target.attr(\"data-dropper\", \"bottom\");\n                                    },\n                                };\n                                if (this.xvar.dragger.dragOverHorizontal + \"-\" + this.xvar.dragger.dragOverVertical in draggerProcessor) {\n                                    draggerProcessor[this.xvar.dragger.dragOverHorizontal + \"-\" + this.xvar.dragger.dragOverVertical](this.xvar.dragger.target);\n                                }\n                            }\n                        }\n                    },\n                    \"off\": (isDrop) => {\n                        if (isDrop) {\n                            let dragPanel = getPanel(this.xvar.dragger.dragPanel.getAttribute(\"data-ax5docker-path\"));\n                            //let targetPanel = getPanel(this.xvar.dragger.target.attr(\"data-ax5docker-path\"));\n                            let appendType = [];\n\n                            if (this.xvar.dragger.dragOverHorizontal) appendType.push(this.xvar.dragger.dragOverHorizontal);\n                            if (this.xvar.dragger.dragOverVertical) appendType.push(this.xvar.dragger.dragOverVertical);\n\n                            this.appendPanel(dragPanel, this.xvar.dragger.target.attr(\"data-ax5docker-path\"), appendType);\n                            dragPanel = null;\n                        }\n\n                        this.$target\n                            .off(\"dragover.ax5docker-\" + this.instanceId)\n                            .off(\"drop.ax5docker-\" + this.instanceId)\n                            .off(\"dragend.ax5docker-\" + this.instanceId);\n\n                        this.xvar.dragger.target.removeAttr(\"data-dropper\");\n                    }\n                };\n\n                /**\n                 * stack type panel resize되면 탭 스크롤 처리 관련 처리\n                 */\n                const debounceFn = ax5.util.debounce(function (fn) {\n                    fn();\n                }, cfg.animateTime);\n\n                /**\n                 * stackPane이 리사이즈 되면 탭을 스크롤여부를 판단해야 합니다.\n                 */\n                const alignStackPane = () => {\n                    debounceFn((function () {\n                        this.$target.find('[data-ax5docker-pane-tabs]').each(function () {\n                            let $this = jQuery(this).parent();\n                            if (this.scrollWidth > this.clientWidth) {\n                                $this.addClass(\"tabs-scrolled\");\n                            } else {\n                                $this.removeClass(\"tabs-scrolled\");\n                            }\n                            $this = null;\n                        });\n                    }).bind(this));\n                };\n\n                /**\n                 * 패널중에 null이 된 요소를 찾아 panels를 정리 합니다.\n                 * @returns {*}\n                 */\n                const arrangePanel = () => {\n                    // console.log(this.$target.find('[data-ax5docker-pane]'));\n                    const panels = [];\n                    const processor = {\n                        stack(myself){\n                            if (!U.isArray(myself.panels)) return false;\n\n                            let newObj = {\n                                type: \"stack\",\n                                panels: []\n                            };\n\n                            myself.panels.forEach(function (P, _pIndex) {\n                                if (P) {\n                                    let _p = processor[P.type](P);\n                                    if (_p) newObj.panels.push(_p);\n                                    _p = null;\n                                }\n                            });\n\n                            if (newObj.panels.length == 0) {\n                                return null;\n                            } else if (newObj.panels.length < 2) {\n                                newObj = newObj.panels[0];\n                            }\n\n                            return newObj;\n                        },\n                        panel(myself){\n                            //console.log(myself);\n                            return myself;\n                        },\n                        row(myself){\n\n                            if (!U.isArray(myself.panels)) return false;\n\n                            let newObj = {\n                                type: \"row\",\n                                panels: []\n                            };\n\n                            myself.panels.forEach(function (P, _pIndex) {\n                                if (P) {\n                                    let _p = processor[P.type](P);\n                                    if (_p) newObj.panels.push(_p);\n                                    _p = null;\n                                }\n                            });\n\n                            if (newObj.panels.length == 0) {\n                                return null;\n                            } else if (newObj.panels.length < 2) {\n                                newObj = newObj.panels[0];\n                            }\n\n                            return newObj;\n                        },\n                        column(myself){\n                            if (!U.isArray(myself.panels)) return false;\n\n                            let newObj = {\n                                type: \"column\",\n                                panels: []\n                            };\n\n                            myself.panels.forEach(function (P, _pIndex) {\n                                if (P) {\n                                    let _p = processor[P.type](P);\n                                    if (_p) newObj.panels.push(_p);\n                                    _p = null;\n                                }\n                            });\n\n                            if (newObj.panels.length == 0) {\n                                return null;\n                            } else if (newObj.panels.length < 2) {\n                                newObj = newObj.panels[0];\n                            }\n\n                            return newObj;\n                        },\n                    };\n\n                    if (this.panels[0]) {\n                        this.panels[0] = processor[this.panels[0].type](this.panels[0]);\n                    } else {\n                        this.panels = [];\n                    }\n\n                    repaintPanels();\n                };\n\n                /**\n                 * @method ax5docker.setConfig\n                 * @param {Object} config\n                 * @param {Element} config.target\n                 * @param {Array} config.panels\n                 * @param {Object} [config.icons]\n                 * @param {String} [config.icons.close]\n                 * @param {String} [config.icons.more]\n                 * @param {Boolean} [config.disableClosePanel=false]\n                 * @param {Boolean} [config.disableDragPanel=false]\n                 * @param {Object} [config.control]\n                 * @param {Function} [config.control.before]\n                 * @param {Function} [config.control.after]\n                 * @param {Object} [config.menu]\n                 * @param {String} [config.menu.theme=\"default\"]\n                 * @param {String} [config.menu.position=\"absolute\"]\n                 * @param {Object} [config.menu.icons]\n                 * @param {String} [config.menu.icons.arrow]\n                 * @example\n                 * ```js\n                 * var myDocker = new ax5.ui.docker();\n                 * myDocker.setConfig({\n                 *      target: $('[data-ax5docker=\"docker1\"]'),\n                 *      panels: [\n                 *          {\n                 *              type: \"panel\",\n                 *              name: \"panel name\",\n                 *              moduleName: \"content\",\n                 *              moduleState:{\n                 *                  data: \"data1\"\n                 *              }\n                 *          }\n                 *      ]\n                 * });\n                 * ```\n                 */\n                this.init = function (_config) {\n                    cfg = jQuery.extend(true, {}, cfg, _config);\n                    if (!cfg.target) {\n                        console.log(ax5.info.getError(\"ax5docker\", \"401\", \"init\"));\n                        return this;\n                    }\n                    // memory target\n                    this.$target = jQuery(cfg.target);\n                    // set panels\n                    this.panels = cfg.panels || [];\n                    // event Functions\n                    this.onStateChanged = cfg.onStateChanged;\n                    this.onClick = cfg.onClick;\n                    this.onLoad = cfg.onLoad;\n                    this.onDataChanged = cfg.onDataChanged;\n\n                    if (ax5.ui.menu) {\n                        this.menu = new ax5.ui.menu({\n                            theme: 'default',\n                            position: \"absolute\",\n                            icons: {\n                                'arrow': '▸'\n                            }\n                        });\n                    }\n\n                    jQuery(window).bind(\"resize.ax5docker-\" + this.id, function () {\n                        // stackPane tabs 스크롤처리\n                        alignStackPane();\n                    });\n                };\n\n                /**\n                 * @method ax5docker.setPanels\n                 * @returns {ax5docker}\n                 */\n                this.setPanels = function (_panels) {\n                    // set panels\n                    this.panels = _panels || [];\n\n                    // 패널 다시 그리기\n                    repaintPanels();\n                    return this;\n                };\n\n                /**\n                 * @method ax5docker.addModule\n                 * @param modules\n                 * @returns {ax5docker}\n                 */\n                this.addModule = function (modules) {\n                    if (U.isObject(modules)) {\n                        jQuery.extend(true, this.modules, modules);\n                    }\n                    return this;\n                };\n\n                /**\n                 * repaint panels of docker\n                 * @method ax5docker.repaint\n                 * @returns {ax5docker}\n                 */\n                this.repaint = function () {\n                    // 패널 다시 그리기\n                    repaintPanels();\n                    return this;\n                };\n\n                /**\n                 * @method ax5docker.addPanel\n                 * @param {String} _addPath - Position path to add panel\n                 * @param _addType\n                 * @param _panel\n                 * @param _panelIndex\n                 * @returns {ax5docker}\n                 * @example\n                 * ```js\n                 * myDocker.addPanel('0.1', 'stack', {type:'panel', name:'addPanel', moduleName: 'content'});\n                 *\n                 * ```\n                 */\n                this.addPanel = function (_addPath, _addType, _panel, _panelIndex) {\n                    let addPath = \"\";\n                    if (_addPath == \"undefined\") addPath = \"0\";\n                    addPath = _addPath\n                        .replace(/[a-zA-Z\\[\\]]+/g, \"\")\n                        .replace(/(\\d+)/g, function (a, b) {\n                            return \"panels[\" + a + \"]\";\n                        });\n\n                    let pane = getPanel(addPath);\n                    let parent = getPanelParent(pane);\n                    if (parent && parent.type == \"stack\") {\n                        // 부모패널로 ~\n                        //console.log(addPath, _addPath);\n                        pane = parent;\n                        addPath = pane.panelPath;\n                    }\n                    let panelProcessor = {\n                        \"stack\"(_pane, _addType, _panel, _panelIndex){\n                            let copyPanel = jQuery.extend({}, _pane),\n                                addProcessor = {\n                                    \"stack\"(_pane, _panel){\n                                        _pane.panels.push(_panel);\n                                        arrangePanel();\n                                    },\n                                    \"stack-left\"(_pane, _panel){\n                                        //_pane.panels.push(_panel);\n                                        _pane.panels.splice(_panelIndex, 0, _panel);\n                                        arrangePanel();\n                                    },\n                                    \"stack-right\"(_pane, _panel){\n                                        //_pane.panels.push(_panel);\n                                        _pane.panels.splice(Number(_panelIndex) + 1, 0, _panel);\n                                        arrangePanel();\n                                    },\n                                    \"row-left\"(_pane, _panel){\n                                        let parentPath = U.left(addPath, \".\");\n                                        let parentPane = getPanel(parentPath);\n                                        if (parentPane && parentPane.type == \"row\") {\n                                            this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                        } else {\n                                            _pane = setPanel(addPath, {\n                                                type: \"row\",\n                                                panels: []\n                                            });\n                                            _pane.panels.push(_panel);\n                                            _pane.panels.push(copyPanel);\n                                            arrangePanel();\n                                        }\n                                    },\n                                    \"row-right\"(_pane, _panel){\n                                        let parentPath = U.left(addPath, \".\");\n                                        let parentPane = getPanel(parentPath);\n                                        if (parentPane && parentPane.type == \"row\") {\n                                            this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                        } else {\n                                            _pane = setPanel(addPath, {\n                                                type: \"row\",\n                                                panels: []\n                                            });\n                                            _pane.panels.push(copyPanel);\n                                            _pane.panels.push(_panel);\n                                            arrangePanel();\n                                        }\n                                    },\n                                    \"column-top\"(_pane, _panel){\n                                        let parentPath = U.left(addPath, \".\");\n                                        let parentPane = getPanel(parentPath);\n                                        if (parentPane && parentPane.type == \"column\") {\n                                            this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                        } else {\n                                            _pane = setPanel(addPath, {\n                                                type: \"column\",\n                                                panels: []\n                                            });\n                                            _pane.panels.push(_panel);\n                                            _pane.panels.push(copyPanel);\n                                            arrangePanel();\n                                        }\n                                    },\n                                    \"column-bottom\"(_pane, _panel){\n                                        let parentPath = U.left(addPath, \".\");\n                                        let parentPane = getPanel(parentPath);\n                                        if (parentPane && parentPane.type == \"column\") {\n                                            this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                        } else {\n                                            _pane = setPanel(addPath, {\n                                                type: \"column\",\n                                                panels: []\n                                            });\n                                            _pane.panels.push(copyPanel);\n                                            _pane.panels.push(_panel);\n                                            arrangePanel();\n                                        }\n                                    }\n                                };\n                            if (_addType in addProcessor) {\n                                addProcessor[_addType].call(this, _pane, _panel);\n                            }\n\n                            copyPanel = null;\n                            addProcessor = null;\n                        },\n                        \"row\"(_pane, _addType, _panel, _panelIndex){\n                            let copyPanel = jQuery.extend({}, _pane),\n                                addProcessor = {\n                                    \"stack\"(_pane, _panel){\n                                        // 처리 할 수 없는 상황 첫번째 자식을 찾아 재 요청\n                                        if (_pane.panels[0] && _pane.panels[0].panelPath) {\n                                            this.addPanel(_pane.panels[0].panelPath, _addType, _panel);\n                                        }\n                                    },\n                                    \"row-left\"(_pane, _panel, _panelIndex){\n                                        let parentPath = U.left(addPath, \".\");\n                                        let parentPane = getPanel(parentPath);\n                                        if (parentPane && parentPane.type == \"row\") {\n                                            _pane.panels.splice(_panelIndex, 0, _panel);\n                                            arrangePanel();\n                                        } else {\n                                            _pane = setPanel(addPath, {\n                                                type: \"row\",\n                                                panels: []\n                                            });\n                                            _pane.panels.push(_panel);\n                                            _pane.panels.push(copyPanel);\n                                            arrangePanel();\n                                        }\n                                    },\n                                    \"row-right\"(_pane, _panel, _panelIndex){\n                                        let parentPath = U.left(addPath, \".\");\n                                        let parentPane = getPanel(parentPath);\n                                        if (parentPane && parentPane.type == \"row\") {\n                                            _pane.panels.splice(_panelIndex + 1, 0, _panel);\n                                            arrangePanel();\n                                        } else {\n                                            _pane = setPanel(addPath, {\n                                                type: \"row\",\n                                                panels: []\n                                            });\n                                            _pane.panels.push(copyPanel);\n                                            _pane.panels.push(_panel);\n                                            arrangePanel();\n                                        }\n                                    },\n                                    \"column-top\"(_pane, _panel, _panelIndex){\n                                        let parentPath = U.left(addPath, \".\");\n                                        let parentPane = getPanel(parentPath);\n                                        if (parentPane && parentPane.type == \"column\") {\n                                            this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                        } else {\n                                            _pane = setPanel(addPath, {\n                                                type: \"column\",\n                                                panels: []\n                                            });\n                                            _pane.panels.push(_panel);\n                                            _pane.panels.push(copyPanel);\n                                            arrangePanel();\n                                        }\n                                    },\n                                    \"column-bottom\"(_pane, _panel, _panelIndex){\n                                        let parentPath = U.left(addPath, \".\");\n                                        let parentPane = getPanel(parentPath);\n                                        if (parentPane && parentPane.type == \"column\") {\n                                            this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                        } else {\n                                            _pane = setPanel(addPath, {\n                                                type: \"column\",\n                                                panels: []\n                                            });\n                                            _pane.panels.push(copyPanel);\n                                            _pane.panels.push(_panel);\n                                            arrangePanel();\n                                        }\n                                    }\n                                };\n                            if (_addType in addProcessor) {\n                                addProcessor[_addType].call(this, _pane, _panel, _panelIndex);\n                            }\n\n                            addProcessor = null;\n                            copyPanel = null;\n                        },\n                        \"column\"(_pane, _addType, _panel, _panelIndex){\n                            let copyPanel = jQuery.extend({}, _pane),\n                                addProcessor = {\n                                    \"stack\"(_pane, _panel){\n                                        if (_pane.panels[0] && _pane.panels[0].panelPath) {\n                                            this.addPanel(_pane.panels[0].panelPath, _addType, _panel);\n                                        }\n                                    },\n                                    \"row-left\"(_pane, _panel){\n                                        let parentPath = U.left(addPath, \".\");\n                                        let parentPane = getPanel(parentPath);\n                                        if (parentPane && parentPane.type == \"row\") {\n                                            this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                        } else {\n                                            _pane = setPanel(addPath, {\n                                                type: \"row\",\n                                                panels: []\n                                            });\n                                            _pane.panels.push(_panel);\n                                            _pane.panels.push(copyPanel);\n                                            arrangePanel();\n                                        }\n                                    },\n                                    \"row-right\"(_pane, _panel){\n                                        let parentPath = U.left(addPath, \".\");\n                                        let parentPane = getPanel(parentPath);\n                                        if (parentPane && parentPane.type == \"row\") {\n                                            this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                        } else {\n                                            _pane = setPanel(addPath, {\n                                                type: \"row\",\n                                                panels: []\n                                            });\n                                            _pane.panels.push(copyPanel);\n                                            _pane.panels.push(_panel);\n                                            arrangePanel();\n                                        }\n                                    },\n                                    \"column-top\"(_pane, _panel){\n                                        _pane.panels.splice(_panelIndex, 0, _panel);\n                                        arrangePanel();\n                                    },\n                                    \"column-bottom\"(_pane, _panel){\n                                        _pane.panels.splice(_panelIndex + 1, 0, _panel);\n                                        arrangePanel();\n                                    }\n                                };\n                            if (_addType in addProcessor) {\n                                addProcessor[_addType].call(this, _pane, _panel);\n                            }\n\n                            addProcessor = null;\n                            copyPanel = null;\n                        },\n                        \"panel\"(_pane, _addType, _panel){\n                            let copyPanel = jQuery.extend({}, _pane),\n                                addProcessor = {\n                                    \"stack\"(_pane, _panel){\n                                        // _pane stack으로 재구성\n                                        _pane = setPanel(addPath, {\n                                            type: \"stack\",\n                                            panels: []\n                                        });\n                                        _pane.panels.push(copyPanel);\n                                        _pane.panels.push(_panel);\n                                        arrangePanel();\n                                    },\n                                    \"stack-left\"(_pane, _panel){\n                                        // _pane stack으로 재구성\n                                        _pane = setPanel(addPath, {\n                                            type: \"stack\",\n                                            panels: []\n                                        });\n                                        _pane.panels.push(_panel);\n                                        _pane.panels.push(copyPanel);\n                                        arrangePanel();\n                                    },\n                                    \"stack-right\"(_pane, _panel){\n                                        // _pane stack으로 재구성\n                                        _pane = setPanel(addPath, {\n                                            type: \"stack\",\n                                            panels: []\n                                        });\n                                        _pane.panels.push(copyPanel);\n                                        _pane.panels.push(_panel);\n                                        arrangePanel();\n                                    },\n                                    \"row-left\"(_pane, _panel){\n                                        let parentPath = U.left(addPath, \".\");\n                                        let parentPane = getPanel(parentPath);\n                                        if (parentPane && parentPane.type == \"row\") {\n                                            this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                        } else {\n                                            _pane = setPanel(addPath, {\n                                                type: \"row\",\n                                                panels: []\n                                            });\n                                            _pane.panels.push(_panel);\n                                            _pane.panels.push(copyPanel);\n                                            arrangePanel();\n                                        }\n                                    },\n                                    \"row-right\"(_pane, _panel){\n                                        let parentPath = U.left(addPath, \".\");\n                                        let parentPane = getPanel(parentPath);\n                                        if (parentPane && parentPane.type == \"row\") {\n                                            this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                        } else {\n                                            _pane = setPanel(addPath, {\n                                                type: \"row\",\n                                                panels: []\n                                            });\n                                            _pane.panels.push(copyPanel);\n                                            _pane.panels.push(_panel);\n                                            arrangePanel();\n                                        }\n                                    },\n                                    \"column-top\"(_pane, _panel){\n                                        let parentPath = U.left(addPath, \".\");\n                                        let parentPane = getPanel(parentPath);\n                                        if (parentPane && parentPane.type == \"column\") {\n                                            this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                        } else {\n                                            _pane = setPanel(addPath, {\n                                                type: \"column\",\n                                                panels: []\n                                            });\n                                            _pane.panels.push(_panel);\n                                            _pane.panels.push(copyPanel);\n                                            arrangePanel();\n                                        }\n                                    },\n                                    \"column-bottom\"(_pane, _panel){\n                                        let parentPath = U.left(addPath, \".\");\n                                        let parentPane = getPanel(parentPath);\n                                        if (parentPane && parentPane.type == \"column\") {\n                                            this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                        } else {\n                                            _pane = setPanel(addPath, {\n                                                type: \"column\",\n                                                panels: []\n                                            });\n                                            _pane.panels.push(copyPanel);\n                                            _pane.panels.push(_panel);\n                                            arrangePanel();\n                                        }\n                                    }\n                                };\n\n                            if (_addType in addProcessor) {\n\n                                addProcessor[_addType].call(this, _pane, _panel);\n                            }\n\n                            copyPanel = null;\n                            addProcessor = null;\n                        }\n                    };\n\n                    panelProcessor[pane.type].call(this, pane, _addType, _panel, _panelIndex);\n                    return this;\n                };\n\n                /**\n                 * 패널 삭제하기\n                 * @method ax5docker.removePanel\n                 * @param clickedLabel\n                 * @returns {ax5docker}\n                 */\n                this.removePanel = function (panelPath) {\n                    let panel = getPanel(panelPath);\n\n                    controlPanel(panel, \"destroy\");\n\n                    panel = null;\n                    return this;\n                };\n\n                /**\n                 * @method ax5docker.appendPanel\n                 * @param _panel\n                 * @param _appendPath\n                 * @param _appendType\n                 * @returns {ax5docker}\n                 */\n                this.appendPanel = function (_panel, _appendPath, _appendType) {\n                    //console.info(_panel);\n                    //console.info(_appendPath);\n\n                    let copiedPanel = $.extend({}, _panel, {panelPath: \"\"}),\n                        addType;\n                    let removePanelPath = _panel.panelPath;\n                    let appendPanelIndex = U.right(_appendPath, \".\").replace(/\\D/g, \"\");\n\n                    if (_appendType.length == 1) { // stack\n                        addType = \"stack-\" + _appendType[0];\n                        copiedPanel.active = false;\n                        copiedPanel.$item.removeClass(\"active\");\n                        controlPanel(copiedPanel, \"deactive\");\n                    } else {\n                        switch (_appendType[0] + \"-\" + _appendType[1]) {\n                            case \"left-top\":\n                                addType = \"row-left\";\n                                break;\n                            case \"left-middle\":\n                                addType = \"row-left\";\n                                break;\n                            case \"left-bottom\":\n                                addType = \"row-left\";\n                                break;\n                            case \"center-top\":\n                                addType = \"column-top\";\n                                break;\n                            case \"center-middle\":\n                                addType = \"stack\";\n                                copiedPanel.active = false;\n                                copiedPanel.$item.removeClass(\"active\");\n                                appendPanelIndex = undefined;\n                                controlPanel(copiedPanel, \"deactive\");\n                                break;\n                            case \"center-bottom\":\n                                addType = \"column-bottom\";\n                                break;\n                            case \"right-top\":\n                                addType = \"row-right\";\n                                break;\n                            case \"right-middle\":\n                                addType = \"row-right\";\n                                break;\n                            case \"right-bottom\":\n                                addType = \"row-right\";\n                                break;\n                        }\n                    }\n\n                    if (_panel.panelPath === _appendPath) {\n                        // 부모레벨로 이동\n                        _appendPath = U.left(_appendPath, \".\");\n                    }\n                    // todo : deactive call\n\n                    setPanel(removePanelPath, null);\n                    this.addPanel(_appendPath, addType, copiedPanel, appendPanelIndex);\n\n                    copiedPanel = null;\n                    return this;\n                };\n\n                // 클래스 생성자\n                this.main = (function () {\n                    UI.docker_instance = UI.docker_instance || [];\n                    UI.docker_instance.push(this);\n\n                    if (arguments && U.isObject(arguments[0])) {\n                        this.setConfig(arguments[0]);\n                    }\n                }).apply(this, arguments);\n\n            };\n\n            return ax5docker;\n        })()\n    );\n\n    DOCKER = ax5.ui.docker;\n})();","// ax5.ui.docker.tmpl\n(function () {\n\n    let DOCKER = ax5.ui.docker;\n\n    let stack_panel = function () {\n        return `<div data-ax5docker-pane=\"\" data-ax5docker-path=\"{{panelPath}}\" style=\"flex-grow: {{#flexGrow}}{{.}}{{/flexGrow}}{{^flexGrow}}1{{/flexGrow}};\">\n    <ul data-ax5docker-pane-tabs=\"\"></ul>\n    <div data-ax5docker-pane-tabs-more=\"\">{{{icons.more}}}</div>\n    <div data-ax5docker-pane-item-views=\"\"></div>\n</div>`;\n    };\n\n    let panel_label = function () {\n        return `<li data-ax5docker-pane-tab=\"{{pIndex}}\" data-ax5docker-path=\"{{panelPath}}\">\n    <div class=\"title\">{{{name}}}</div>\n    {{^disableClosePanel}}<div class=\"close-icon\">{{{icons.close}}}</div>{{/disableClosePanel}}\n</li>`;\n    };\n\n    DOCKER.tmpl = {\n        \"stack-panel\": stack_panel,\n        \"panel-label\": panel_label,\n\n        get: function (tmplName, data, columnKeys) {\n            return ax5.mustache.render(DOCKER.tmpl[tmplName].call(this, columnKeys), data);\n        }\n    };\n\n})();"]}