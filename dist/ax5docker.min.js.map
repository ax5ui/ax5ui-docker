{"version":3,"sources":["ax5docker.js","ax5docker-tmpl.js"],"names":["UI","ax5","ui","U","util","DOCKER","addClass","className","version","ax5docker","_this","this","self","cfg","instanceId","getGuid","config","theme","animateTime","columnKeys","control","icons","close","more","disableClosePanel","disableDragPanel","xvar","menu","panels","panelId","modules","getPanelId","defaultModule","init","container","state","html","name","active","deactive","destroy","getPanelPath","parent","pIndex","paths","panelPath","push","join","getPanel","_panelPath","path","_path","isArray","concat","split","forEach","n","replace","Function","call","e","getPanelParent","_panel","substr","lastIndexOf","console","log","setPanel","_value","getMousePosition","mouseObj","originalEvent","changedTouches","clientX","pageX","clientY","pageY","controlPanel","_control","moduleState","jQuery","extend","moduleContainer","$element","$item","module","processor","builded","moduleName","$label","$pane","get","clientWidth","scrollWidth","animate","scrollLeft","position","left","removeClass","arrangePanel","that","panel","controlType","runProcessor","isFunction","after","before","repaintPanels","appendProcessor","stack","$parent","myself","$dom","activeIndex","tmpl","append","P","_pIndex","panelIndex","type","find","flexGrow","resizeHandle","row","column","$root","$target","off","on","closePanel","$","parents","stopEvent","$clickedLabel","pane","attr","hasClass","changeActiveStackPanel","openStackPanelMore","panelTabDragEvent","datas","getAttribute","mousePosition","resizerType","resizerPath","resizerIndex","resizer$dom","resizerParent$dom","resizerPrevGrow","number","prev","css","resizerNextGrow","next","resizerCanvasWidth","innerWidth","width","resizerCanvasHeight","innerHeight","height","panelResizerEvent","alignStackPane","p","pl","length","clickedLabel","stackPane","$stackPane","panePath","menuItems","map","index","label","setConfig","items","onClick","popup","_resizer","$resizer","offset","document","body","da_grow","resizerLived","__da","round","flex-grow","$prevPanel","$nextPanel","prevPane","nextPane","removeAttr","dragPanel","dragger","target","dragOverVertical","dragOverHorizontal","dragover","dragoverDom","$dragoverDom","box","mouse","halfWidth","draggerProcessor","right","threeQuarterHeight","threeQuarterWidth","top","left-top","right-top","center-top","left-middle","right-middle","center-middle","left-bottom","right-bottom","center-bottom","isDrop","appendType","appendPanel","debounceFn","debounce","fn","each","$this","bind","newObj","_p","_config","onStateChanged","onLoad","onDataChanged","arrow","window","id","info","getError","setPanels","_panels","addModule","isObject","repaint","addPanel","_addPath","_addType","_panelIndex","addPath","a","b","panelProcessor","_pane","copyPanel","addProcessor","row-left","parentPath","parentPane","row-right","column-top","column-bottom","splice","_appendPath","_appendType","main","docker_instance","arguments","apply","docker","stack_panel","panel_label","stack-panel","panel-label","tmplName","data","mustache","render"],"mappings":"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","file":"ax5docker.min.js","sourcesContent":["/*\n * Copyright (c) 2017. tom@axisj.com\n * - github.com/thomasjang\n * - www.axisj.com\n */\n\n(function () {\n\n\n    const UI = ax5.ui,\n        U = ax5.util;\n\n    let DOCKER;\n\n    UI.addClass({\n        className: \"docker\",\n        version: \"${VERSION}\"\n    }, (function () {\n\n        /**\n         * @class ax5docker\n         * @classdesc\n         * @author tom@axisj.com\n         * @example\n         * ```\n         * var ax5docker = new ax5.ui.ax5docker();\n         * ```\n         */\n        let ax5docker = function () {\n            let self = this,\n                cfg;\n\n            this.instanceId = ax5.getGuid();\n            this.config = {\n                theme: 'default',\n                animateTime: 250,\n                columnKeys: {},\n                control: {},\n                icons: {\n                    close: 'X',\n                    more: '...'\n                },\n                disableClosePanel: false,\n                disableDragPanel: false,\n            };\n            this.xvar = {};\n            this.menu = null;\n\n            // 패널 정보\n            this.panels = [];\n            this.panelId = 0;\n\n            // 패널의 컨텐츠 모듈\n            this.modules = {};\n\n            cfg = this.config;\n\n            const getPanelId = () => {\n                return this.panelId++;\n            };\n\n            /**\n             * defaultModule은 패널의 모듈이 정의되지 않은 경우를 위해 준비된 오브젝트\n             * @type {{init: ((container, state)), active: ((container, state)), deactive: ((container, state)), destroy: ((container, state))}}\n             */\n            const defaultModule = {\n                init(container, state){\n                    container[\"$element\"].html(state.name);\n                },\n                active(container, state){\n\n                },\n                deactive(container, state){\n\n                },\n                destroy(container, state){\n\n                }\n            };\n\n            /**\n             * 부모패널과 패널인덱스 값으로 패널 패스를 구합니다.\n             * @param parent\n             * @param pIndex\n             * @returns {string}\n             */\n            const getPanelPath = (parent, pIndex) => {\n                let paths = [];\n                if (parent && typeof parent.panelPath !== \"undefined\") {\n                    paths.push(parent.panelPath);\n                }\n\n                paths.push('panels[' + (pIndex || 0) + ']');\n                return paths.join(\".\");\n            };\n\n            /**\n             * 패널패스를 이용하여 패널을 가져옵니다\n             * @param _panelPath\n             * @returns {*}\n             */\n            const getPanel = (_panelPath) => {\n                let path = [],\n                    _path = (U.isArray(_panelPath)) ? [].concat(_panelPath) : [].concat(_panelPath.split(/[\\.\\[\\]]/g));\n\n                _path.forEach(function (n) {\n                    if (n !== \"\") path.push(\"[\\\"\" + n.replace(/['\\\"]/g, \"\") + \"\\\"]\");\n                });\n\n                try {\n                    return (Function(\"\", \"return this\" + path.join('') + \";\")).call(this);\n                } catch (e) {\n                    return;\n                }\n            };\n\n            /**\n             * 패널을 이용하여 패널의 부모 패널을 가져옵니다\n             * @param _panel\n             */\n            const getPanelParent = (_panel) => {\n                let _path = _panel.panelPath.substr(0, _panel.panelPath.lastIndexOf(\".\"));\n                try {\n                    return (Function(\"\", \"return this.\" + _path + \";\")).call(this);\n                } catch (e) {\n                    console.log(e);\n                    return;\n                }\n            };\n\n            /**\n             * 패널패스를 이용하여 패널오브젝트에 값을 부여합니다.\n             * @param _panelPath\n             * @param _value\n             * @returns {*}\n             */\n            const setPanel = (_panelPath, _value) => {\n                let path = [],\n                    _path = (U.isArray(_panelPath)) ? [].concat(_panelPath) : [].concat(_panelPath.split(/[\\.\\[\\]]/g));\n\n                _path.forEach(function (n) {\n                    if (n !== \"\") path.push(\"[\\\"\" + n.replace(/['\\\"]/g, \"\") + \"\\\"]\");\n                });\n\n                return (Function(\"val\", \"return this\" + path.join('') + \" = val;\")).call(this, _value);\n            };\n\n            /**\n             * get mouse position\n             * @param e\n             * @returns {{clientX, clientY}}\n             */\n            const getMousePosition = (e) => {\n                let mouseObj, originalEvent = (e.originalEvent) ? e.originalEvent : e;\n                mouseObj = ('changedTouches' in originalEvent) ? originalEvent.changedTouches[0] : originalEvent;\n                // clientX, Y 쓰면 스크롤에서 문제 발생\n                return {\n                    clientX: mouseObj.pageX,\n                    clientY: mouseObj.pageY\n                }\n            };\n\n            /**\n             * 패널의 모듈이 초기화, 활성화, 비활성, 제거 되는 일들을 제어하는 함수.\n             * 모든 컨트롤은 실행되기전에 사용자가 정의한 control.before 함수의 결과에 따라 실행 여부를 결정합니다. 사용자가 control.before를 정의하지 않으면 무조건 실행합니다.\n             * @param {Object} _panel\n             * @param {String} _control - \"init\",\"active\",\"deactive\",\"destroy\"\n             */\n            const controlPanel = (_panel, _control) => {\n                let moduleState = jQuery.extend(_panel.moduleState, {\n                        name: _panel.name\n                    }),\n                    moduleContainer = {\n                        '$element': _panel.$item\n                    },\n                    module;\n\n                let processor = {\n                    init: () => {\n                        _panel.builded = true;\n                        module = (_panel.moduleName in this.modules && 'init' in this.modules[_panel.moduleName]) ? this.modules[_panel.moduleName] : defaultModule;\n                        module.init(moduleContainer, moduleState);\n                    },\n                    active: () => {\n                        _panel.active = true;\n                        _panel.$label.addClass(\"active\");\n                        _panel.$item.addClass(\"active\");\n\n                        let $pane = _panel.$label.parent();\n                        if ($pane.get(0) && $pane.get(0).clientWidth !== $pane.get(0).scrollWidth) {\n                            $pane.animate({scrollLeft: _panel.$label.position().left}, 300);\n                        }\n\n                        module = (_panel.moduleName in this.modules && 'active' in this.modules[_panel.moduleName]) ? this.modules[_panel.moduleName] : defaultModule;\n                        module.active(moduleContainer, moduleState);\n                        $pane = null;\n                    },\n                    deactive: () => {\n                        _panel.active = false;\n                        _panel.$label.removeClass(\"active\");\n                        _panel.$item.removeClass(\"active\");\n                        module = (_panel.moduleName in this.modules && 'deactive' in this.modules[_panel.moduleName]) ? this.modules[_panel.moduleName] : defaultModule;\n                        module.deactive(moduleContainer, moduleState);\n                    },\n                    destroy: () => {\n                        module = (_panel.moduleName in this.modules && 'destroy' in this.modules[_panel.moduleName]) ? this.modules[_panel.moduleName] : defaultModule;\n                        module.destroy(moduleContainer, moduleState);\n\n                        // 패널 데이터 제거.\n                        setPanel(_panel.panelPath, null);\n                        // 현재 패널 정보를 검사하여 패널 정보를 재 구성합니다.\n                        arrangePanel();\n                    }\n                };\n\n                // 사용자정의 함수 control.before, control.after에 전달할 인자 = that\n                let that = {\n                    panel: _panel,\n                    controlType: _control\n                };\n\n                // 비동기 처리 상황에 대응하기 위해 runProcessor를 별도 처리\n                let runProcessor = () => {\n                    processor[_control]();\n                    module = null;\n\n                    if (U.isFunction(cfg.control.after)) {\n                        cfg.control.after.call(that, that);\n                    }\n                };\n\n                if (processor[_control]) {\n                    if (U.isFunction(cfg.control.before)) {\n                        cfg.control.before.call(that, that, function () {\n                            runProcessor();\n                        });\n                    }\n                    else {\n                        runProcessor();\n                    }\n                }\n            };\n\n            /**\n             * 패널들의 패널 데이터 구조에 맞게 다시 그리기\n             */\n            const repaintPanels = () => {\n                const appendProcessor = {\n                    stack($parent, parent, myself, pIndex){\n\n                        let $dom, activeIndex = -1;\n                        myself.panelPath = getPanelPath(parent, pIndex);\n\n                        $dom = jQuery(DOCKER.tmpl.get.call(this, \"stack-panel\", {\n                            name: myself.name,\n                            panelPath: myself.panelPath,\n                            icons: cfg.icons,\n                            disableClosePanel: cfg.disableClosePanel,\n                            disableDragPanel: cfg.disableDragPanel,\n                        }, {}));\n                        $parent.append($dom);\n\n                        if (U.isArray(myself.panels)) {\n                            myself.panels.forEach(function (P, pIndex) {\n                                if (P.active) activeIndex = pIndex;\n                            });\n                            if (activeIndex === -1) activeIndex = 0;\n                            myself.panels[activeIndex].active = true;\n\n                            myself.panels.forEach(function (P, _pIndex) {\n                                P.panelIndex = _pIndex;\n                                appendProcessor[P.type]($dom, myself, P, _pIndex);\n                            });\n                        }\n\n                        $dom = null;\n                        activeIndex = null;\n                    },\n                    panel($parent, parent, myself, pIndex){\n                        let $dom;\n                        myself.panelPath = getPanelPath(parent, pIndex);\n                        myself.$label = jQuery(DOCKER.tmpl.get.call(this, \"panel-label\", {\n                            pIndex: pIndex,\n                            name: myself.name,\n                            panelPath: myself.panelPath,\n                            icons: cfg.icons,\n                            disableClosePanel: cfg.disableClosePanel,\n                            disableDragPanel: cfg.disableDragPanel,\n                        }, {}));\n\n                        if (!myself.$item) {\n                            myself.$item = jQuery('<div data-ax5docker-pane-item=\"' + pIndex + '\" data-ax5docker-pane-id=\"' + getPanelId() + '\" data-ax5docker-path=\"' + myself.panelPath + '\"></div>');\n                        }\n\n                        if (parent && parent.type == \"stack\") {\n                            if (myself.active) {\n                                if (!myself.builded) controlPanel(myself, \"init\");\n                                controlPanel(myself, \"active\");\n                            }\n                            $parent.find('[data-ax5docker-pane-tabs]').append(myself.$label);\n                            $parent.find('[data-ax5docker-pane-item-views]').append(myself.$item);\n                        } else {\n                            $dom = jQuery(DOCKER.tmpl.get.call(this, \"stack-panel\", {\n                                name: myself.name,\n                                panelPath: myself.panelPath,\n                                flexGrow: myself.flexGrow,\n                                icons: cfg.icons,\n                                disableClosePanel: cfg.disableClosePanel,\n                                disableDragPanel: cfg.disableDragPanel,\n                            }, {}));\n\n                            if (!myself.builded) controlPanel(myself, \"init\");\n                            controlPanel(myself, \"active\");\n\n                            $dom.find('[data-ax5docker-pane-tabs]').append(myself.$label);\n                            $dom.find('[data-ax5docker-pane-item-views]').append(myself.$item);\n\n                            $parent.append($dom);\n                        }\n\n                        $dom = null;\n                    },\n                    resizeHandle($parent, parent, myself, pIndex){\n                        let $dom = jQuery('<div data-ax5docker-resize-handle=\"' + parent.type + \"/\" + parent.panelPath + \"/\" + pIndex + '\"></div>');\n                        $parent.append($dom);\n                        $dom = null;\n                    },\n                    row($parent, parent, myself, pIndex){\n                        let $dom;\n                        myself.panelPath = getPanelPath(parent, pIndex);\n                        if (parent && parent.type == \"stack\") {\n                            throw \"The 'stack' type child nodes are allowed only for the 'panel' type.\";\n                        }\n                        $dom = jQuery('<div data-ax5docker-pane-axis=\"row\" data-ax5docker-path=\"' + myself.panelPath + '\" style=\"flex-grow: ' + (myself.flexGrow || 1) + ';\"></div>');\n                        $parent.append($dom);\n\n                        if (U.isArray(myself.panels)) {\n                            myself.panels.forEach(function (P, _pIndex) {\n                                if (_pIndex > 0) appendProcessor[\"resizeHandle\"]($dom, myself, P, _pIndex);\n                                P.panelIndex = _pIndex;\n                                appendProcessor[P.type]($dom, myself, P, _pIndex);\n                            });\n                        }\n\n                        $dom = null;\n                    },\n                    column($parent, parent, myself, pIndex){\n                        let $dom;\n                        myself.panelPath = getPanelPath(parent, pIndex);\n                        if (parent && parent.type == \"stack\") {\n                            throw \"The 'stack' type child nodes are allowed only for the 'panel' type.\";\n                        }\n                        $dom = jQuery('<div data-ax5docker-pane-axis=\"column\" data-ax5docker-path=\"' + myself.panelPath + '\" style=\"flex-grow: ' + (myself.flexGrow || 1) + ';\"></div>');\n                        $parent.append($dom);\n\n                        if (U.isArray(myself.panels)) {\n                            myself.panels.forEach(function (P, _pIndex) {\n                                if (_pIndex > 0) appendProcessor[\"resizeHandle\"]($dom, myself, P, _pIndex);\n                                P.panelIndex = _pIndex;\n                                appendProcessor[P.type]($dom, myself, P, _pIndex);\n                            });\n                        }\n\n                        $dom = null;\n                    }\n                };\n\n                let $root = jQuery('<div data-ax5docker-panes=\"\"></div>');\n                if (this.panels[0]) appendProcessor[this.panels[0].type]($root, null, this.panels[0], 0);\n                this.$target.html($root);\n\n                this.$target\n                    .off(\"click.ax5docker-pane\")\n                    .on(\"click.ax5docker-pane\", \"[data-ax5docker-pane-tab] .close-icon\", function (e) {\n                        closePanel($(this).parents('[data-ax5docker-pane-tab]'));\n                        U.stopEvent(e);\n                    })\n                    .on(\"click.ax5docker-pane\", \"[data-ax5docker-pane-tab]\", function (e) {\n                        // pane, panelIndex 인자 변경.\n                        let $clickedLabel = jQuery(this);\n                        let pane = getPanel($clickedLabel.parents('[data-ax5docker-pane]').attr(\"data-ax5docker-path\"));\n                        let panelIndex = $clickedLabel.attr(\"data-ax5docker-pane-tab\");\n\n                        if (!$clickedLabel.hasClass(\"active\")) {\n                            changeActiveStackPanel(pane, panelIndex);\n                        }\n\n                        $clickedLabel = null;\n                        pane = null;\n                        panelIndex = null;\n                        U.stopEvent(e);\n                    })\n                    .on(\"click.ax5docker-pane\", \"[data-ax5docker-pane-tabs-more]\", function (e) {\n                        openStackPanelMore($(this).parents('[data-ax5docker-pane]'), e);\n                        U.stopEvent(e);\n                    });\n\n                this.$target\n                    .off(\"mousedown.ax5docker-pane-resize\")\n                    .off(\"dragstart.ax5docker-pane-resize\")\n                    .on(\"dragstart.ax5docker-pane-resize\", \"[data-ax5docker-pane-tab]\", function (e) {\n                        if(!cfg.disableDragPanel) {\n                            panelTabDragEvent.on(this);\n                        }\n                    })\n                    .on(\"mousedown.ax5docker-pane-resize\", \"[data-ax5docker-resize-handle]\", function (e) {\n                        let datas = this.getAttribute(\"data-ax5docker-resize-handle\").split(/\\//g);\n\n                        // panelResizerEvent.init\n                        self.xvar.mousePosition = getMousePosition(e);\n                        self.xvar.resizerType = datas[0];\n                        self.xvar.resizerPath = datas[1];\n                        self.xvar.resizerIndex = datas[2];\n                        // 주변 패널들\n                        self.xvar.resizer$dom = $(this);\n                        self.xvar.resizerParent$dom = self.xvar.resizer$dom.parent();\n                        self.xvar.resizerPrevGrow = U.number(self.xvar.resizer$dom.prev().css(\"flex-grow\"));\n                        self.xvar.resizerNextGrow = U.number(self.xvar.resizer$dom.next().css(\"flex-grow\"));\n\n                        if (self.xvar.resizerType == \"row\") {\n                            //self.xvar.resizerCanvasWidth = self.xvar.resizerParent$dom.innerWidth();\n                            self.xvar.resizerCanvasWidth = self.xvar.resizer$dom.prev().innerWidth() + self.xvar.resizer$dom.next().innerWidth() + self.xvar.resizer$dom.width();\n                        } else {\n                            //self.xvar.resizerCanvasHeight = self.xvar.resizerParent$dom.innerHeight();\n                            self.xvar.resizerCanvasHeight = self.xvar.resizer$dom.prev().innerHeight() + self.xvar.resizer$dom.next().innerHeight() + self.xvar.resizer$dom.height();\n                        }\n\n                        panelResizerEvent.on(this);\n                        U.stopEvent(e);\n                    })\n                    .on(\"dragstart.ax5docker-pane-resize\", \"[data-ax5docker-resize-handle]\", function (e) {\n                        U.stopEvent(e);\n                        return false;\n                    });\n\n                // stackPane tabs 스크롤처리\n                alignStackPane();\n                $root = null;\n            };\n\n            /**\n             * 액티브 패널 변경(stack인 상황에서)\n             * @param pane\n             * @param panelIndex\n             * @returns {boolean}\n             */\n            const changeActiveStackPanel = (pane, panelIndex) => {\n                let panel = pane.panels[panelIndex];\n\n                for (let p = 0, pl = pane.panels.length; p < pl; p++) {\n                    if (pane.panels[p].active) {\n                        controlPanel(pane.panels[p], \"deactive\");\n                    }\n                }\n\n                if (!panel.builded) controlPanel(panel, \"init\");\n                controlPanel(panel, \"active\");\n\n                pane = null;\n                panelIndex = null;\n                panel = null;\n                return this;\n            };\n\n            /**\n             * 패널 삭제하기\n             * @param clickedLabel\n             * @returns {ax5docker}\n             */\n            const closePanel = (clickedLabel) => {\n                let $clickedLabel = jQuery(clickedLabel),\n                    panelPath = $clickedLabel.attr(\"data-ax5docker-path\"),\n                    panel = getPanel(panelPath);\n\n                controlPanel(panel, \"destroy\");\n\n                $clickedLabel = null;\n                panelPath = null;\n                panel = null;\n                return this;\n            };\n\n            /**\n             * stackTab의 더보기 아이콘이 클릭되면~~~\n             * @param stackPane\n             * @param e\n             * @returns {ax5docker}\n             */\n            const openStackPanelMore = (stackPane, e) => {\n                let $stackPane = jQuery(stackPane),\n                    panePath = $stackPane.attr(\"data-ax5docker-path\"),\n                    pane = getPanel(panePath);\n\n                if (this.menu) {\n                    let menuItems = U.map(pane.panels, function (index) {\n                        return {\n                            label: this.name,\n                            index: index,\n                            panePath: panePath\n                        }\n                    });\n\n                    this.menu.setConfig({\n                        items: menuItems,\n                        onClick: function () {\n                            //console.log(pane);\n                            changeActiveStackPanel(getPanel(this.panePath), this.index);\n                        }\n                    });\n\n                    this.menu.popup(e);\n                } else {\n                    console.log(pane.panels);\n                    throw \"'ax5ui-menu' is required to implement the function.\";\n                }\n\n                $stackPane = null;\n                panePath = null;\n                pane = null;\n                return this;\n            };\n\n            /**\n             * repaintPanels이 작동할 때. 리사이저에 mousedown 이벤트를 연결합니다.\n             * 발생된 이벤트가 panelResizerEvent.on 을 작동시켜 리사이저를 움직이게 합니다\n             */\n            const panelResizerEvent = {\n                \"on\": (_resizer) => {\n                    const $resizer = $(_resizer);\n                    const resizerPositionLeft = $resizer.offset().left;\n                    const dockerTargetOffsetLeft = this.$target.offset().left;\n\n                    jQuery(document.body)\n                        .on(\"mousemove.ax5docker-\" + this.instanceId, function (e) {\n                            let mouseObj = getMousePosition(e);\n                            let da_grow;\n                            if (self.xvar.resizerLived) {\n                                if (self.xvar.resizerType == \"row\") {\n                                    self.xvar.__da = mouseObj.clientX - self.xvar.mousePosition.clientX;\n                                    da_grow = U.number(self.xvar.__da * 2 / self.xvar.resizerCanvasWidth, {round: 6});\n\n                                    self.xvar.resizer$dom.prev().css({\"flex-grow\": self.xvar.resizerPrevGrow + da_grow});\n                                    self.xvar.resizer$dom.next().css({\"flex-grow\": self.xvar.resizerNextGrow - da_grow});\n                                } else {\n                                    self.xvar.__da = mouseObj.clientY - self.xvar.mousePosition.clientY;\n                                    da_grow = U.number(self.xvar.__da * 2 / self.xvar.resizerCanvasHeight, {round: 6});\n\n                                    self.xvar.resizer$dom.prev().css({\"flex-grow\": self.xvar.resizerPrevGrow + da_grow});\n                                    self.xvar.resizer$dom.next().css({\"flex-grow\": self.xvar.resizerNextGrow - da_grow});\n                                }\n                            } else {\n                                self.xvar.resizerLived = true;\n                            }\n\n                            mouseObj = null;\n                            da_grow = null;\n                        })\n                        .on(\"mouseup.ax5docker-\" + this.instanceId, function (e) {\n                            panelResizerEvent.off();\n                            U.stopEvent(e);\n                        })\n                        .on(\"mouseleave.ax5docker-\" + this.instanceId, function (e) {\n                            panelResizerEvent.off();\n                            U.stopEvent(e);\n                        });\n\n                    jQuery(document.body)\n                        .attr('unselectable', 'on')\n                        .css('user-select', 'none')\n                        .on('selectstart', false);\n                },\n                \"off\": () => {\n                    self.xvar.resizerLived = false;\n\n                    if (typeof this.xvar.__da === \"undefined\") {\n\n                    }\n                    else {\n                        let $prevPanel = self.xvar.resizer$dom.prev(),\n                            $nextPanel = self.xvar.resizer$dom.next(),\n                            prevPane = getPanel($prevPanel.attr(\"data-ax5docker-path\")),\n                            nextPane = getPanel($nextPanel.attr(\"data-ax5docker-path\"));\n\n                        prevPane.flexGrow = U.number($prevPanel.css(\"flex-grow\"));\n                        nextPane.flexGrow = U.number($nextPanel.css(\"flex-grow\"));\n\n                        $prevPanel = null;\n                        $nextPanel = null;\n                        prevPane = null;\n                        nextPane = null;\n                    }\n\n                    jQuery(document.body)\n                        .off(\"mousemove.ax5docker-\" + this.instanceId)\n                        .off(\"mouseup.ax5docker-\" + this.instanceId)\n                        .off(\"mouseleave.ax5docker-\" + this.instanceId);\n\n                    jQuery(document.body)\n                        .removeAttr('unselectable')\n                        .css('user-select', 'auto')\n                        .off('selectstart');\n                }\n            };\n\n            /**\n             * repaintPanels이 작동할 때. 패널탭에 dragStart 이벤트를 연결합니다.\n             * 발생된 이벤트가 panelTabDragEvent.on를 작동.\n             */\n            const panelTabDragEvent = {\n                \"on\": (dragPanel) => {\n                    if (this.panels[0] && this.panels[0].panels && this.panels[0].panels.length) {\n\n                        this.xvar.dragger = {\n                            dragPanel: dragPanel,\n                            target: null,\n                            dragOverVertical: null,\n                            dragOverHorizontal: null,\n                        };\n\n                        this.$target\n                            .on(\"dragover.ax5docker-\" + this.instanceId, '[data-ax5docker-path]', function (e) {\n                                // todo : dragover 구현\n                                // console.log(\"dargover\", getMousePosition(e));\n                                // console.log(e.target);\n                                panelTabDragEvent.dragover(this, e);\n                                U.stopEvent(e);\n                            })\n                            .on(\"drop.ax5docker-\" + this.instanceId, function (e) {\n                                panelTabDragEvent.off(\"drop\");\n                                U.stopEvent(e);\n                            })\n                            .on(\"dragend.ax5docker-\" + this.instanceId, function (e) {\n                                panelTabDragEvent.off();\n                                U.stopEvent(e);\n                            });\n                    }\n                },\n                \"dragover\": (dragoverDom, e) => {\n                    let $dragoverDom = jQuery(dragoverDom);\n                    if (this.xvar.dragger.target == null || this.xvar.dragger.target.get(0) != $dragoverDom.get(0)) {\n\n                        if (this.xvar.dragger.target) this.xvar.dragger.target.removeAttr(\"data-dropper\");\n\n                        this.xvar.dragger.target = $dragoverDom;\n                        this.xvar.dragger.dragOverVertical = null;\n                        this.xvar.dragger.dragOverHorizontal = null;\n                    }\n\n                    // e.target\n                    let box = {};\n                    box = $dragoverDom.offset();\n                    box.width = $dragoverDom.width();\n                    box.height = $dragoverDom.height();\n\n                    let mouse = getMousePosition(e);\n                    let dragOverVertical, dragOverHorizontal;\n                    if ($dragoverDom.attr(\"data-ax5docker-pane-tab\")) {\n                        let halfWidth = box.width / 2;\n                        if (box.left <= mouse.clientX && (box.left + halfWidth) >= mouse.clientX) {\n                            dragOverHorizontal = \"left\";\n                        }\n                        else if ((box.left + halfWidth) <= mouse.clientX && (box.left + halfWidth * 2) >= mouse.clientX) {\n                            dragOverHorizontal = \"right\";\n                        }\n                        if (this.xvar.dragger.dragOverHorizontal != dragOverHorizontal && typeof dragOverHorizontal != \"undefined\") {\n                            this.xvar.dragger.dragOverHorizontal = dragOverHorizontal;\n                            var draggerProcessor = {\n                                \"left\"($target){\n                                    $target.attr(\"data-dropper\", \"left\");\n                                },\n                                \"right\"($target){\n                                    $target.attr(\"data-dropper\", \"right\");\n                                },\n                            };\n                            if(this.xvar.dragger.dragOverHorizontal in draggerProcessor) {\n                                draggerProcessor[this.xvar.dragger.dragOverHorizontal](this.xvar.dragger.target);\n                            }\n                        }\n                    }\n                    else if ($dragoverDom.attr(\"data-ax5docker-pane-item\")) {\n                        // panel dragover 포지션 구하기\n                        let threeQuarterHeight = box.height / 3;\n                        let threeQuarterWidth = box.width / 3;\n\n                        if (box.top <= mouse.clientY && (box.top + threeQuarterHeight) >= mouse.clientY) {\n                            dragOverVertical = \"top\";\n                        }\n                        else if ((box.top + threeQuarterHeight) <= mouse.clientY && (box.top + threeQuarterHeight * 2) >= mouse.clientY) {\n                            dragOverVertical = \"middle\";\n                        }\n                        else if ((box.top + threeQuarterHeight * 2) <= mouse.clientY && (box.top + threeQuarterHeight * 3) >= mouse.clientY) {\n                            dragOverVertical = \"bottom\";\n                        }\n\n                        if (box.left <= mouse.clientX && (box.left + threeQuarterWidth) >= mouse.clientX) {\n                            dragOverHorizontal = \"left\";\n                        }\n                        else if ((box.left + threeQuarterWidth) <= mouse.clientX && (box.left + threeQuarterWidth * 2) >= mouse.clientX) {\n                            dragOverHorizontal = \"center\";\n                        }\n                        else if ((box.left + threeQuarterWidth * 2) <= mouse.clientX && (box.left + threeQuarterWidth * 3) >= mouse.clientX) {\n                            dragOverHorizontal = \"right\";\n                        }\n\n                        if (this.xvar.dragger.dragOverVertical != dragOverVertical || this.xvar.dragger.dragOverHorizontal != dragOverHorizontal) {\n                            this.xvar.dragger.dragOverVertical = dragOverVertical;\n                            this.xvar.dragger.dragOverHorizontal = dragOverHorizontal;\n\n                            var draggerProcessor = {\n                                \"left-top\"($target){\n                                    $target.attr(\"data-dropper\", \"left\");\n                                },\n                                \"right-top\"($target){\n                                    $target.attr(\"data-dropper\", \"right\");\n                                },\n                                \"center-top\"($target){\n                                    $target.attr(\"data-dropper\", \"top\");\n                                },\n                                \"left-middle\"($target){\n                                    $target.attr(\"data-dropper\", \"left\");\n                                },\n                                \"right-middle\"($target){\n                                    $target.attr(\"data-dropper\", \"right\");\n                                },\n                                \"center-middle\"($target){\n                                    $target.attr(\"data-dropper\", \"center\");\n                                },\n                                \"left-bottom\"($target){\n                                    $target.attr(\"data-dropper\", \"left\");\n                                },\n                                \"right-bottom\"($target){\n                                    $target.attr(\"data-dropper\", \"right\");\n                                },\n                                \"center-bottom\"($target){\n                                    $target.attr(\"data-dropper\", \"bottom\");\n                                },\n                            };\n                            if(this.xvar.dragger.dragOverHorizontal + \"-\" + this.xvar.dragger.dragOverVertical in draggerProcessor) {\n                                draggerProcessor[this.xvar.dragger.dragOverHorizontal + \"-\" + this.xvar.dragger.dragOverVertical](this.xvar.dragger.target);\n                            }\n                        }\n                    }\n                },\n                \"off\": (isDrop) => {\n                    if (isDrop) {\n                        let dragPanel = getPanel(this.xvar.dragger.dragPanel.getAttribute(\"data-ax5docker-path\"));\n                        //let targetPanel = getPanel(this.xvar.dragger.target.attr(\"data-ax5docker-path\"));\n                        let appendType = [];\n\n                        if(this.xvar.dragger.dragOverHorizontal) appendType.push(this.xvar.dragger.dragOverHorizontal);\n                        if(this.xvar.dragger.dragOverVertical) appendType.push(this.xvar.dragger.dragOverVertical);\n\n                        this.appendPanel(dragPanel, this.xvar.dragger.target.attr(\"data-ax5docker-path\"), appendType);\n                        dragPanel = null;\n                    }\n\n                    this.$target\n                        .off(\"dragover.ax5docker-\" + this.instanceId)\n                        .off(\"drop.ax5docker-\" + this.instanceId)\n                        .off(\"dragend.ax5docker-\" + this.instanceId);\n\n                    this.xvar.dragger.target.removeAttr(\"data-dropper\");\n                }\n            };\n\n            /**\n             * stack type panel resize되면 탭 스크롤 처리 관련 처리\n             */\n            const debounceFn = ax5.util.debounce(function (fn) {\n                fn();\n            }, cfg.animateTime);\n\n            /**\n             * stackPane이 리사이즈 되면 탭을 스크롤여부를 판단해야 합니다.\n             */\n            const alignStackPane = () => {\n                debounceFn((function () {\n                    this.$target.find('[data-ax5docker-pane-tabs]').each(function () {\n                        let $this = jQuery(this).parent();\n                        if (this.scrollWidth > this.clientWidth) {\n                            $this.addClass(\"tabs-scrolled\");\n                        } else {\n                            $this.removeClass(\"tabs-scrolled\");\n                        }\n                        $this = null;\n                    });\n                }).bind(this));\n            };\n\n            /**\n             * 패널중에 null이 된 요소를 찾아 panels를 정리 합니다.\n             * @returns {*}\n             */\n            const arrangePanel = () => {\n                // console.log(this.$target.find('[data-ax5docker-pane]'));\n                const panels = [];\n                const processor = {\n                    stack(myself){\n                        if (!U.isArray(myself.panels)) return false;\n\n                        let newObj = {\n                            type: \"stack\",\n                            panels: []\n                        };\n\n                        myself.panels.forEach(function (P, _pIndex) {\n                            if (P) {\n                                let _p = processor[P.type](P);\n                                if (_p) newObj.panels.push(_p);\n                                _p = null;\n                            }\n                        });\n\n                        if (newObj.panels.length == 0) {\n                            return null;\n                        } else if (newObj.panels.length < 2) {\n                            newObj = newObj.panels[0];\n                        }\n\n                        return newObj;\n                    },\n                    panel(myself){\n                        //console.log(myself);\n                        return myself;\n                    },\n                    row(myself){\n\n                        if (!U.isArray(myself.panels)) return false;\n\n                        let newObj = {\n                            type: \"row\",\n                            panels: []\n                        };\n\n                        myself.panels.forEach(function (P, _pIndex) {\n                            if (P) {\n                                let _p = processor[P.type](P);\n                                if (_p) newObj.panels.push(_p);\n                                _p = null;\n                            }\n                        });\n\n                        if (newObj.panels.length == 0) {\n                            return null;\n                        } else if (newObj.panels.length < 2) {\n                            newObj = newObj.panels[0];\n                        }\n\n                        return newObj;\n                    },\n                    column(myself){\n                        if (!U.isArray(myself.panels)) return false;\n\n                        let newObj = {\n                            type: \"column\",\n                            panels: []\n                        };\n\n                        myself.panels.forEach(function (P, _pIndex) {\n                            if (P) {\n                                let _p = processor[P.type](P);\n                                if (_p) newObj.panels.push(_p);\n                                _p = null;\n                            }\n                        });\n\n                        if (newObj.panels.length == 0) {\n                            return null;\n                        } else if (newObj.panels.length < 2) {\n                            newObj = newObj.panels[0];\n                        }\n\n                        return newObj;\n                    },\n                };\n\n                if (this.panels[0]) {\n                    this.panels[0] = processor[this.panels[0].type](this.panels[0]);\n                } else {\n                    this.panels = [];\n                }\n\n                repaintPanels();\n            };\n\n            /**\n             * @method ax5docker.setConfig\n             * @param {Object} config\n             * @param {Element} config.target\n             * @param {Array} config.panels\n             * @param {Object} [config.icons]\n             * @param {String} [config.icons.close]\n             * @param {String} [config.icons.more]\n             * @param {Boolean} [config.disableClosePanel=false]\n             * @param {Boolean} [config.disableDragPanel=false]\n             * @param {Object} [config.control]\n             * @param {Function} [config.control.before]\n             * @param {Function} [config.control.after]\n             * @param {Object} [config.menu]\n             * @param {String} [config.menu.theme=\"default\"]\n             * @param {String} [config.menu.position=\"absolute\"]\n             * @param {Object} [config.menu.icons]\n             * @param {String} [config.menu.icons.arrow]\n             * @example\n             * ```js\n             * var myDocker = new ax5.ui.docker();\n             * myDocker.setConfig({\n             *      target: $('[data-ax5docker=\"docker1\"]'),\n             *      panels: [\n             *          {\n             *              type: \"panel\",\n             *              name: \"panel name\",\n             *              moduleName: \"content\",\n             *              moduleState:{\n             *                  data: \"data1\"\n             *              }\n             *          }\n             *      ]\n             * });\n             * ```\n             */\n            this.init = function (_config) {\n                cfg = jQuery.extend(true, {}, cfg, _config);\n                if (!cfg.target) {\n                    console.log(ax5.info.getError(\"ax5docker\", \"401\", \"init\"));\n                    return this;\n                }\n                // memory target\n                this.$target = jQuery(cfg.target);\n                // set panels\n                this.panels = cfg.panels || [];\n                // event Functions\n                this.onStateChanged = cfg.onStateChanged;\n                this.onClick = cfg.onClick;\n                this.onLoad = cfg.onLoad;\n                this.onDataChanged = cfg.onDataChanged;\n\n                if (ax5.ui.menu) {\n                    this.menu = new ax5.ui.menu({\n                        theme: 'default',\n                        position: \"absolute\",\n                        icons: {\n                            'arrow': '▸'\n                        }\n                    });\n                }\n\n                jQuery(window).bind(\"resize.ax5docker-\" + this.id, function () {\n                    // stackPane tabs 스크롤처리\n                    alignStackPane();\n                });\n            };\n\n            /**\n             * @method ax5docker.setPanels\n             * @returns {ax5docker}\n             */\n            this.setPanels = function (_panels) {\n                // set panels\n                this.panels = _panels || [];\n\n                // 패널 다시 그리기\n                repaintPanels();\n                return this;\n            };\n\n            /**\n             * @method ax5docker.addModule\n             * @param modules\n             * @returns {ax5docker}\n             */\n            this.addModule = function (modules) {\n                if (U.isObject(modules)) {\n                    jQuery.extend(true, this.modules, modules);\n                }\n                return this;\n            };\n\n            /**\n             * repaint panels of docker\n             * @method ax5docker.repaint\n             * @returns {ax5docker}\n             */\n            this.repaint = function () {\n                // 패널 다시 그리기\n                repaintPanels();\n                return this;\n            };\n\n            /**\n             * @method ax5docker.addPanel\n             * @param {String} _addPath - Position path to add panel\n             * @param _addType\n             * @param _panel\n             * @param _panelIndex\n             * @returns {ax5docker}\n             * @example\n             * ```js\n             * myDocker.addPanel('0.1', 'stack', {type:'panel', name:'addPanel', moduleName: 'content'});\n             *\n             * ```\n             */\n            this.addPanel = function (_addPath, _addType, _panel, _panelIndex) {\n                let addPath = \"\";\n                if (_addPath == \"undefined\") addPath = \"0\";\n                addPath = _addPath\n                    .replace(/[a-zA-Z\\[\\]]+/g, \"\")\n                    .replace(/(\\d+)/g, function (a, b) {\n                        return \"panels[\" + a + \"]\";\n                    });\n\n                let pane = getPanel(addPath);\n                let parent = getPanelParent(pane);\n                if (parent.type == \"stack\") {\n                    // 부모패널로 ~\n                    //console.log(addPath, _addPath);\n                    pane = parent;\n                    addPath = pane.panelPath;\n                }\n                let panelProcessor = {\n                    \"stack\"(_pane, _addType, _panel){\n                        let copyPanel = jQuery.extend({}, _pane),\n                            addProcessor = {\n                                \"stack\"(_pane, _panel){\n                                    _pane.panels.push(_panel);\n                                    arrangePanel();\n                                },\n                                \"row-left\"(_pane, _panel){\n                                    let parentPath = addPath.substr(0, addPath.lastIndexOf(\".\"));\n                                    let parentPane = getPanel(parentPath);\n                                    if (parentPane && parentPane.type == \"row\") {\n                                        this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                    } else {\n                                        _pane = setPanel(addPath, {\n                                            type: \"row\",\n                                            panels: []\n                                        });\n                                        _pane.panels.push(_panel);\n                                        _pane.panels.push(copyPanel);\n                                        arrangePanel();\n                                    }\n                                },\n                                \"row-right\"(_pane, _panel){\n                                    let parentPath = addPath.substr(0, addPath.lastIndexOf(\".\"));\n                                    let parentPane = getPanel(parentPath);\n                                    if (parentPane && parentPane.type == \"row\") {\n                                        this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                    } else {\n                                        _pane = setPanel(addPath, {\n                                            type: \"row\",\n                                            panels: []\n                                        });\n                                        _pane.panels.push(copyPanel);\n                                        _pane.panels.push(_panel);\n                                        arrangePanel();\n                                    }\n                                },\n                                \"column-top\"(_pane, _panel){\n                                    let parentPath = addPath.substr(0, addPath.lastIndexOf(\".\"));\n                                    let parentPane = getPanel(parentPath);\n                                    if (parentPane && parentPane.type == \"column\") {\n                                        this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                    } else {\n                                        _pane = setPanel(addPath, {\n                                            type: \"column\",\n                                            panels: []\n                                        });\n                                        _pane.panels.push(_panel);\n                                        _pane.panels.push(copyPanel);\n                                        arrangePanel();\n                                    }\n                                },\n                                \"column-bottom\"(_pane, _panel){\n                                    let parentPath = addPath.substr(0, addPath.lastIndexOf(\".\"));\n                                    let parentPane = getPanel(parentPath);\n                                    if (parentPane && parentPane.type == \"column\") {\n                                        this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                    } else {\n                                        _pane = setPanel(addPath, {\n                                            type: \"column\",\n                                            panels: []\n                                        });\n                                        _pane.panels.push(copyPanel);\n                                        _pane.panels.push(_panel);\n                                        arrangePanel();\n                                    }\n                                }\n                            };\n                        if (_addType in addProcessor) {\n                            addProcessor[_addType].call(this, _pane, _panel);\n                        }\n\n                        copyPanel = null;\n                        addProcessor = null;\n                    },\n                    \"row\"(_pane, _addType, _panel, _panelIndex){\n                        let copyPanel = jQuery.extend({}, _pane);\n                        let addProcessor = {\n                            \"stack\"(_pane, _panel){\n                                // 처리 할 수 없는 상황 첫번째 자식을 찾아 재 요청\n                                if (_pane.panels[0] && _pane.panels[0].panelPath) {\n                                    this.addPanel(_pane.panels[0].panelPath, _addType, _panel);\n                                }\n                            },\n                            \"row-left\"(_pane, _panel, _panelIndex){\n                                let parentPath = addPath.substr(0, addPath.lastIndexOf(\".\"));\n                                let parentPane = getPanel(parentPath);\n                                if (parentPane && parentPane.type == \"row\") {\n                                    _pane.panels.splice(_panelIndex, 0, _panel);\n                                    arrangePanel();\n                                } else {\n                                    _pane = setPanel(addPath, {\n                                        type: \"row\",\n                                        panels: []\n                                    });\n                                    _pane.panels.push(_panel);\n                                    _pane.panels.push(copyPanel);\n                                    arrangePanel();\n                                }\n                            },\n                            \"row-right\"(_pane, _panel, _panelIndex){\n                                let parentPath = addPath.substr(0, addPath.lastIndexOf(\".\"));\n                                let parentPane = getPanel(parentPath);\n                                if (parentPane && parentPane.type == \"row\") {\n                                    _pane.panels.splice(_panelIndex + 1, 0, _panel);\n                                    arrangePanel();\n                                } else {\n                                    _pane = setPanel(addPath, {\n                                        type: \"row\",\n                                        panels: []\n                                    });\n                                    _pane.panels.push(copyPanel);\n                                    _pane.panels.push(_panel);\n                                    arrangePanel();\n                                }\n                            },\n                            \"column-top\"(_pane, _panel, _panelIndex){\n                                let parentPath = addPath.substr(0, addPath.lastIndexOf(\".\"));\n                                let parentPane = getPanel(parentPath);\n                                if (parentPane && parentPane.type == \"column\") {\n                                    this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                } else {\n                                    _pane = setPanel(addPath, {\n                                        type: \"column\",\n                                        panels: []\n                                    });\n                                    _pane.panels.push(_panel);\n                                    _pane.panels.push(copyPanel);\n                                    arrangePanel();\n                                }\n                            },\n                            \"column-bottom\"(_pane, _panel, _panelIndex){\n                                let parentPath = addPath.substr(0, addPath.lastIndexOf(\".\"));\n                                let parentPane = getPanel(parentPath);\n                                if (parentPane && parentPane.type == \"column\") {\n                                    this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                } else {\n                                    _pane = setPanel(addPath, {\n                                        type: \"column\",\n                                        panels: []\n                                    });\n                                    _pane.panels.push(copyPanel);\n                                    _pane.panels.push(_panel);\n                                    arrangePanel();\n                                }\n                            }\n                        };\n                        if (_addType in addProcessor) {\n                            addProcessor[_addType].call(this, _pane, _panel, _panelIndex);\n                        }\n\n                        addProcessor = null;\n                        copyPanel = null;\n                    },\n                    \"column\"(_pane, _addType, _panel, _panelIndex){\n                        let copyPanel = jQuery.extend({}, _pane);\n                        let addProcessor = {\n                            \"stack\"(_pane, _panel){\n                                if (_pane.panels[0] && _pane.panels[0].panelPath) {\n                                    this.addPanel(_pane.panels[0].panelPath, _addType, _panel);\n                                }\n                            },\n                            \"row-left\"(_pane, _panel){\n                                let parentPath = addPath.substr(0, addPath.lastIndexOf(\".\"));\n                                let parentPane = getPanel(parentPath);\n                                if (parentPane && parentPane.type == \"row\") {\n                                    this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                } else {\n                                    _pane = setPanel(addPath, {\n                                        type: \"row\",\n                                        panels: []\n                                    });\n                                    _pane.panels.push(_panel);\n                                    _pane.panels.push(copyPanel);\n                                    arrangePanel();\n                                }\n                            },\n                            \"row-right\"(_pane, _panel){\n                                let parentPath = addPath.substr(0, addPath.lastIndexOf(\".\"));\n                                let parentPane = getPanel(parentPath);\n                                if (parentPane && parentPane.type == \"row\") {\n                                    this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                } else {\n                                    _pane = setPanel(addPath, {\n                                        type: \"row\",\n                                        panels: []\n                                    });\n                                    _pane.panels.push(copyPanel);\n                                    _pane.panels.push(_panel);\n                                    arrangePanel();\n                                }\n                            },\n                            \"column-top\"(_pane, _panel){\n                                _pane.panels.splice(_panelIndex, 0, _panel);\n                                arrangePanel();\n                            },\n                            \"column-bottom\"(_pane, _panel){\n                                _pane.panels.splice(_panelIndex + 1, 0, _panel);\n                                arrangePanel();\n                            }\n                        };\n                        if (_addType in addProcessor) {\n                            addProcessor[_addType].call(this, _pane, _panel);\n                        }\n\n                        addProcessor = null;\n                        copyPanel = null;\n                    },\n                    \"panel\"(_pane, _addType, _panel){\n                        // todo : 부모가 stack인지 체크 하자.\n                        let copyPanel = jQuery.extend({}, _pane),\n                            addProcessor = {\n                                \"stack\"(_pane, _panel){\n                                    // _pane stack으로 재구성\n                                    _pane = setPanel(addPath, {\n                                        type: \"stack\",\n                                        panels: []\n                                    });\n                                    _pane.panels.push(copyPanel);\n                                    _pane.panels.push(_panel);\n                                    arrangePanel();\n                                },\n                                \"row-left\"(_pane, _panel){\n                                    let parentPath = addPath.substr(0, addPath.lastIndexOf(\".\"));\n                                    let parentPane = getPanel(parentPath);\n                                    if (parentPane && parentPane.type == \"row\") {\n                                        this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                    } else {\n                                        _pane = setPanel(addPath, {\n                                            type: \"row\",\n                                            panels: []\n                                        });\n                                        _pane.panels.push(_panel);\n                                        _pane.panels.push(copyPanel);\n                                        arrangePanel();\n                                    }\n                                },\n                                \"row-right\"(_pane, _panel){\n                                    let parentPath = addPath.substr(0, addPath.lastIndexOf(\".\"));\n                                    let parentPane = getPanel(parentPath);\n                                    if (parentPane && parentPane.type == \"row\") {\n                                        this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                    } else {\n                                        _pane = setPanel(addPath, {\n                                            type: \"row\",\n                                            panels: []\n                                        });\n                                        _pane.panels.push(copyPanel);\n                                        _pane.panels.push(_panel);\n                                        arrangePanel();\n                                    }\n                                },\n                                \"column-top\"(_pane, _panel){\n                                    let parentPath = addPath.substr(0, addPath.lastIndexOf(\".\"));\n                                    let parentPane = getPanel(parentPath);\n                                    if (parentPane && parentPane.type == \"column\") {\n                                        this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                    } else {\n                                        _pane = setPanel(addPath, {\n                                            type: \"column\",\n                                            panels: []\n                                        });\n                                        _pane.panels.push(_panel);\n                                        _pane.panels.push(copyPanel);\n                                        arrangePanel();\n                                    }\n                                },\n                                \"column-bottom\"(_pane, _panel){\n                                    let parentPath = addPath.substr(0, addPath.lastIndexOf(\".\"));\n                                    let parentPane = getPanel(parentPath);\n                                    if (parentPane && parentPane.type == \"column\") {\n                                        this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                    } else {\n                                        _pane = setPanel(addPath, {\n                                            type: \"column\",\n                                            panels: []\n                                        });\n                                        _pane.panels.push(copyPanel);\n                                        _pane.panels.push(_panel);\n                                        arrangePanel();\n                                    }\n                                }\n                            };\n\n                        if (_addType in addProcessor) {\n                            addProcessor[_addType].call(this, _pane, _panel);\n                        }\n\n                        copyPanel = null;\n                        addProcessor = null;\n                    }\n                };\n\n                panelProcessor[pane.type].call(this, pane, _addType, _panel, _panelIndex);\n                return this;\n            };\n\n\n            /**\n             * @method ax5docker.appendPanel\n             * @param _panel\n             * @param _appendPath\n             * @param _appendType\n             * @returns {ax5docker}\n             */\n            this.appendPanel = function (_panel, _appendPath, _appendType) {\n                console.log(_panel, _appendPath, _appendType);\n                return this;\n            };\n\n            // 클래스 생성자\n            this.main = (function () {\n                UI.docker_instance = UI.docker_instance || [];\n                UI.docker_instance.push(this);\n\n                if (arguments && U.isObject(arguments[0])) {\n                    this.setConfig(arguments[0]);\n                }\n            }).apply(this, arguments);\n\n        };\n\n        return ax5docker;\n    })());\n\n    DOCKER = ax5.ui.docker;\n})();\n\n// todo : row > stack 구현 -- ok\n// todo : stack 패널 active change -- ok\n// todo : 패널삭제하기 -- ok ~ active 패널 정리.. -- ok\n// todo : 패널추가하기 -- ok\n// todo : 패널 스플릿 리사이즈 -- ok\n// todo : stack tab overflow 처리. -- ok\n// todo : 탭 포커싱와 탭 목록 메뉴 처리 -- ok\n// todo : 패널 drag & drop\n// todo : update panels -- ok (setPanels)","// ax5.ui.docker.tmpl\n(function () {\n\n    let DOCKER = ax5.ui.docker;\n\n    let stack_panel = function () {\n        return `<div data-ax5docker-pane=\"\" data-ax5docker-path=\"{{panelPath}}\" style=\"flex-grow: {{#flexGrow}}{{.}}{{/flexGrow}}{{^flexGrow}}1{{/flexGrow}};\">\n    <ul data-ax5docker-pane-tabs=\"\"></ul>\n    <div data-ax5docker-pane-tabs-more=\"\">{{{icons.more}}}</div>\n    <div data-ax5docker-pane-item-views=\"\"></div>\n</div>`;\n    };\n\n    let panel_label = function () {\n        return `<li data-ax5docker-pane-tab=\"{{pIndex}}\" data-ax5docker-path=\"{{panelPath}}\">\n    <div class=\"title\">{{{name}}}</div>\n    {{^disableClosePanel}}<div class=\"close-icon\">{{{icons.close}}}</div>{{/disableClosePanel}}\n</li>`;\n    };\n\n    DOCKER.tmpl = {\n        \"stack-panel\": stack_panel,\n        \"panel-label\": panel_label,\n\n        get: function (tmplName, data, columnKeys) {\n            return ax5.mustache.render(DOCKER.tmpl[tmplName].call(this, columnKeys), data);\n        }\n    };\n\n})();"]}