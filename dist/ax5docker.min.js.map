{"version":3,"sources":["ax5docker.min.js","ax5docker.js","ax5docker-tmpl.js"],"names":["UI","ax5","ui","U","util","addClass","className","version","ax5docker","_this","this","self","cfg","instanceId","getGuid","config","theme","animateTime","columnKeys","control","icons","close","more","xvar","menu","panels","panelId","modules","getPanelId","defaultModule","init","container","state","html","name","active","deactive","destroy","getPanelPath","parent","pIndex","paths","panelPath","push","join","getPanel","_panelPath","path","_path","isArray","concat","split","forEach","n","replace","Function","call","e","setPanel","_value","getMousePosition","mouseObj","originalEvent","changedTouches","clientX","pageX","clientY","pageY","controlPanel","_panel","_control","moduleState","jQuery","extend","moduleContainer","$element","$item","module","processor","builded","moduleName","$label","removeClass","arrangePanel","that","panel","controlType","runProcessor","isFunction","after","before","repaintPanels","appendProcessor","stack","$parent","myself","$dom","activeIndex","flexGrow","append","P","_pIndex","panelIndex","type","find","resizeHandle","row","column","$root","$target","off","on","closePanel","$","parents","stopEvent","$clickedLabel","pane","attr","hasClass","changeActiveStackPanel","openStackPanelMore","datas","getAttribute","mousePosition","resizerType","resizerPath","resizerIndex","resizer$dom","resizerParent$dom","resizerPrevGrow","number","prev","css","resizerNextGrow","next","resizerCanvasWidth","innerWidth","width","resizerCanvasHeight","innerHeight","height","panelResizerEvent","alignStackPane","p","pl","length","clickedLabel","stackPane","$stackPane","panePath","console","log","menuItems","map","index","label","setConfig","items","onClick","popup","_resizer","$resizer","offset","left","document","body","bind","da_grow","resizerLived","__da","round","flex-grow","$prevPanel","$nextPanel","prevPane","nextPane","unbind","removeAttr","debounceFn","debounce","fn","each","$this","scrollWidth","clientWidth","newObj","_p","_config","target","onStateChanged","onLoad","onDataChanged","position","arrow","window","id","info","getError","setPanels","_panels","addModule","isObject","repaint","addPanel","_addPath","_addType","_panelIndex","a","b","panelProcessor","_pane","copyPanel","addProcessor","row-left","parentPath","substr","lastIndexOf","parentPane","row-right","column-top","column-bottom","splice","main","arguments","apply","DOCKER","docker","tmpl","get","tmplName","data","mustache","render"],"mappings":"AAAA,cCMA,WAEA,GAAAA,GAAAC,IAAAC,GACAC,EAAAF,IAAAG,IAEAJ,GAAAK,UACAC,UAAA,SACAC,QAAA,cACA,WAWA,GAAAC,GAAA,WAAA,GAAAC,GAAAC,KACAC,EAAAD,KACAE,EAAAA,MAEAF,MAAAG,WAAAZ,IAAAa,UACAJ,KAAAK,QACAC,MAAA,UACAC,YAAA,IACAC,cACAC,WACAC,OACAC,MAAA,IACAC,KAAA,QAGAZ,KAAAa,QACAb,KAAAc,KAAA,KAGAd,KAAAe,UACAf,KAAAgB,QAAA,EAGAhB,KAAAiB,WAEAf,EAAAF,KAAAK,MAEA,IAAAa,GAAA,WACA,MAAAnB,GAAAiB,WAOAG,GACAC,KADA,SACAC,EAAAC,GACAD,EAAA,SAAAE,KAAAD,EAAAE,OAEAC,OAJA,SAIAJ,EAAAC,KAGAI,SAPA,SAOAL,EAAAC,KAGAK,QAVA,SAUAN,EAAAC,MAKAM,EAAA,SAAAC,EAAAC,GACA,GAAAC,KAMA,OALAF,IAAA,mBAAAA,GAAAG,WACAD,EAAAE,KAAAJ,EAAAG,WAGAD,EAAAE,KAAA,WAAAH,GAAA,GAAA,KACAC,EAAAG,KAAA,MAGAC,EAAA,SAAAC,GACA,GAAAC,MACAC,EAAA7C,EAAA8C,QAAAH,MAAAI,OAAAJ,MAAAI,OAAAJ,EAAAK,MAAA,aAEAH,GAAAI,QAAA,SAAAC,GACA,KAAAA,GAAAN,EAAAJ,KAAA,KAAAU,EAAAC,QAAA,SAAA,IAAA,OAGA,KACA,MAAAC,UAAA,GAAA,cAAAR,EAAAH,KAAA,IAAA,KAAAY,KAAA/C,GACA,MAAAgD,GACA,SAmBAC,EAAA,SAAAZ,EAAAa,GACA,GAAAZ,MACAC,EAAA7C,EAAA8C,QAAAH,MAAAI,OAAAJ,MAAAI,OAAAJ,EAAAK,MAAA,aAMA,OAJAH,GAAAI,QAAA,SAAAC,GACA,KAAAA,GAAAN,EAAAJ,KAAA,KAAAU,EAAAC,QAAA,SAAA,IAAA,QAGAC,SAAA,MAAA,cAAAR,EAAAH,KAAA,IAAA,WAAAY,KAAA/C,EAAAkD,IAGAC,EAAA,SAAAH,GACA,GAAAI,GAAAA,OAAAC,EAAAL,EAAAK,cAAAL,EAAAK,cAAAL,CAGA,OAFAI,GAAA,kBAAAC,GAAAA,EAAAC,eAAA,GAAAD,GAGAE,QAAAH,EAAAI,MACAC,QAAAL,EAAAM,QAIAC,EAAA,SAAAC,EAAAC,GACA,GAAAC,GAAAC,OAAAC,OAAAJ,EAAAE,aACArC,KAAAmC,EAAAnC,OAEAwC,GACAC,SAAAN,EAAAO,OAEAC,EAAAA,OAEAC,GACAhD,KAAA,WACAuC,EAAAU,SAAA,EACAF,EAAAR,EAAAW,aAAAvE,GAAAkB,SAAA,QAAAlB,GAAAkB,QAAA0C,EAAAW,YAAAvE,EAAAkB,QAAA0C,EAAAW,YAAAnD,EACAgD,EAAA/C,KAAA4C,EAAAH,IAEApC,OAAA,WACAkC,EAAAlC,QAAA,EACAkC,EAAAY,OAAA5E,SAAA,UACAgE,EAAAO,MAAAvE,SAAA,UACAwE,EAAAR,EAAAW,aAAAvE,GAAAkB,SAAA,UAAAlB,GAAAkB,QAAA0C,EAAAW,YAAAvE,EAAAkB,QAAA0C,EAAAW,YAAAnD,EACAgD,EAAA1C,OAAAuC,EAAAH,IAEAnC,SAAA,WACAiC,EAAAlC,QAAA,EACAkC,EAAAY,OAAAC,YAAA,UACAb,EAAAO,MAAAM,YAAA,UACAL,EAAAR,EAAAW,aAAAvE,GAAAkB,SAAA,YAAAlB,GAAAkB,QAAA0C,EAAAW,YAAAvE,EAAAkB,QAAA0C,EAAAW,YAAAnD,EACAgD,EAAAzC,SAAAsC,EAAAH,IAEAlC,QAAA,WACAwC,EAAAR,EAAAW,aAAAvE,GAAAkB,SAAA,WAAAlB,GAAAkB,QAAA0C,EAAAW,YAAAvE,EAAAkB,QAAA0C,EAAAW,YAAAnD,EACAgD,EAAAxC,QAAAqC,EAAAH,GAGAb,EAAAW,EAAA3B,UAAA,MAEAyC,MAKAC,GACAC,MAAAhB,EACAiB,YAAAhB,GAIAiB,EAAA,WACAT,EAAAR,KACAO,EAAA,KAEA1E,EAAAqF,WAAA5E,EAAAO,QAAAsE,QACA7E,EAAAO,QAAAsE,MAAAjC,KAAA4B,EAAAA,GAIAN,GAAAR,KACAnE,EAAAqF,WAAA5E,EAAAO,QAAAuE,QACA9E,EAAAO,QAAAuE,OAAAlC,KAAA4B,EAAAA,EAAA,WACAG,MAIAA,MAQAI,EAAA,WACA,GAAAC,IACAC,MADA,SACAC,EAAAvD,EAAAwD,EAAAvD,GAEA,GAAAwD,GAAAA,OAAAC,IACAF,GAAArD,UAAAJ,EAAAC,EAAAC,GAEAwD,EAAAxB,OAAA,oDAAAuB,EAAArD,UAAA,wBAAAqD,EAAAG,UAAA,GAAA,iFAEAtF,EAAAQ,MAAAE,KAAA,6DAGAwE,EAAAK,OAAAH,GAEA7F,EAAA8C,QAAA8C,EAAAtE,UACAsE,EAAAtE,OAAA2B,QAAA,SAAAgD,EAAA5D,GACA4D,EAAAjE,SAAA8D,EAAAzD,KAEAyD,SAAAA,EAAA,GACAF,EAAAtE,OAAAwE,GAAA9D,QAAA,EAEA4D,EAAAtE,OAAA2B,QAAA,SAAAgD,EAAAC,GACAD,EAAAE,WAAAD,EACAT,EAAAQ,EAAAG,MAAAP,EAAAD,EAAAK,EAAAC,MAIAL,EAAA,KACAC,EAAA,MAEAZ,MA7BA,SA6BAS,EAAAvD,EAAAwD,EAAAvD,GACA,GAAAwD,GAAAA,MACAD,GAAArD,UAAAJ,EAAAC,EAAAC,GACAuD,EAAAd,OAAAT,OAAA,gCAAAhC,EAAA,0BAAAuD,EAAArD,UAAA,wBACAqD,EAAA7D,KAAA,iCACAtB,EAAAQ,MAAAC,MAAA,eAGA0E,EAAAnB,QACAmB,EAAAnB,MAAAJ,OAAA,kCAAAhC,EAAA,6BAAAZ,IAAA,0BAAAmE,EAAArD,UAAA,aAGAH,GAAA,SAAAA,EAAAgE,MACAR,EAAA5D,SACA4D,EAAAhB,SAAAX,EAAA2B,EAAA,QACA3B,EAAA2B,EAAA,WAEAD,EAAAU,KAAA,8BAAAL,OAAAJ,EAAAd,QACAa,EAAAU,KAAA,oCAAAL,OAAAJ,EAAAnB,SAEAoB,EAAAxB,OAAA,oDAAAuB,EAAArD,UAAA,wBAAAqD,EAAAG,UAAA,GAAA,kFAEAtF,EAAAQ,MAAAE,KAAA,6DAIAyE,EAAAhB,SAAAX,EAAA2B,EAAA,QACA3B,EAAA2B,EAAA,UAEAC,EAAAQ,KAAA,8BAAAL,OAAAJ,EAAAd,QACAe,EAAAQ,KAAA,oCAAAL,OAAAJ,EAAAnB,OAEAkB,EAAAK,OAAAH,IAGAA,EAAA,MAEAS,aAlEA,SAkEAX,EAAAvD,EAAAwD,EAAAvD,GACA,GAAAwD,GAAAxB,OAAA,sCAAAjC,EAAAgE,KAAA,IAAAhE,EAAAG,UAAA,IAAAF,EAAA,WACAsD,GAAAK,OAAAH,GACAA,EAAA,MAEAU,IAvEA,SAuEAZ,EAAAvD,EAAAwD,EAAAvD,GACA,GAAAwD,GAAAA,MAEA,IADAD,EAAArD,UAAAJ,EAAAC,EAAAC,GACAD,GAAA,SAAAA,EAAAgE,KACA,KAAA,qEAEAP,GAAAxB,OAAA,4DAAAuB,EAAArD,UAAA,wBAAAqD,EAAAG,UAAA,GAAA,aACAJ,EAAAK,OAAAH,GAEA7F,EAAA8C,QAAA8C,EAAAtE,SACAsE,EAAAtE,OAAA2B,QAAA,SAAAgD,EAAAC,GACAA,EAAA,GAAAT,EAAA,aAAAI,EAAAD,EAAAK,EAAAC,GACAD,EAAAE,WAAAD,EACAT,EAAAQ,EAAAG,MAAAP,EAAAD,EAAAK,EAAAC,KAIAL,EAAA,MAEAW,OA1FA,SA0FAb,EAAAvD,EAAAwD,EAAAvD,GACA,GAAAwD,GAAAA,MAEA,IADAD,EAAArD,UAAAJ,EAAAC,EAAAC,GACAD,GAAA,SAAAA,EAAAgE,KACA,KAAA,qEAEAP,GAAAxB,OAAA,+DAAAuB,EAAArD,UAAA,wBAAAqD,EAAAG,UAAA,GAAA,aACAJ,EAAAK,OAAAH,GAEA7F,EAAA8C,QAAA8C,EAAAtE,SACAsE,EAAAtE,OAAA2B,QAAA,SAAAgD,EAAAC,GACAA,EAAA,GAAAT,EAAA,aAAAI,EAAAD,EAAAK,EAAAC,GACAD,EAAAE,WAAAD,EACAT,EAAAQ,EAAAG,MAAAP,EAAAD,EAAAK,EAAAC,KAIAL,EAAA,OAIAY,EAAApC,OAAA,sCACA/D,GAAAgB,OAAA,IAAAmE,EAAAnF,EAAAgB,OAAA,GAAA8E,MAAAK,EAAA,KAAAnG,EAAAgB,OAAA,GAAA,GACAhB,EAAAoG,QAAA5E,KAAA2E,GAEAnG,EAAAoG,QACAC,IAAA,wBACAC,GAAA,uBAAA,wCAAA,SAAAtD,GACAuD,EAAAC,EAAAvG,MAAAwG,QAAA,8BACA/G,EAAAgH,UAAA1D,KAEAsD,GAAA,uBAAA,4BAAA,SAAAtD,GAEA,GAAA2D,GAAA5C,OAAA9D,MACA2G,EAAAxE,EAAAuE,EAAAF,QAAA,yBAAAI,KAAA,wBACAhB,EAAAc,EAAAE,KAAA,0BAEAF,GAAAG,SAAA,WACAC,EAAAH,EAAAf,GAGAc,EAAA,KACAC,EAAA,KACAf,EAAA,KACAnG,EAAAgH,UAAA1D,KAEAsD,GAAA,uBAAA,kCAAA,SAAAtD,GACAgE,EAAAR,EAAAvG,MAAAwG,QAAA,yBAAAzD,GACAtD,EAAAgH,UAAA1D,KAGAhD,EAAAoG,QACAC,IAAA,mCACAA,IAAA,mCACAC,GAAA,kCAAA,iCAAA,SAAAtD,GACA,GAAAiE,GAAAhH,KAAAiH,aAAA,gCAAAxE,MAAA,MAGAxC,GAAAY,KAAAqG,cAAAhE,EAAAH,GACA9C,EAAAY,KAAAsG,YAAAH,EAAA,GACA/G,EAAAY,KAAAuG,YAAAJ,EAAA,GACA/G,EAAAY,KAAAwG,aAAAL,EAAA,GAEA/G,EAAAY,KAAAyG,YAAAf,EAAAvG,MACAC,EAAAY,KAAA0G,kBAAAtH,EAAAY,KAAAyG,YAAAzF,SACA5B,EAAAY,KAAA2G,gBAAA/H,EAAAgI,OAAAxH,EAAAY,KAAAyG,YAAAI,OAAAC,IAAA,cACA1H,EAAAY,KAAA+G,gBAAAnI,EAAAgI,OAAAxH,EAAAY,KAAAyG,YAAAO,OAAAF,IAAA,cAEA,OAAA1H,EAAAY,KAAAsG,YAEAlH,EAAAY,KAAAiH,mBAAA7H,EAAAY,KAAAyG,YAAAI,OAAAK,aAAA9H,EAAAY,KAAAyG,YAAAO,OAAAE,aAAA9H,EAAAY,KAAAyG,YAAAU,QAGA/H,EAAAY,KAAAoH,oBAAAhI,EAAAY,KAAAyG,YAAAI,OAAAQ,cAAAjI,EAAAY,KAAAyG,YAAAO,OAAAK,cAAAjI,EAAAY,KAAAyG,YAAAa,SAGAC,EAAA/B,GAAArG,MACAP,EAAAgH,UAAA1D,KAEAsD,GAAA,kCAAA,iCAAA,SAAAtD,GAEA,MADAtD,GAAAgH,UAAA1D,IACA,IAIAsF,IACAnC,EAAA,MASAY,EAAA,SAAAH,EAAAf,GAGA,IAAA,GAFAjB,GAAAgC,EAAA5F,OAAA6E,GAEA0C,EAAA,EAAAC,EAAA5B,EAAA5F,OAAAyH,OAAAF,EAAAC,EAAAD,IACA3B,EAAA5F,OAAAuH,GAAA7G,QACAiC,EAAAiD,EAAA5F,OAAAuH,GAAA,WAUA,OANA3D,GAAAN,SAAAX,EAAAiB,EAAA,QACAjB,EAAAiB,EAAA,UAEAgC,EAAA,KACAf,EAAA,KACAjB,EAAA,KACA5E,GASAuG,EAAA,SAAAmC,GACA,GAAA/B,GAAA5C,OAAA2E,GACAzG,EAAA0E,EAAAE,KAAA,uBACAjC,EAAAxC,EAAAH,EAOA,OALA0B,GAAAiB,EAAA,WAEA+B,EAAA,KACA1E,EAAA,KACA2C,EAAA,KACA5E,GAGAgH,EAAA,SAAA2B,EAAA3F,GACA,GAAA4F,GAAA7E,OAAA4E,GACAE,EAAAD,EAAA/B,KAAA,uBACAD,EAAAxE,EAAAyG,EAEA,KAAA7I,EAAAe,KAoBA,KADA+H,SAAAC,IAAAnC,EAAA5F,QACA,qDAnBA,IAAAgI,GAAAtJ,EAAAuJ,IAAArC,EAAA5F,OAAA,SAAAkI,GACA,OACAC,MAAAlJ,KAAAwB,KACAyH,MAAAA,EACAL,SAAAA,IAqBA,OAjBA7I,GAAAe,KAAAqI,WACAC,MAAAL,EACAM,QAAA,WAEAvC,EAAA3E,EAAAnC,KAAA4I,UAAA5I,KAAAiJ,UAIAlJ,EAAAe,KAAAwI,MAAAvG,GAMA4F,EAAA,KACAC,EAAA,KACAjC,EAAA,KACA5G,GAGAqI,GACA/B,GAAA,SAAAkD,GACA,GAAAC,GAAAjD,EAAAgD,EACAC,GAAAC,SAAAC,KACA3J,EAAAoG,QAAAsD,SAAAC,IAEA5F,QAAA6F,SAAAC,MACAC,KAAA,uBAAA9J,EAAAI,WAAA,SAAA4C,GACA,GAAAI,GAAAD,EAAAH,GACA+G,EAAAA,MACA7J,GAAAY,KAAAkJ,aACA,OAAA9J,EAAAY,KAAAsG,aACAlH,EAAAY,KAAAmJ,KAAA7G,EAAAG,QAAArD,EAAAY,KAAAqG,cAAA5D,QACAwG,EAAArK,EAAAgI,OAAA,EAAAxH,EAAAY,KAAAmJ,KAAA/J,EAAAY,KAAAiH,oBAAAmC,MAAA,IAEAhK,EAAAY,KAAAyG,YAAAI,OAAAC,KAAAuC,YAAAjK,EAAAY,KAAA2G,gBAAAsC,IACA7J,EAAAY,KAAAyG,YAAAO,OAAAF,KAAAuC,YAAAjK,EAAAY,KAAA+G,gBAAAkC,MAEA7J,EAAAY,KAAAmJ,KAAA7G,EAAAK,QAAAvD,EAAAY,KAAAqG,cAAA1D,QACAsG,EAAArK,EAAAgI,OAAA,EAAAxH,EAAAY,KAAAmJ,KAAA/J,EAAAY,KAAAoH,qBAAAgC,MAAA,IAEAhK,EAAAY,KAAAyG,YAAAI,OAAAC,KAAAuC,YAAAjK,EAAAY,KAAA2G,gBAAAsC,IACA7J,EAAAY,KAAAyG,YAAAO,OAAAF,KAAAuC,YAAAjK,EAAAY,KAAA+G,gBAAAkC,KAGA7J,EAAAY,KAAAkJ,cAAA,EAGA5G,EAAA,KACA2G,EAAA,OAEAD,KAAA,qBAAA9J,EAAAI,WAAA,SAAA4C,GACAqF,EAAAhC,IAAAtD,KAAA7C,GACAR,EAAAgH,UAAA1D,KAEA8G,KAAA,wBAAA9J,EAAAI,WAAA,SAAA4C,GACAqF,EAAAhC,IAAAtD,KAAA7C,GACAR,EAAAgH,UAAA1D,KAGAe,OAAA6F,SAAAC,MACAhD,KAAA,eAAA,MACAe,IAAA,cAAA,QACAtB,GAAA,eAAA,IAEAD,IAAA,WAGA,GAFAnG,EAAAY,KAAAkJ,cAAA,EAEA,mBAAAhK,GAAAc,KAAAmJ,UAGA,CACA,GAAAG,GAAAlK,EAAAY,KAAAyG,YAAAI,OACA0C,EAAAnK,EAAAY,KAAAyG,YAAAO,OACAwC,EAAAlI,EAAAgI,EAAAvD,KAAA,wBACA0D,EAAAnI,EAAAiI,EAAAxD,KAAA,uBAEAyD,GAAA7E,SAAA/F,EAAAgI,OAAA0C,EAAAxC,IAAA,cACA2C,EAAA9E,SAAA/F,EAAAgI,OAAA2C,EAAAzC,IAAA,cAEAwC,EAAA,KACAC,EAAA,KACAC,EAAA,KACAC,EAAA,KAGAxG,OAAA6F,SAAAC,MACAW,OAAA,uBAAAxK,EAAAI,YACAoK,OAAA,qBAAAxK,EAAAI,YACAoK,OAAA,wBAAAxK,EAAAI,YAEA2D,OAAA6F,SAAAC,MACAY,WAAA,gBACA7C,IAAA,cAAA,QACAvB,IAAA,iBAOAqE,EAAAlL,IAAAG,KAAAgL,SAAA,SAAAC,GACAA,KACAzK,EAAAK,aAEA8H,EAAA,WACAoC,EAAA,WACAzK,KAAAmG,QAAAL,KAAA,8BAAA8E,KAAA,WACA,GAAAC,GAAA/G,OAAA9D,MAAA6B,QACA7B,MAAA8K,YAAA9K,KAAA+K,YACAF,EAAAlL,SAAA,iBAEAkL,EAAArG,YAAA,iBAEAqG,EAAA,QAEAhB,KAVA9J,KAiBA0E,EAAA,WAEA,GACAL,IACAe,MADA,SACAE,GACA,IAAA5F,EAAA8C,QAAA8C,EAAAtE,QAAA,OAAA,CAEA,IAAAiK,IACAnF,KAAA,QACA9E,UAWA,OARAsE,GAAAtE,OAAA2B,QAAA,SAAAgD,EAAAC,GACA,GAAAD,EAAA,CACA,GAAAuF,GAAA7G,EAAAsB,EAAAG,MAAAH,EACAuF,IAAAD,EAAAjK,OAAAkB,KAAAgJ,GACAA,EAAA,QAIA,GAAAD,EAAAjK,OAAAyH,OACA,MACAwC,EAAAjK,OAAAyH,OAAA,IACAwC,EAAAA,EAAAjK,OAAA,IAGAiK,IAEArG,MAzBA,SAyBAU,GAEA,MAAAA,IAEAW,IA7BA,SA6BAX,GAEA,IAAA5F,EAAA8C,QAAA8C,EAAAtE,QAAA,OAAA,CAEA,IAAAiK,IACAnF,KAAA,MACA9E,UAWA,OARAsE,GAAAtE,OAAA2B,QAAA,SAAAgD,EAAAC,GACA,GAAAD,EAAA,CACA,GAAAuF,GAAA7G,EAAAsB,EAAAG,MAAAH,EACAuF,IAAAD,EAAAjK,OAAAkB,KAAAgJ,GACAA,EAAA,QAIA,GAAAD,EAAAjK,OAAAyH,OACA,MACAwC,EAAAjK,OAAAyH,OAAA,IACAwC,EAAAA,EAAAjK,OAAA,IAGAiK,IAEA/E,OAtDA,SAsDAZ,GACA,IAAA5F,EAAA8C,QAAA8C,EAAAtE,QAAA,OAAA,CAEA,IAAAiK,IACAnF,KAAA,SACA9E,UAWA,OARAsE,GAAAtE,OAAA2B,QAAA,SAAAgD,EAAAC,GACA,GAAAD,EAAA,CACA,GAAAuF,GAAA7G,EAAAsB,EAAAG,MAAAH,EACAuF,IAAAD,EAAAjK,OAAAkB,KAAAgJ,GACAA,EAAA,QAIA,GAAAD,EAAAjK,OAAAyH,OACA,MACAwC,EAAAjK,OAAAyH,OAAA,IACAwC,EAAAA,EAAAjK,OAAA,IAGAiK,IAIAjL,GAAAgB,OAAA,GACAhB,EAAAgB,OAAA,GAAAqD,EAAArE,EAAAgB,OAAA,GAAA8E,MAAA9F,EAAAgB,OAAA,IAEAhB,EAAAgB,UAGAkE,IAQAjF,MAAAoB,KAAA,SAAA8J,GAEA,MADAhL,GAAA4D,OAAAC,QAAA,KAAA7D,EAAAgL,GACAhL,EAAAiL,QAKAnL,KAAAmG,QAAArC,OAAA5D,EAAAiL,QAEAnL,KAAAe,OAAAb,EAAAa,WAEAf,KAAAoL,eAAAlL,EAAAkL,eACApL,KAAAqJ,QAAAnJ,EAAAmJ,QACArJ,KAAAqL,OAAAnL,EAAAmL,OACArL,KAAAsL,cAAApL,EAAAoL,cAEA/L,IAAAC,GAAAsB,OACAd,KAAAc,KAAA,GAAAvB,KAAAC,GAAAsB,MACAR,MAAA,UACAiL,SAAA,WACA7K,OACA8K,MAAA,YAKA1H,QAAA2H,QAAA5B,KAAA,oBAAA7J,KAAA0L,GAAA,WAEArD,QAzBAQ,QAAAC,IAAAvJ,IAAAoM,KAAAC,SAAA,YAAA,MAAA,SACA5L,OAgCAA,KAAA6L,UAAA,SAAAC,GAMA,MAJA9L,MAAAe,OAAA+K,MAGA7G,IACAjF,MAQAA,KAAA+L,UAAA,SAAA9K,GAIA,MAHAxB,GAAAuM,SAAA/K,IACA6C,OAAAC,QAAA,EAAA/D,KAAAiB,QAAAA,GAEAjB,MAQAA,KAAAiM,QAAA,WAGA,MADAhH,KACAjF,MAgBAA,KAAAkM,SAAA,SAAAC,EAAAC,EAAAzI,EAAA0I,GACA,aAAAF,IAAAA,EAAA,KACAA,EAAAA,EACAvJ,QAAA,iBAAA,IACAA,QAAA,SAAA,SAAA0J,EAAAC,GACA,MAAA,UAAAD,EAAA,KAIA,IAAA3F,GAAAxE,EAAAgK,EAEAtD,SAAAC,IAAAnC,EAEA,IAAA6F,IACArH,MADA,SACAsH,EAAAL,EAAAzI,GACA,GAAA+I,GAAA5I,OAAAC,UAAA0I,GACAE,GACAxH,MADA,SACAsH,EAAA9I,GACA8I,EAAA1L,OAAAkB,KAAA0B,GACAc,KAEAmI,WALA,SAKAH,EAAA9I,GACA,GAAAkJ,GAAAV,EAAAW,OAAA,EAAAX,EAAAY,YAAA,MACAC,EAAA7K,EAAA0K,EACA,QAAAG,EAAAnH,KACA7F,KAAAkM,SAAAc,EAAAhL,UAAAoK,EAAAzI,EAAA8I,EAAA7G,aAEA6G,EAAAzJ,EAAAmJ,GACAtG,KAAA,MACA9E,YAEA0L,EAAA1L,OAAAkB,KAAA0B,GACA8I,EAAA1L,OAAAkB,KAAAyK,GACAjI,MAGAwI,YApBA,SAoBAR,EAAA9I,GACA,GAAAkJ,GAAAV,EAAAW,OAAA,EAAAX,EAAAY,YAAA,MACAC,EAAA7K,EAAA0K,EACA,QAAAG,EAAAnH,KACA7F,KAAAkM,SAAAc,EAAAhL,UAAAoK,EAAAzI,EAAA8I,EAAA7G,aAEA6G,EAAAzJ,EAAAmJ,GACAtG,KAAA,MACA9E,YAEA0L,EAAA1L,OAAAkB,KAAAyK,GACAD,EAAA1L,OAAAkB,KAAA0B,GACAc,MAGAyI,aAnCA,SAmCAT,EAAA9I,GACA,GAAAkJ,GAAAV,EAAAW,OAAA,EAAAX,EAAAY,YAAA,MACAC,EAAA7K,EAAA0K,EACA,WAAAG,EAAAnH,KACA7F,KAAAkM,SAAAc,EAAAhL,UAAAoK,EAAAzI,EAAA8I,EAAA7G,aAEA6G,EAAAzJ,EAAAmJ,GACAtG,KAAA,SACA9E,YAEA0L,EAAA1L,OAAAkB,KAAA0B,GACA8I,EAAA1L,OAAAkB,KAAAyK,GACAjI,MAGA0I,gBAlDA,SAkDAV,EAAA9I,GACA,GAAAkJ,GAAAV,EAAAW,OAAA,EAAAX,EAAAY,YAAA,MACAC,EAAA7K,EAAA0K,EACA,WAAAG,EAAAnH,KACA7F,KAAAkM,SAAAc,EAAAhL,UAAAoK,EAAAzI,EAAA8I,EAAA7G,aAEA6G,EAAAzJ,EAAAmJ,GACAtG,KAAA,SACA9E,YAEA0L,EAAA1L,OAAAkB,KAAAyK,GACAD,EAAA1L,OAAAkB,KAAA0B,GACAc,MAIA2H,KAAAO,IACAA,EAAAP,GAAAtJ,KAAA9C,KAAAyM,EAAA9I,GAGA+I,EAAA,KACAC,EAAA,MAEA3G,IA5EA,SA4EAyG,EAAAL,EAAAzI,EAAA0I,GACA,GAAAK,GAAA5I,OAAAC,UAAA0I,GACAE,GACAxH,MADA,SACAsH,EAAA9I,GAEA8I,EAAA1L,OAAA,IAAA0L,EAAA1L,OAAA,GAAAiB,WACAhC,KAAAkM,SAAAO,EAAA1L,OAAA,GAAAiB,UAAAoK,EAAAzI,IAGAiJ,WAPA,SAOAH,EAAA9I,EAAA0I,GACA,GAAAQ,GAAAV,EAAAW,OAAA,EAAAX,EAAAY,YAAA,MACAC,EAAA7K,EAAA0K,EACA,QAAAG,EAAAnH,MACA4G,EAAA1L,OAAAqM,OAAAf,EAAA,EAAA1I,GACAc,MAEAgI,EAAAzJ,EAAAmJ,GACAtG,KAAA,MACA9E,YAEA0L,EAAA1L,OAAAkB,KAAA0B,GACA8I,EAAA1L,OAAAkB,KAAAyK,GACAjI,MAGAwI,YAvBA,SAuBAR,EAAA9I,EAAA0I,GACA,GAAAQ,GAAAV,EAAAW,OAAA,EAAAX,EAAAY,YAAA,MACAC,EAAA7K,EAAA0K,EACA,QAAAG,EAAAnH,MACA4G,EAAA1L,OAAAqM,OAAAf,EAAA,EAAA,EAAA1I,GACAc,MAEAgI,EAAAzJ,EAAAmJ,GACAtG,KAAA,MACA9E,YAEA0L,EAAA1L,OAAAkB,KAAAyK,GACAD,EAAA1L,OAAAkB,KAAA0B,GACAc,MAGAyI,aAvCA,SAuCAT,EAAA9I,EAAA0I,GACA,GAAAQ,GAAAV,EAAAW,OAAA,EAAAX,EAAAY,YAAA,MACAC,EAAA7K,EAAA0K,EACA,WAAAG,EAAAnH,KACA7F,KAAAkM,SAAAc,EAAAhL,UAAAoK,EAAAzI,EAAA8I,EAAA7G,aAEA6G,EAAAzJ,EAAAmJ,GACAtG,KAAA,SACA9E,YAEA0L,EAAA1L,OAAAkB,KAAA0B,GACA8I,EAAA1L,OAAAkB,KAAAyK,GACAjI,MAGA0I,gBAtDA,SAsDAV,EAAA9I,EAAA0I,GACA,GAAAQ,GAAAV,EAAAW,OAAA,EAAAX,EAAAY,YAAA,MACAC,EAAA7K,EAAA0K,EACA,WAAAG,EAAAnH,KACA7F,KAAAkM,SAAAc,EAAAhL,UAAAoK,EAAAzI,EAAA8I,EAAA7G,aAEA6G,EAAAzJ,EAAAmJ,GACAtG,KAAA,SACA9E,YAEA0L,EAAA1L,OAAAkB,KAAAyK,GACAD,EAAA1L,OAAAkB,KAAA0B,GACAc,MAIA2H,KAAAO,IACAA,EAAAP,GAAAtJ,KAAA9C,KAAAyM,EAAA9I,EAAA0I,GAGAM,EAAA,KACAD,EAAA,MAEAzG,OA3JA,SA2JAwG,EAAAL,EAAAzI,EAAA0I,GACA,GAAAK,GAAA5I,OAAAC,UAAA0I,GACAE,GACAxH,MADA,SACAsH,EAAA9I,GACA8I,EAAA1L,OAAA,IAAA0L,EAAA1L,OAAA,GAAAiB,WACAhC,KAAAkM,SAAAO,EAAA1L,OAAA,GAAAiB,UAAAoK,EAAAzI,IAGAiJ,WANA,SAMAH,EAAA9I,GACA,GAAAkJ,GAAAV,EAAAW,OAAA,EAAAX,EAAAY,YAAA,MACAC,EAAA7K,EAAA0K,EACA,QAAAG,EAAAnH,KACA7F,KAAAkM,SAAAc,EAAAhL,UAAAoK,EAAAzI,EAAA8I,EAAA7G,aAEA6G,EAAAzJ,EAAAmJ,GACAtG,KAAA,MACA9E,YAEA0L,EAAA1L,OAAAkB,KAAA0B,GACA8I,EAAA1L,OAAAkB,KAAAyK,GACAjI,MAGAwI,YArBA,SAqBAR,EAAA9I,GACA,GAAAkJ,GAAAV,EAAAW,OAAA,EAAAX,EAAAY,YAAA,MACAC,EAAA7K,EAAA0K,EACA,QAAAG,EAAAnH,KACA7F,KAAAkM,SAAAc,EAAAhL,UAAAoK,EAAAzI,EAAA8I,EAAA7G,aAEA6G,EAAAzJ,EAAAmJ,GACAtG,KAAA,MACA9E,YAEA0L,EAAA1L,OAAAkB,KAAAyK,GACAD,EAAA1L,OAAAkB,KAAA0B,GACAc,MAGAyI,aApCA,SAoCAT,EAAA9I,GACA8I,EAAA1L,OAAAqM,OAAAf,EAAA,EAAA1I,GACAc,KAEA0I,gBAxCA,SAwCAV,EAAA9I,GACA8I,EAAA1L,OAAAqM,OAAAf,EAAA,EAAA,EAAA1I,GACAc,KAGA2H,KAAAO,IACAA,EAAAP,GAAAtJ,KAAA9C,KAAAyM,EAAA9I,GAGAgJ,EAAA,KACAD,EAAA,MAEA/H,MAjNA,SAiNA8H,EAAAL,EAAAzI,GACA,GAAA+I,GAAA5I,OAAAC,UAAA0I,GACAE,GACAxH,MADA,SACAsH,EAAA9I,GAEA8I,EAAAzJ,EAAAmJ,GACAtG,KAAA,QACA9E,YAEA0L,EAAA1L,OAAAkB,KAAAyK,GACAD,EAAA1L,OAAAkB,KAAA0B,GACAc,KAEAmI,WAXA,SAWAH,EAAA9I,GACA,GAAAkJ,GAAAV,EAAAW,OAAA,EAAAX,EAAAY,YAAA,MACAC,EAAA7K,EAAA0K,EACA,QAAAG,EAAAnH,KACA7F,KAAAkM,SAAAc,EAAAhL,UAAAoK,EAAAzI,EAAA8I,EAAA7G,aAEA6G,EAAAzJ,EAAAmJ,GACAtG,KAAA,MACA9E,YAEA0L,EAAA1L,OAAAkB,KAAA0B,GACA8I,EAAA1L,OAAAkB,KAAAyK,GACAjI,MAGAwI,YA1BA,SA0BAR,EAAA9I,GACA,GAAAkJ,GAAAV,EAAAW,OAAA,EAAAX,EAAAY,YAAA,MACAC,EAAA7K,EAAA0K,EACA,QAAAG,EAAAnH,KACA7F,KAAAkM,SAAAc,EAAAhL,UAAAoK,EAAAzI,EAAA8I,EAAA7G,aAEA6G,EAAAzJ,EAAAmJ,GACAtG,KAAA,MACA9E,YAEA0L,EAAA1L,OAAAkB,KAAAyK,GACAD,EAAA1L,OAAAkB,KAAA0B,GACAc,MAGAyI,aAzCA,SAyCAT,EAAA9I,GACA,GAAAkJ,GAAAV,EAAAW,OAAA,EAAAX,EAAAY,YAAA,MACAC,EAAA7K,EAAA0K,EACA,WAAAG,EAAAnH,KACA7F,KAAAkM,SAAAc,EAAAhL,UAAAoK,EAAAzI,EAAA8I,EAAA7G,aAEA6G,EAAAzJ,EAAAmJ,GACAtG,KAAA,SACA9E,YAEA0L,EAAA1L,OAAAkB,KAAA0B,GACA8I,EAAA1L,OAAAkB,KAAAyK,GACAjI,MAGA0I,gBAxDA,SAwDAV,EAAA9I,GACA,GAAAkJ,GAAAV,EAAAW,OAAA,EAAAX,EAAAY,YAAA,MACAC,EAAA7K,EAAA0K,EACA,WAAAG,EAAAnH,KACA7F,KAAAkM,SAAAc,EAAAhL,UAAAoK,EAAAzI,EAAA8I,EAAA7G,aAEA6G,EAAAzJ,EAAAmJ,GACAtG,KAAA,SACA9E,YAEA0L,EAAA1L,OAAAkB,KAAAyK,GACAD,EAAA1L,OAAAkB,KAAA0B,GACAc,MAKA2H,KAAAO,IACAA,EAAAP,GAAAtJ,KAAA9C,KAAAyM,EAAA9I,GAIA+I,EAAA,KACAC,EAAA,MAKA,OADAH,GAAA7F,EAAAd,MAAA/C,KAAA9C,KAAA2G,EAAAyF,EAAAzI,EAAA0I,GACArM,MAIAA,KAAAqN,KAAA,WACAC,WAAA7N,EAAAuM,SAAAsB,UAAA,KACAtN,KAAAmJ,UAAAmE,UAAA,KAEAC,MAAAvN,KAAAsN,WAIA,OAAAxN,UCxiCA,WAEA,GAAA0N,GAAAjO,IAAAC,GAAAiO,OAEA1M,EAAA,SAAAP,GACA,MAAA,4FAUAgN,GAAAE,MACA3M,OAAAA,EACA4M,IAAA,SAAAC,EAAAC,EAAArN,GACA,MAAAjB,KAAAuO,SAAAC,OAAAP,EAAAE,KAAAE,GAAA9K,KAAA9C,KAAAQ,GAAAqN","file":"ax5docker.min.js","sourcesContent":["\"use strict\";\n\n/*\n * Copyright (c) 2017. tom@axisj.com\n * - github.com/thomasjang\n * - www.axisj.com\n */\n\n(function () {\n\n    var UI = ax5.ui,\n        U = ax5.util;\n\n    UI.addClass({\n        className: \"docker\",\n        version: \"${VERSION}\"\n    }, function () {\n\n        /**\n         * @class ax5docker\n         * @classdesc\n         * @author tom@axisj.com\n         * @example\n         * ```\n         * var ax5docker = new ax5.ui.ax5docker();\n         * ```\n         */\n        var ax5docker = function ax5docker() {\n            var _this = this;\n\n            var self = this,\n                cfg = void 0;\n\n            this.instanceId = ax5.getGuid();\n            this.config = {\n                theme: 'default',\n                animateTime: 250,\n                columnKeys: {},\n                control: {},\n                icons: {\n                    close: 'X',\n                    more: '...'\n                }\n            };\n            this.xvar = {};\n            this.menu = null;\n\n            // 패널 정보\n            this.panels = [];\n            this.panelId = 0;\n\n            // 패널의 컨텐츠 모듈\n            this.modules = {};\n\n            cfg = this.config;\n\n            var getPanelId = function getPanelId() {\n                return _this.panelId++;\n            };\n\n            /**\n             * defaultModule은 패널의 모듈이 정의되지 않은 경우를 위해 준비된 오브젝트\n             * @type {{init: ((container, state)), active: ((container, state)), deactive: ((container, state)), destroy: ((container, state))}}\n             */\n            var defaultModule = {\n                init: function init(container, state) {\n                    container[\"$element\"].html(state.name);\n                },\n                active: function active(container, state) {},\n                deactive: function deactive(container, state) {},\n                destroy: function destroy(container, state) {}\n            };\n\n            var getPanelPath = function getPanelPath(parent, pIndex) {\n                var paths = [];\n                if (parent && typeof parent.panelPath !== \"undefined\") {\n                    paths.push(parent.panelPath);\n                }\n\n                paths.push('panels[' + (pIndex || 0) + ']');\n                return paths.join(\".\");\n            };\n\n            var getPanel = function getPanel(_panelPath) {\n                var path = [],\n                    _path = U.isArray(_panelPath) ? [].concat(_panelPath) : [].concat(_panelPath.split(/[\\.\\[\\]]/g));\n\n                _path.forEach(function (n) {\n                    if (n !== \"\") path.push(\"[\\\"\" + n.replace(/['\\\"]/g, \"\") + \"\\\"]\");\n                });\n\n                try {\n                    return Function(\"\", \"return this\" + path.join('') + \";\").call(_this);\n                } catch (e) {\n                    return;\n                }\n            };\n\n            var getParentPanel = function getParentPanel(_panelPath) {\n                var path = [],\n                    _path = U.isArray(_panelPath) ? [].concat(_panelPath) : [].concat(_panelPath.split(/[\\.\\[\\]]/g));\n                _path.pop();\n                _path.forEach(function (n) {\n                    if (n !== \"\") path.push(\"[\\\"\" + n.replace(/['\\\"]/g, \"\") + \"\\\"]\");\n                });\n\n                try {\n                    return Function(\"\", \"return this\" + path.join('') + \";\").call(_this);\n                } catch (e) {\n                    return;\n                }\n            };\n\n            var setPanel = function setPanel(_panelPath, _value) {\n                var path = [],\n                    _path = U.isArray(_panelPath) ? [].concat(_panelPath) : [].concat(_panelPath.split(/[\\.\\[\\]]/g));\n\n                _path.forEach(function (n) {\n                    if (n !== \"\") path.push(\"[\\\"\" + n.replace(/['\\\"]/g, \"\") + \"\\\"]\");\n                });\n\n                return Function(\"val\", \"return this\" + path.join('') + \" = val;\").call(_this, _value);\n            };\n\n            var getMousePosition = function getMousePosition(e) {\n                var mouseObj = void 0,\n                    originalEvent = e.originalEvent ? e.originalEvent : e;\n                mouseObj = 'changedTouches' in originalEvent ? originalEvent.changedTouches[0] : originalEvent;\n                // clientX, Y 쓰면 스크롤에서 문제 발생\n                return {\n                    clientX: mouseObj.pageX,\n                    clientY: mouseObj.pageY\n                };\n            };\n\n            var controlPanel = function controlPanel(_panel, _control) {\n                var moduleState = jQuery.extend(_panel.moduleState, {\n                    name: _panel.name\n                }),\n                    moduleContainer = {\n                    '$element': _panel.$item\n                },\n                    module = void 0;\n\n                var processor = {\n                    init: function init() {\n                        _panel.builded = true;\n                        module = _panel.moduleName in _this.modules && 'init' in _this.modules[_panel.moduleName] ? _this.modules[_panel.moduleName] : defaultModule;\n                        module.init(moduleContainer, moduleState);\n                    },\n                    active: function active() {\n                        _panel.active = true;\n                        _panel.$label.addClass(\"active\");\n                        _panel.$item.addClass(\"active\");\n                        module = _panel.moduleName in _this.modules && 'active' in _this.modules[_panel.moduleName] ? _this.modules[_panel.moduleName] : defaultModule;\n                        module.active(moduleContainer, moduleState);\n                    },\n                    deactive: function deactive() {\n                        _panel.active = false;\n                        _panel.$label.removeClass(\"active\");\n                        _panel.$item.removeClass(\"active\");\n                        module = _panel.moduleName in _this.modules && 'deactive' in _this.modules[_panel.moduleName] ? _this.modules[_panel.moduleName] : defaultModule;\n                        module.deactive(moduleContainer, moduleState);\n                    },\n                    destroy: function destroy() {\n                        module = _panel.moduleName in _this.modules && 'destroy' in _this.modules[_panel.moduleName] ? _this.modules[_panel.moduleName] : defaultModule;\n                        module.destroy(moduleContainer, moduleState);\n\n                        // 패널 데이터 제거.\n                        setPanel(_panel.panelPath, null);\n                        // 현재 패널 정보를 검사하여 패널 정보를 재 구성합니다.\n                        arrangePanel();\n                    }\n                };\n\n                // 사용자정의 함수 control.before, control.after에 전달할 인자 = that\n                var that = {\n                    panel: _panel,\n                    controlType: _control\n                };\n\n                // 비동기 처리 상황에 대응하기 위해 runProcessor를 별도 처리\n                var runProcessor = function runProcessor() {\n                    processor[_control]();\n                    module = null;\n\n                    if (U.isFunction(cfg.control.after)) {\n                        cfg.control.after.call(that, that);\n                    }\n                };\n\n                if (processor[_control]) {\n                    if (U.isFunction(cfg.control.before)) {\n                        cfg.control.before.call(that, that, function () {\n                            runProcessor();\n                        });\n                    } else {\n                        runProcessor();\n                    }\n                }\n            };\n\n            /**\n             * 패널들의 패널 데이터 구조에 맞게 다시 그리기\n             */\n            var repaintPanels = function repaintPanels() {\n                var appendProcessor = {\n                    stack: function stack($parent, parent, myself, pIndex) {\n\n                        var $dom = void 0,\n                            activeIndex = -1;\n                        myself.panelPath = getPanelPath(parent, pIndex);\n\n                        $dom = jQuery('<div data-ax5docker-pane=\"\" data-ax5docker-path=\"' + myself.panelPath + '\" style=\"flex-grow: ' + (myself.flexGrow || 1) + ';\">' + '<ul data-ax5docker-pane-tabs=\"\"></ul>' + '<div data-ax5docker-pane-tabs-more=\"\">' + cfg.icons.more + '</div>' + '<div data-ax5docker-pane-item-views=\"\"></div>' + '</div>');\n                        $parent.append($dom);\n\n                        if (U.isArray(myself.panels)) {\n                            myself.panels.forEach(function (P, pIndex) {\n                                if (P.active) activeIndex = pIndex;\n                            });\n                            if (activeIndex === -1) activeIndex = 0;\n                            myself.panels[activeIndex].active = true;\n\n                            myself.panels.forEach(function (P, _pIndex) {\n                                P.panelIndex = _pIndex;\n                                appendProcessor[P.type]($dom, myself, P, _pIndex);\n                            });\n                        }\n\n                        $dom = null;\n                        activeIndex = null;\n                    },\n                    panel: function panel($parent, parent, myself, pIndex) {\n                        var $dom = void 0;\n                        myself.panelPath = getPanelPath(parent, pIndex);\n                        myself.$label = jQuery('<li data-ax5docker-pane-tab=\"' + pIndex + '\" data-ax5docker-path=\"' + myself.panelPath + '\">' + '<div class=\"title\">' + myself.name + '</div>' + '<div class=\"close-icon\">' + cfg.icons.close + '</div>' + '</li>');\n\n                        if (!myself.$item) {\n                            myself.$item = jQuery('<div data-ax5docker-pane-item=\"' + pIndex + '\" data-ax5docker-pane-id=\"' + getPanelId() + '\" data-ax5docker-path=\"' + myself.panelPath + '\"></div>');\n                        }\n\n                        if (parent && parent.type == \"stack\") {\n                            if (myself.active) {\n                                if (!myself.builded) controlPanel(myself, \"init\");\n                                controlPanel(myself, \"active\");\n                            }\n                            $parent.find('[data-ax5docker-pane-tabs]').append(myself.$label);\n                            $parent.find('[data-ax5docker-pane-item-views]').append(myself.$item);\n                        } else {\n                            $dom = jQuery('<div data-ax5docker-pane=\"\" data-ax5docker-path=\"' + myself.panelPath + '\" style=\"flex-grow: ' + (myself.flexGrow || 1) + ';\">' + '<ul data-ax5docker-pane-tabs=\"\"></ul>' + '<div data-ax5docker-pane-tabs-aside=\"\">' + cfg.icons.more + '</div>' + '<div data-ax5docker-pane-item-views=\"\"></div>' + '</div>');\n\n                            if (!myself.builded) controlPanel(myself, \"init\");\n                            controlPanel(myself, \"active\");\n\n                            $dom.find('[data-ax5docker-pane-tabs]').append(myself.$label);\n                            $dom.find('[data-ax5docker-pane-item-views]').append(myself.$item);\n\n                            $parent.append($dom);\n                        }\n\n                        $dom = null;\n                    },\n                    resizeHandle: function resizeHandle($parent, parent, myself, pIndex) {\n                        var $dom = jQuery('<div data-ax5docker-resize-handle=\"' + parent.type + \"/\" + parent.panelPath + \"/\" + pIndex + '\"></div>');\n                        $parent.append($dom);\n                        $dom = null;\n                    },\n                    row: function row($parent, parent, myself, pIndex) {\n                        var $dom = void 0;\n                        myself.panelPath = getPanelPath(parent, pIndex);\n                        if (parent && parent.type == \"stack\") {\n                            throw \"The 'stack' type child nodes are allowed only for the 'panel' type.\";\n                        }\n                        $dom = jQuery('<div data-ax5docker-pane-axis=\"row\" data-ax5docker-path=\"' + myself.panelPath + '\" style=\"flex-grow: ' + (myself.flexGrow || 1) + ';\"></div>');\n                        $parent.append($dom);\n\n                        if (U.isArray(myself.panels)) {\n                            myself.panels.forEach(function (P, _pIndex) {\n                                if (_pIndex > 0) appendProcessor[\"resizeHandle\"]($dom, myself, P, _pIndex);\n                                P.panelIndex = _pIndex;\n                                appendProcessor[P.type]($dom, myself, P, _pIndex);\n                            });\n                        }\n\n                        $dom = null;\n                    },\n                    column: function column($parent, parent, myself, pIndex) {\n                        var $dom = void 0;\n                        myself.panelPath = getPanelPath(parent, pIndex);\n                        if (parent && parent.type == \"stack\") {\n                            throw \"The 'stack' type child nodes are allowed only for the 'panel' type.\";\n                        }\n                        $dom = jQuery('<div data-ax5docker-pane-axis=\"column\" data-ax5docker-path=\"' + myself.panelPath + '\" style=\"flex-grow: ' + (myself.flexGrow || 1) + ';\"></div>');\n                        $parent.append($dom);\n\n                        if (U.isArray(myself.panels)) {\n                            myself.panels.forEach(function (P, _pIndex) {\n                                if (_pIndex > 0) appendProcessor[\"resizeHandle\"]($dom, myself, P, _pIndex);\n                                P.panelIndex = _pIndex;\n                                appendProcessor[P.type]($dom, myself, P, _pIndex);\n                            });\n                        }\n\n                        $dom = null;\n                    }\n                };\n\n                var $root = jQuery('<div data-ax5docker-panes=\"\"></div>');\n                if (_this.panels[0]) appendProcessor[_this.panels[0].type]($root, null, _this.panels[0], 0);\n                _this.$target.html($root);\n\n                _this.$target.off(\"click.ax5docker-pane\").on(\"click.ax5docker-pane\", \"[data-ax5docker-pane-tab] .close-icon\", function (e) {\n                    closePanel($(this).parents('[data-ax5docker-pane-tab]'));\n                    U.stopEvent(e);\n                }).on(\"click.ax5docker-pane\", \"[data-ax5docker-pane-tab]\", function (e) {\n                    // pane, panelIndex 인자 변경.\n                    var $clickedLabel = jQuery(this);\n                    var pane = getPanel($clickedLabel.parents('[data-ax5docker-pane]').attr(\"data-ax5docker-path\"));\n                    var panelIndex = $clickedLabel.attr(\"data-ax5docker-pane-tab\");\n\n                    if (!$clickedLabel.hasClass(\"active\")) {\n                        changeActiveStackPanel(pane, panelIndex);\n                    }\n\n                    $clickedLabel = null;\n                    pane = null;\n                    panelIndex = null;\n                    U.stopEvent(e);\n                }).on(\"click.ax5docker-pane\", \"[data-ax5docker-pane-tabs-more]\", function (e) {\n                    openStackPanelMore($(this).parents('[data-ax5docker-pane]'), e);\n                    U.stopEvent(e);\n                });\n\n                _this.$target.off(\"mousedown.ax5docker-pane-resize\").off(\"dragstart.ax5docker-pane-resize\").on(\"mousedown.ax5docker-pane-resize\", \"[data-ax5docker-resize-handle]\", function (e) {\n                    var datas = this.getAttribute(\"data-ax5docker-resize-handle\").split(/\\//g);\n\n                    // panelResizerEvent.init\n                    self.xvar.mousePosition = getMousePosition(e);\n                    self.xvar.resizerType = datas[0];\n                    self.xvar.resizerPath = datas[1];\n                    self.xvar.resizerIndex = datas[2];\n                    // 주변 패널들\n                    self.xvar.resizer$dom = $(this);\n                    self.xvar.resizerParent$dom = self.xvar.resizer$dom.parent();\n                    self.xvar.resizerPrevGrow = U.number(self.xvar.resizer$dom.prev().css(\"flex-grow\"));\n                    self.xvar.resizerNextGrow = U.number(self.xvar.resizer$dom.next().css(\"flex-grow\"));\n\n                    if (self.xvar.resizerType == \"row\") {\n                        //self.xvar.resizerCanvasWidth = self.xvar.resizerParent$dom.innerWidth();\n                        self.xvar.resizerCanvasWidth = self.xvar.resizer$dom.prev().innerWidth() + self.xvar.resizer$dom.next().innerWidth() + self.xvar.resizer$dom.width();\n                    } else {\n                        //self.xvar.resizerCanvasHeight = self.xvar.resizerParent$dom.innerHeight();\n                        self.xvar.resizerCanvasHeight = self.xvar.resizer$dom.prev().innerHeight() + self.xvar.resizer$dom.next().innerHeight() + self.xvar.resizer$dom.height();\n                    }\n\n                    panelResizerEvent.on(this);\n                    U.stopEvent(e);\n                }).on(\"dragstart.ax5docker-pane-resize\", \"[data-ax5docker-resize-handle]\", function (e) {\n                    U.stopEvent(e);\n                    return false;\n                });\n\n                // stackPane tabs 스크롤처리\n                alignStackPane();\n                $root = null;\n            };\n\n            /**\n             * 액티브 패널 변경(stack인 상황에서)\n             * @param pane\n             * @param panelIndex\n             * @returns {boolean}\n             */\n            var changeActiveStackPanel = function changeActiveStackPanel(pane, panelIndex) {\n                var panel = pane.panels[panelIndex];\n\n                for (var p = 0, pl = pane.panels.length; p < pl; p++) {\n                    if (pane.panels[p].active) {\n                        controlPanel(pane.panels[p], \"deactive\");\n                    }\n                }\n\n                if (!panel.builded) controlPanel(panel, \"init\");\n                controlPanel(panel, \"active\");\n\n                pane = null;\n                panelIndex = null;\n                panel = null;\n                return _this;\n                // todo : 액티브 패널이 변경되면 scrollLeft 조정\n            };\n\n            /**\n             * 패널 삭제하기\n             * @param clickedLabel\n             * @returns {ax5docker}\n             */\n            var closePanel = function closePanel(clickedLabel) {\n                var $clickedLabel = jQuery(clickedLabel),\n                    panelPath = $clickedLabel.attr(\"data-ax5docker-path\"),\n                    panel = getPanel(panelPath);\n\n                controlPanel(panel, \"destroy\");\n\n                $clickedLabel = null;\n                panelPath = null;\n                panel = null;\n                return _this;\n            };\n\n            var openStackPanelMore = function openStackPanelMore(stackPane, e) {\n                var $stackPane = jQuery(stackPane),\n                    panePath = $stackPane.attr(\"data-ax5docker-path\"),\n                    pane = getPanel(panePath);\n\n                if (_this.menu) {\n                    var menuItems = U.map(pane.panels, function (index) {\n                        return {\n                            label: this.name,\n                            index: index,\n                            panePath: panePath\n                        };\n                    });\n\n                    _this.menu.setConfig({\n                        items: menuItems,\n                        onClick: function onClick() {\n                            //console.log(pane);\n                            changeActiveStackPanel(getPanel(this.panePath), this.index);\n                        }\n                    });\n\n                    _this.menu.popup(e);\n                } else {\n                    console.log(pane.panels);\n                    throw \"'ax5ui-menu' is required to implement the function.\";\n                }\n\n                $stackPane = null;\n                panePath = null;\n                pane = null;\n                return _this;\n            };\n\n            var panelResizerEvent = {\n                \"on\": function on(_resizer) {\n                    var $resizer = $(_resizer);\n                    var resizerPositionLeft = $resizer.offset().left;\n                    var dockerTargetOffsetLeft = _this.$target.offset().left;\n\n                    jQuery(document.body).bind(\"mousemove.ax5docker-\" + _this.instanceId, function (e) {\n                        var mouseObj = getMousePosition(e);\n                        var da_grow = void 0;\n                        if (self.xvar.resizerLived) {\n                            if (self.xvar.resizerType == \"row\") {\n                                self.xvar.__da = mouseObj.clientX - self.xvar.mousePosition.clientX;\n                                da_grow = U.number(self.xvar.__da * 2 / self.xvar.resizerCanvasWidth, { round: 6 });\n\n                                self.xvar.resizer$dom.prev().css({ \"flex-grow\": self.xvar.resizerPrevGrow + da_grow });\n                                self.xvar.resizer$dom.next().css({ \"flex-grow\": self.xvar.resizerNextGrow - da_grow });\n                            } else {\n                                self.xvar.__da = mouseObj.clientY - self.xvar.mousePosition.clientY;\n                                da_grow = U.number(self.xvar.__da * 2 / self.xvar.resizerCanvasHeight, { round: 6 });\n\n                                self.xvar.resizer$dom.prev().css({ \"flex-grow\": self.xvar.resizerPrevGrow + da_grow });\n                                self.xvar.resizer$dom.next().css({ \"flex-grow\": self.xvar.resizerNextGrow - da_grow });\n                            }\n                        } else {\n                            self.xvar.resizerLived = true;\n                        }\n\n                        mouseObj = null;\n                        da_grow = null;\n                    }).bind(\"mouseup.ax5docker-\" + _this.instanceId, function (e) {\n                        panelResizerEvent.off.call(self);\n                        U.stopEvent(e);\n                    }).bind(\"mouseleave.ax5docker-\" + _this.instanceId, function (e) {\n                        panelResizerEvent.off.call(self);\n                        U.stopEvent(e);\n                    });\n\n                    jQuery(document.body).attr('unselectable', 'on').css('user-select', 'none').on('selectstart', false);\n                },\n                \"off\": function off() {\n                    self.xvar.resizerLived = false;\n\n                    if (typeof _this.xvar.__da === \"undefined\") {} else {\n                        var $prevPanel = self.xvar.resizer$dom.prev(),\n                            $nextPanel = self.xvar.resizer$dom.next(),\n                            prevPane = getPanel($prevPanel.attr(\"data-ax5docker-path\")),\n                            nextPane = getPanel($nextPanel.attr(\"data-ax5docker-path\"));\n\n                        prevPane.flexGrow = U.number($prevPanel.css(\"flex-grow\"));\n                        nextPane.flexGrow = U.number($nextPanel.css(\"flex-grow\"));\n\n                        $prevPanel = null;\n                        $nextPanel = null;\n                        prevPane = null;\n                        nextPane = null;\n                    }\n\n                    jQuery(document.body).unbind(\"mousemove.ax5docker-\" + _this.instanceId).unbind(\"mouseup.ax5docker-\" + _this.instanceId).unbind(\"mouseleave.ax5docker-\" + _this.instanceId);\n\n                    jQuery(document.body).removeAttr('unselectable').css('user-select', 'auto').off('selectstart');\n                }\n            };\n\n            /**\n             * stack type panel resize되면 탭 스크롤 처리 관련 처리\n             */\n            var debounceFn = ax5.util.debounce(function (fn) {\n                fn();\n            }, cfg.animateTime);\n\n            var alignStackPane = function alignStackPane() {\n                debounceFn(function () {\n                    this.$target.find('[data-ax5docker-pane-tabs]').each(function () {\n                        var $this = jQuery(this).parent();\n                        if (this.scrollWidth > this.clientWidth) {\n                            $this.addClass(\"tabs-scrolled\");\n                        } else {\n                            $this.removeClass(\"tabs-scrolled\");\n                        }\n                        $this = null;\n                    });\n                }.bind(_this));\n            };\n\n            /**\n             * 패널중에 null이 된 요소를 찾아 panels를 정리 합니다.\n             * @returns {*}\n             */\n            var arrangePanel = function arrangePanel() {\n                // console.log(this.$target.find('[data-ax5docker-pane]'));\n                var panels = [];\n                var processor = {\n                    stack: function stack(myself) {\n                        if (!U.isArray(myself.panels)) return false;\n\n                        var newObj = {\n                            type: \"stack\",\n                            panels: []\n                        };\n\n                        myself.panels.forEach(function (P, _pIndex) {\n                            if (P) {\n                                var _p = processor[P.type](P);\n                                if (_p) newObj.panels.push(_p);\n                                _p = null;\n                            }\n                        });\n\n                        if (newObj.panels.length == 0) {\n                            return null;\n                        } else if (newObj.panels.length < 2) {\n                            newObj = newObj.panels[0];\n                        }\n\n                        return newObj;\n                    },\n                    panel: function panel(myself) {\n                        //console.log(myself);\n                        return myself;\n                    },\n                    row: function row(myself) {\n\n                        if (!U.isArray(myself.panels)) return false;\n\n                        var newObj = {\n                            type: \"row\",\n                            panels: []\n                        };\n\n                        myself.panels.forEach(function (P, _pIndex) {\n                            if (P) {\n                                var _p = processor[P.type](P);\n                                if (_p) newObj.panels.push(_p);\n                                _p = null;\n                            }\n                        });\n\n                        if (newObj.panels.length == 0) {\n                            return null;\n                        } else if (newObj.panels.length < 2) {\n                            newObj = newObj.panels[0];\n                        }\n\n                        return newObj;\n                    },\n                    column: function column(myself) {\n                        if (!U.isArray(myself.panels)) return false;\n\n                        var newObj = {\n                            type: \"column\",\n                            panels: []\n                        };\n\n                        myself.panels.forEach(function (P, _pIndex) {\n                            if (P) {\n                                var _p = processor[P.type](P);\n                                if (_p) newObj.panels.push(_p);\n                                _p = null;\n                            }\n                        });\n\n                        if (newObj.panels.length == 0) {\n                            return null;\n                        } else if (newObj.panels.length < 2) {\n                            newObj = newObj.panels[0];\n                        }\n\n                        return newObj;\n                    }\n                };\n\n                if (_this.panels[0]) {\n                    _this.panels[0] = processor[_this.panels[0].type](_this.panels[0]);\n                } else {\n                    _this.panels = [];\n                }\n\n                repaintPanels();\n            };\n\n            /**\n             * @method ax5docker.setConfig\n             * @param {Object} config\n             * @param {Array} config.panels\n             */\n            this.init = function (_config) {\n                cfg = jQuery.extend(true, {}, cfg, _config);\n                if (!cfg.target) {\n                    console.log(ax5.info.getError(\"ax5docker\", \"401\", \"init\"));\n                    return this;\n                }\n                // memory target\n                this.$target = jQuery(cfg.target);\n                // set panels\n                this.panels = cfg.panels || [];\n                // event Functions\n                this.onStateChanged = cfg.onStateChanged;\n                this.onClick = cfg.onClick;\n                this.onLoad = cfg.onLoad;\n                this.onDataChanged = cfg.onDataChanged;\n\n                if (ax5.ui.menu) {\n                    this.menu = new ax5.ui.menu({\n                        theme: 'default',\n                        position: \"absolute\",\n                        icons: {\n                            'arrow': '▸'\n                        }\n                    });\n                }\n\n                jQuery(window).bind(\"resize.ax5docker-\" + this.id, function () {\n                    // stackPane tabs 스크롤처리\n                    alignStackPane();\n                });\n            };\n\n            /**\n             * @method ax5docker.setPanels\n             * @returns {ax5docker}\n             */\n            this.setPanels = function (_panels) {\n                // set panels\n                this.panels = _panels || [];\n\n                // 패널 다시 그리기\n                repaintPanels();\n                return this;\n            };\n\n            /**\n             * @method ax5docker.addModule\n             * @param modules\n             * @returns {ax5docker}\n             */\n            this.addModule = function (modules) {\n                if (U.isObject(modules)) {\n                    jQuery.extend(true, this.modules, modules);\n                }\n                return this;\n            };\n\n            /**\n             * repaint panels of docker\n             * @method ax5docker.repaint\n             * @returns {ax5docker}\n             */\n            this.repaint = function () {\n                // 패널 다시 그리기\n                repaintPanels();\n                return this;\n            };\n\n            /**\n             * @method ax5docker.addPanel\n             * @param {String} _addPath - Position path to add panel\n             * @param _addType\n             * @param _panel\n             * @param _panelIndex\n             * @returns {ax5docker}\n             * @example\n             * ```js\n             * myDocker.addPanel('0.1', 'stack', {type:'panel', name:'addPanel', moduleName: 'content'});\n             *\n             * ```\n             */\n            this.addPanel = function (_addPath, _addType, _panel, _panelIndex) {\n                if (_addPath == \"undefined\") _addPath = \"0\";\n                _addPath = _addPath.replace(/[a-zA-Z\\[\\]]+/g, \"\").replace(/(\\d+)/g, function (a, b) {\n                    return \"panels[\" + a + \"]\";\n                });\n\n                //_addPath = [].concat(_addPath.split(/[\\.]/g));\n                var pane = getPanel(_addPath);\n\n                console.log(pane);\n\n                var panelProcessor = {\n                    \"stack\": function stack(_pane, _addType, _panel) {\n                        var copyPanel = jQuery.extend({}, _pane),\n                            addProcessor = {\n                            \"stack\": function stack(_pane, _panel) {\n                                _pane.panels.push(_panel);\n                                arrangePanel();\n                            },\n                            \"row-left\": function rowLeft(_pane, _panel) {\n                                var parentPath = _addPath.substr(0, _addPath.lastIndexOf(\".\"));\n                                var parentPane = getPanel(parentPath);\n                                if (parentPane.type == \"row\") {\n                                    this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                } else {\n                                    _pane = setPanel(_addPath, {\n                                        type: \"row\",\n                                        panels: []\n                                    });\n                                    _pane.panels.push(_panel);\n                                    _pane.panels.push(copyPanel);\n                                    arrangePanel();\n                                }\n                            },\n                            \"row-right\": function rowRight(_pane, _panel) {\n                                var parentPath = _addPath.substr(0, _addPath.lastIndexOf(\".\"));\n                                var parentPane = getPanel(parentPath);\n                                if (parentPane.type == \"row\") {\n                                    this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                } else {\n                                    _pane = setPanel(_addPath, {\n                                        type: \"row\",\n                                        panels: []\n                                    });\n                                    _pane.panels.push(copyPanel);\n                                    _pane.panels.push(_panel);\n                                    arrangePanel();\n                                }\n                            },\n                            \"column-top\": function columnTop(_pane, _panel) {\n                                var parentPath = _addPath.substr(0, _addPath.lastIndexOf(\".\"));\n                                var parentPane = getPanel(parentPath);\n                                if (parentPane.type == \"column\") {\n                                    this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                } else {\n                                    _pane = setPanel(_addPath, {\n                                        type: \"column\",\n                                        panels: []\n                                    });\n                                    _pane.panels.push(_panel);\n                                    _pane.panels.push(copyPanel);\n                                    arrangePanel();\n                                }\n                            },\n                            \"column-bottom\": function columnBottom(_pane, _panel) {\n                                var parentPath = _addPath.substr(0, _addPath.lastIndexOf(\".\"));\n                                var parentPane = getPanel(parentPath);\n                                if (parentPane.type == \"column\") {\n                                    this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                } else {\n                                    _pane = setPanel(_addPath, {\n                                        type: \"column\",\n                                        panels: []\n                                    });\n                                    _pane.panels.push(copyPanel);\n                                    _pane.panels.push(_panel);\n                                    arrangePanel();\n                                }\n                            }\n                        };\n                        if (_addType in addProcessor) {\n                            addProcessor[_addType].call(this, _pane, _panel);\n                        }\n\n                        copyPanel = null;\n                        addProcessor = null;\n                    },\n                    \"row\": function row(_pane, _addType, _panel, _panelIndex) {\n                        var copyPanel = jQuery.extend({}, _pane);\n                        var addProcessor = {\n                            \"stack\": function stack(_pane, _panel) {\n                                // 처리 할 수 없는 상황 첫번째 자식을 찾아 재 요청\n                                if (_pane.panels[0] && _pane.panels[0].panelPath) {\n                                    this.addPanel(_pane.panels[0].panelPath, _addType, _panel);\n                                }\n                            },\n                            \"row-left\": function rowLeft(_pane, _panel, _panelIndex) {\n                                var parentPath = _addPath.substr(0, _addPath.lastIndexOf(\".\"));\n                                var parentPane = getPanel(parentPath);\n                                if (parentPane.type == \"row\") {\n                                    _pane.panels.splice(_panelIndex, 0, _panel);\n                                    arrangePanel();\n                                } else {\n                                    _pane = setPanel(_addPath, {\n                                        type: \"row\",\n                                        panels: []\n                                    });\n                                    _pane.panels.push(_panel);\n                                    _pane.panels.push(copyPanel);\n                                    arrangePanel();\n                                }\n                            },\n                            \"row-right\": function rowRight(_pane, _panel, _panelIndex) {\n                                var parentPath = _addPath.substr(0, _addPath.lastIndexOf(\".\"));\n                                var parentPane = getPanel(parentPath);\n                                if (parentPane.type == \"row\") {\n                                    _pane.panels.splice(_panelIndex + 1, 0, _panel);\n                                    arrangePanel();\n                                } else {\n                                    _pane = setPanel(_addPath, {\n                                        type: \"row\",\n                                        panels: []\n                                    });\n                                    _pane.panels.push(copyPanel);\n                                    _pane.panels.push(_panel);\n                                    arrangePanel();\n                                }\n                            },\n                            \"column-top\": function columnTop(_pane, _panel, _panelIndex) {\n                                var parentPath = _addPath.substr(0, _addPath.lastIndexOf(\".\"));\n                                var parentPane = getPanel(parentPath);\n                                if (parentPane.type == \"column\") {\n                                    this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                } else {\n                                    _pane = setPanel(_addPath, {\n                                        type: \"column\",\n                                        panels: []\n                                    });\n                                    _pane.panels.push(_panel);\n                                    _pane.panels.push(copyPanel);\n                                    arrangePanel();\n                                }\n                            },\n                            \"column-bottom\": function columnBottom(_pane, _panel, _panelIndex) {\n                                var parentPath = _addPath.substr(0, _addPath.lastIndexOf(\".\"));\n                                var parentPane = getPanel(parentPath);\n                                if (parentPane.type == \"column\") {\n                                    this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                } else {\n                                    _pane = setPanel(_addPath, {\n                                        type: \"column\",\n                                        panels: []\n                                    });\n                                    _pane.panels.push(copyPanel);\n                                    _pane.panels.push(_panel);\n                                    arrangePanel();\n                                }\n                            }\n                        };\n                        if (_addType in addProcessor) {\n                            addProcessor[_addType].call(this, _pane, _panel, _panelIndex);\n                        }\n\n                        addProcessor = null;\n                        copyPanel = null;\n                    },\n                    \"column\": function column(_pane, _addType, _panel, _panelIndex) {\n                        var copyPanel = jQuery.extend({}, _pane);\n                        var addProcessor = {\n                            \"stack\": function stack(_pane, _panel) {\n                                if (_pane.panels[0] && _pane.panels[0].panelPath) {\n                                    this.addPanel(_pane.panels[0].panelPath, _addType, _panel);\n                                }\n                            },\n                            \"row-left\": function rowLeft(_pane, _panel) {\n                                var parentPath = _addPath.substr(0, _addPath.lastIndexOf(\".\"));\n                                var parentPane = getPanel(parentPath);\n                                if (parentPane.type == \"row\") {\n                                    this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                } else {\n                                    _pane = setPanel(_addPath, {\n                                        type: \"row\",\n                                        panels: []\n                                    });\n                                    _pane.panels.push(_panel);\n                                    _pane.panels.push(copyPanel);\n                                    arrangePanel();\n                                }\n                            },\n                            \"row-right\": function rowRight(_pane, _panel) {\n                                var parentPath = _addPath.substr(0, _addPath.lastIndexOf(\".\"));\n                                var parentPane = getPanel(parentPath);\n                                if (parentPane.type == \"row\") {\n                                    this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                } else {\n                                    _pane = setPanel(_addPath, {\n                                        type: \"row\",\n                                        panels: []\n                                    });\n                                    _pane.panels.push(copyPanel);\n                                    _pane.panels.push(_panel);\n                                    arrangePanel();\n                                }\n                            },\n                            \"column-top\": function columnTop(_pane, _panel) {\n                                _pane.panels.splice(_panelIndex, 0, _panel);\n                                arrangePanel();\n                            },\n                            \"column-bottom\": function columnBottom(_pane, _panel) {\n                                _pane.panels.splice(_panelIndex + 1, 0, _panel);\n                                arrangePanel();\n                            }\n                        };\n                        if (_addType in addProcessor) {\n                            addProcessor[_addType].call(this, _pane, _panel);\n                        }\n\n                        addProcessor = null;\n                        copyPanel = null;\n                    },\n                    \"panel\": function panel(_pane, _addType, _panel) {\n                        var copyPanel = jQuery.extend({}, _pane),\n                            addProcessor = {\n                            \"stack\": function stack(_pane, _panel) {\n                                // _pane stack으로 재구성\n                                _pane = setPanel(_addPath, {\n                                    type: \"stack\",\n                                    panels: []\n                                });\n                                _pane.panels.push(copyPanel);\n                                _pane.panels.push(_panel);\n                                arrangePanel();\n                            },\n                            \"row-left\": function rowLeft(_pane, _panel) {\n                                var parentPath = _addPath.substr(0, _addPath.lastIndexOf(\".\"));\n                                var parentPane = getPanel(parentPath);\n                                if (parentPane.type == \"row\") {\n                                    this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                } else {\n                                    _pane = setPanel(_addPath, {\n                                        type: \"row\",\n                                        panels: []\n                                    });\n                                    _pane.panels.push(_panel);\n                                    _pane.panels.push(copyPanel);\n                                    arrangePanel();\n                                }\n                            },\n                            \"row-right\": function rowRight(_pane, _panel) {\n                                var parentPath = _addPath.substr(0, _addPath.lastIndexOf(\".\"));\n                                var parentPane = getPanel(parentPath);\n                                if (parentPane.type == \"row\") {\n                                    this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                } else {\n                                    _pane = setPanel(_addPath, {\n                                        type: \"row\",\n                                        panels: []\n                                    });\n                                    _pane.panels.push(copyPanel);\n                                    _pane.panels.push(_panel);\n                                    arrangePanel();\n                                }\n                            },\n                            \"column-top\": function columnTop(_pane, _panel) {\n                                var parentPath = _addPath.substr(0, _addPath.lastIndexOf(\".\"));\n                                var parentPane = getPanel(parentPath);\n                                if (parentPane.type == \"column\") {\n                                    this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                } else {\n                                    _pane = setPanel(_addPath, {\n                                        type: \"column\",\n                                        panels: []\n                                    });\n                                    _pane.panels.push(_panel);\n                                    _pane.panels.push(copyPanel);\n                                    arrangePanel();\n                                }\n                            },\n                            \"column-bottom\": function columnBottom(_pane, _panel) {\n                                var parentPath = _addPath.substr(0, _addPath.lastIndexOf(\".\"));\n                                var parentPane = getPanel(parentPath);\n                                if (parentPane.type == \"column\") {\n                                    this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                } else {\n                                    _pane = setPanel(_addPath, {\n                                        type: \"column\",\n                                        panels: []\n                                    });\n                                    _pane.panels.push(copyPanel);\n                                    _pane.panels.push(_panel);\n                                    arrangePanel();\n                                }\n                            }\n                        };\n\n                        if (_addType in addProcessor) {\n                            addProcessor[_addType].call(this, _pane, _panel);\n                        }\n\n                        copyPanel = null;\n                        addProcessor = null;\n                    }\n                };\n\n                panelProcessor[pane.type].call(this, pane, _addType, _panel, _panelIndex);\n                return this;\n            };\n\n            // 클래스 생성자\n            this.main = function () {\n                if (arguments && U.isObject(arguments[0])) {\n                    this.setConfig(arguments[0]);\n                }\n            }.apply(this, arguments);\n        };\n\n        return ax5docker;\n    }());\n})();\n\n// todo : row > stack 구현 -- ok\n// todo : stack 패널 active change -- ok\n// todo : 패널삭제하기 -- ok ~ active 패널 정리.. -- ok\n// todo : 패널추가하기 -- ok\n// todo : 패널 스플릿 리사이즈 -- ok\n// todo : stack tab overflow 처리. -- ok\n// todo : 탭 포커싱와 탭 목록 메뉴 처리전\n// todo : 패널 drag & drop\n// ax5.ui.docker.tmpl\n(function () {\n\n    var DOCKER = ax5.ui.docker;\n\n    var panels = function panels(columnKeys) {\n        return \" \\n{{#panels}}\\n{{#panels}}\\n{{/panels}}\\n{{^panels}}\\n{{/panels}}\\n{{/panels}}\\n        \";\n    };\n\n    DOCKER.tmpl = {\n        \"panels\": panels,\n        get: function get(tmplName, data, columnKeys) {\n            return ax5.mustache.render(DOCKER.tmpl[tmplName].call(this, columnKeys), data);\n        }\n    };\n})();","/*\n * Copyright (c) 2017. tom@axisj.com\n * - github.com/thomasjang\n * - www.axisj.com\n */\n\n(function () {\n\n    let UI = ax5.ui,\n        U = ax5.util;\n\n    UI.addClass({\n        className: \"docker\",\n        version: \"${VERSION}\"\n    }, (function () {\n\n        /**\n         * @class ax5docker\n         * @classdesc\n         * @author tom@axisj.com\n         * @example\n         * ```\n         * var ax5docker = new ax5.ui.ax5docker();\n         * ```\n         */\n        let ax5docker = function () {\n            let self = this,\n                cfg;\n\n            this.instanceId = ax5.getGuid();\n            this.config = {\n                theme: 'default',\n                animateTime: 250,\n                columnKeys: {},\n                control: {},\n                icons: {\n                    close: 'X',\n                    more: '...'\n                }\n            };\n            this.xvar = {};\n            this.menu = null;\n\n            // 패널 정보\n            this.panels = [];\n            this.panelId = 0;\n\n            // 패널의 컨텐츠 모듈\n            this.modules = {};\n\n            cfg = this.config;\n\n            const getPanelId = () => {\n                return this.panelId++;\n            };\n\n            /**\n             * defaultModule은 패널의 모듈이 정의되지 않은 경우를 위해 준비된 오브젝트\n             * @type {{init: ((container, state)), active: ((container, state)), deactive: ((container, state)), destroy: ((container, state))}}\n             */\n            const defaultModule = {\n                init(container, state){\n                    container[\"$element\"].html(state.name);\n                },\n                active(container, state){\n\n                },\n                deactive(container, state){\n\n                },\n                destroy(container, state){\n\n                }\n            };\n\n            const getPanelPath = (parent, pIndex) => {\n                let paths = [];\n                if (parent && typeof parent.panelPath !== \"undefined\") {\n                    paths.push(parent.panelPath);\n                }\n\n                paths.push('panels[' + (pIndex || 0) + ']');\n                return paths.join(\".\");\n            };\n\n            const getPanel = (_panelPath) => {\n                let path = [],\n                    _path = (U.isArray(_panelPath)) ? [].concat(_panelPath) : [].concat(_panelPath.split(/[\\.\\[\\]]/g));\n\n                _path.forEach(function (n) {\n                    if (n !== \"\") path.push(\"[\\\"\" + n.replace(/['\\\"]/g, \"\") + \"\\\"]\");\n                });\n\n                try {\n                    return (Function(\"\", \"return this\" + path.join('') + \";\")).call(this);\n                } catch (e) {\n                    return;\n                }\n            };\n\n            const getParentPanel = (_panelPath) => {\n                let path = [],\n                    _path = (U.isArray(_panelPath)) ? [].concat(_panelPath) : [].concat(_panelPath.split(/[\\.\\[\\]]/g));\n                _path.pop();\n                _path.forEach(function (n) {\n                    if (n !== \"\") path.push(\"[\\\"\" + n.replace(/['\\\"]/g, \"\") + \"\\\"]\");\n                });\n\n                try {\n                    return (Function(\"\", \"return this\" + path.join('') + \";\")).call(this);\n                } catch (e) {\n                    return;\n                }\n            };\n\n            const setPanel = (_panelPath, _value) => {\n                let path = [],\n                    _path = (U.isArray(_panelPath)) ? [].concat(_panelPath) : [].concat(_panelPath.split(/[\\.\\[\\]]/g));\n\n                _path.forEach(function (n) {\n                    if (n !== \"\") path.push(\"[\\\"\" + n.replace(/['\\\"]/g, \"\") + \"\\\"]\");\n                });\n\n                return (Function(\"val\", \"return this\" + path.join('') + \" = val;\")).call(this, _value);\n            };\n\n            const getMousePosition = (e) => {\n                let mouseObj, originalEvent = (e.originalEvent) ? e.originalEvent : e;\n                mouseObj = ('changedTouches' in originalEvent) ? originalEvent.changedTouches[0] : originalEvent;\n                // clientX, Y 쓰면 스크롤에서 문제 발생\n                return {\n                    clientX: mouseObj.pageX,\n                    clientY: mouseObj.pageY\n                }\n            };\n\n            const controlPanel = (_panel, _control) => {\n                let moduleState = jQuery.extend(_panel.moduleState, {\n                        name: _panel.name\n                    }),\n                    moduleContainer = {\n                        '$element': _panel.$item\n                    },\n                    module;\n\n                let processor = {\n                    init: () => {\n                        _panel.builded = true;\n                        module = (_panel.moduleName in this.modules && 'init' in this.modules[_panel.moduleName]) ? this.modules[_panel.moduleName] : defaultModule;\n                        module.init(moduleContainer, moduleState);\n                    },\n                    active: () => {\n                        _panel.active = true;\n                        _panel.$label.addClass(\"active\");\n                        _panel.$item.addClass(\"active\");\n                        module = (_panel.moduleName in this.modules && 'active' in this.modules[_panel.moduleName]) ? this.modules[_panel.moduleName] : defaultModule;\n                        module.active(moduleContainer, moduleState);\n                    },\n                    deactive: () => {\n                        _panel.active = false;\n                        _panel.$label.removeClass(\"active\");\n                        _panel.$item.removeClass(\"active\");\n                        module = (_panel.moduleName in this.modules && 'deactive' in this.modules[_panel.moduleName]) ? this.modules[_panel.moduleName] : defaultModule;\n                        module.deactive(moduleContainer, moduleState);\n                    },\n                    destroy: () => {\n                        module = (_panel.moduleName in this.modules && 'destroy' in this.modules[_panel.moduleName]) ? this.modules[_panel.moduleName] : defaultModule;\n                        module.destroy(moduleContainer, moduleState);\n\n                        // 패널 데이터 제거.\n                        setPanel(_panel.panelPath, null);\n                        // 현재 패널 정보를 검사하여 패널 정보를 재 구성합니다.\n                        arrangePanel();\n                    }\n                };\n\n                // 사용자정의 함수 control.before, control.after에 전달할 인자 = that\n                let that = {\n                    panel: _panel,\n                    controlType: _control\n                };\n\n                // 비동기 처리 상황에 대응하기 위해 runProcessor를 별도 처리\n                let runProcessor = () => {\n                    processor[_control]();\n                    module = null;\n\n                    if (U.isFunction(cfg.control.after)) {\n                        cfg.control.after.call(that, that);\n                    }\n                };\n\n                if (processor[_control]) {\n                    if (U.isFunction(cfg.control.before)) {\n                        cfg.control.before.call(that, that, function () {\n                            runProcessor();\n                        });\n                    }\n                    else {\n                        runProcessor();\n                    }\n                }\n            };\n\n            /**\n             * 패널들의 패널 데이터 구조에 맞게 다시 그리기\n             */\n            const repaintPanels = () => {\n                const appendProcessor = {\n                    stack($parent, parent, myself, pIndex){\n\n                        let $dom, activeIndex = -1;\n                        myself.panelPath = getPanelPath(parent, pIndex);\n\n                        $dom = jQuery('<div data-ax5docker-pane=\"\" data-ax5docker-path=\"' + myself.panelPath + '\" style=\"flex-grow: ' + (myself.flexGrow || 1) + ';\">' +\n                            '<ul data-ax5docker-pane-tabs=\"\"></ul>' +\n                            '<div data-ax5docker-pane-tabs-more=\"\">' + cfg.icons.more + '</div>' +\n                            '<div data-ax5docker-pane-item-views=\"\"></div>' +\n                            '</div>');\n                        $parent.append($dom);\n\n                        if (U.isArray(myself.panels)) {\n                            myself.panels.forEach(function (P, pIndex) {\n                                if (P.active) activeIndex = pIndex;\n                            });\n                            if (activeIndex === -1) activeIndex = 0;\n                            myself.panels[activeIndex].active = true;\n\n                            myself.panels.forEach(function (P, _pIndex) {\n                                P.panelIndex = _pIndex;\n                                appendProcessor[P.type]($dom, myself, P, _pIndex);\n                            });\n                        }\n\n                        $dom = null;\n                        activeIndex = null;\n                    },\n                    panel($parent, parent, myself, pIndex){\n                        let $dom;\n                        myself.panelPath = getPanelPath(parent, pIndex);\n                        myself.$label = jQuery('<li data-ax5docker-pane-tab=\"' + pIndex + '\" data-ax5docker-path=\"' + myself.panelPath + '\">' +\n                            '<div class=\"title\">' + myself.name + '</div>' +\n                            '<div class=\"close-icon\">' + cfg.icons.close + '</div>' +\n                            '</li>');\n\n                        if (!myself.$item) {\n                            myself.$item = jQuery('<div data-ax5docker-pane-item=\"' + pIndex + '\" data-ax5docker-pane-id=\"' + getPanelId() + '\" data-ax5docker-path=\"' + myself.panelPath + '\"></div>');\n                        }\n\n                        if (parent && parent.type == \"stack\") {\n                            if (myself.active) {\n                                if (!myself.builded) controlPanel(myself, \"init\");\n                                controlPanel(myself, \"active\");\n                            }\n                            $parent.find('[data-ax5docker-pane-tabs]').append(myself.$label);\n                            $parent.find('[data-ax5docker-pane-item-views]').append(myself.$item);\n                        } else {\n                            $dom = jQuery('<div data-ax5docker-pane=\"\" data-ax5docker-path=\"' + myself.panelPath + '\" style=\"flex-grow: ' + (myself.flexGrow || 1) + ';\">' +\n                                '<ul data-ax5docker-pane-tabs=\"\"></ul>' +\n                                '<div data-ax5docker-pane-tabs-aside=\"\">' + cfg.icons.more + '</div>' +\n                                '<div data-ax5docker-pane-item-views=\"\"></div>' +\n                                '</div>');\n\n                            if (!myself.builded) controlPanel(myself, \"init\");\n                            controlPanel(myself, \"active\");\n\n                            $dom.find('[data-ax5docker-pane-tabs]').append(myself.$label);\n                            $dom.find('[data-ax5docker-pane-item-views]').append(myself.$item);\n\n                            $parent.append($dom);\n                        }\n\n                        $dom = null;\n                    },\n                    resizeHandle($parent, parent, myself, pIndex){\n                        let $dom = jQuery('<div data-ax5docker-resize-handle=\"' + parent.type + \"/\" + parent.panelPath + \"/\" + pIndex + '\"></div>');\n                        $parent.append($dom);\n                        $dom = null;\n                    },\n                    row($parent, parent, myself, pIndex){\n                        let $dom;\n                        myself.panelPath = getPanelPath(parent, pIndex);\n                        if (parent && parent.type == \"stack\") {\n                            throw \"The 'stack' type child nodes are allowed only for the 'panel' type.\";\n                        }\n                        $dom = jQuery('<div data-ax5docker-pane-axis=\"row\" data-ax5docker-path=\"' + myself.panelPath + '\" style=\"flex-grow: ' + (myself.flexGrow || 1) + ';\"></div>');\n                        $parent.append($dom);\n\n                        if (U.isArray(myself.panels)) {\n                            myself.panels.forEach(function (P, _pIndex) {\n                                if (_pIndex > 0) appendProcessor[\"resizeHandle\"]($dom, myself, P, _pIndex);\n                                P.panelIndex = _pIndex;\n                                appendProcessor[P.type]($dom, myself, P, _pIndex);\n                            });\n                        }\n\n                        $dom = null;\n                    },\n                    column($parent, parent, myself, pIndex){\n                        let $dom;\n                        myself.panelPath = getPanelPath(parent, pIndex);\n                        if (parent && parent.type == \"stack\") {\n                            throw \"The 'stack' type child nodes are allowed only for the 'panel' type.\";\n                        }\n                        $dom = jQuery('<div data-ax5docker-pane-axis=\"column\" data-ax5docker-path=\"' + myself.panelPath + '\" style=\"flex-grow: ' + (myself.flexGrow || 1) + ';\"></div>');\n                        $parent.append($dom);\n\n                        if (U.isArray(myself.panels)) {\n                            myself.panels.forEach(function (P, _pIndex) {\n                                if (_pIndex > 0) appendProcessor[\"resizeHandle\"]($dom, myself, P, _pIndex);\n                                P.panelIndex = _pIndex;\n                                appendProcessor[P.type]($dom, myself, P, _pIndex);\n                            });\n                        }\n\n                        $dom = null;\n                    }\n                };\n\n                let $root = jQuery('<div data-ax5docker-panes=\"\"></div>');\n                if (this.panels[0]) appendProcessor[this.panels[0].type]($root, null, this.panels[0], 0);\n                this.$target.html($root);\n\n                this.$target\n                    .off(\"click.ax5docker-pane\")\n                    .on(\"click.ax5docker-pane\", \"[data-ax5docker-pane-tab] .close-icon\", function (e) {\n                        closePanel($(this).parents('[data-ax5docker-pane-tab]'));\n                        U.stopEvent(e);\n                    })\n                    .on(\"click.ax5docker-pane\", \"[data-ax5docker-pane-tab]\", function (e) {\n                        // pane, panelIndex 인자 변경.\n                        let $clickedLabel = jQuery(this);\n                        let pane = getPanel($clickedLabel.parents('[data-ax5docker-pane]').attr(\"data-ax5docker-path\"));\n                        let panelIndex = $clickedLabel.attr(\"data-ax5docker-pane-tab\");\n\n                        if (!$clickedLabel.hasClass(\"active\")) {\n                            changeActiveStackPanel(pane, panelIndex);\n                        }\n\n                        $clickedLabel = null;\n                        pane = null;\n                        panelIndex = null;\n                        U.stopEvent(e);\n                    })\n                    .on(\"click.ax5docker-pane\", \"[data-ax5docker-pane-tabs-more]\", function (e) {\n                        openStackPanelMore($(this).parents('[data-ax5docker-pane]'), e);\n                        U.stopEvent(e);\n                    });\n\n                this.$target\n                    .off(\"mousedown.ax5docker-pane-resize\")\n                    .off(\"dragstart.ax5docker-pane-resize\")\n                    .on(\"mousedown.ax5docker-pane-resize\", \"[data-ax5docker-resize-handle]\", function (e) {\n                        let datas = this.getAttribute(\"data-ax5docker-resize-handle\").split(/\\//g);\n\n                        // panelResizerEvent.init\n                        self.xvar.mousePosition = getMousePosition(e);\n                        self.xvar.resizerType = datas[0];\n                        self.xvar.resizerPath = datas[1];\n                        self.xvar.resizerIndex = datas[2];\n                        // 주변 패널들\n                        self.xvar.resizer$dom = $(this);\n                        self.xvar.resizerParent$dom = self.xvar.resizer$dom.parent();\n                        self.xvar.resizerPrevGrow = U.number(self.xvar.resizer$dom.prev().css(\"flex-grow\"));\n                        self.xvar.resizerNextGrow = U.number(self.xvar.resizer$dom.next().css(\"flex-grow\"));\n\n                        if (self.xvar.resizerType == \"row\") {\n                            //self.xvar.resizerCanvasWidth = self.xvar.resizerParent$dom.innerWidth();\n                            self.xvar.resizerCanvasWidth = self.xvar.resizer$dom.prev().innerWidth() + self.xvar.resizer$dom.next().innerWidth() + self.xvar.resizer$dom.width();\n                        } else {\n                            //self.xvar.resizerCanvasHeight = self.xvar.resizerParent$dom.innerHeight();\n                            self.xvar.resizerCanvasHeight = self.xvar.resizer$dom.prev().innerHeight() + self.xvar.resizer$dom.next().innerHeight() + self.xvar.resizer$dom.height();\n                        }\n\n                        panelResizerEvent.on(this);\n                        U.stopEvent(e);\n                    })\n                    .on(\"dragstart.ax5docker-pane-resize\", \"[data-ax5docker-resize-handle]\", function (e) {\n                        U.stopEvent(e);\n                        return false;\n                    });\n\n                // stackPane tabs 스크롤처리\n                alignStackPane();\n                $root = null;\n            };\n\n            /**\n             * 액티브 패널 변경(stack인 상황에서)\n             * @param pane\n             * @param panelIndex\n             * @returns {boolean}\n             */\n            const changeActiveStackPanel = (pane, panelIndex) => {\n                let panel = pane.panels[panelIndex];\n\n                for (let p = 0, pl = pane.panels.length; p < pl; p++) {\n                    if (pane.panels[p].active) {\n                        controlPanel(pane.panels[p], \"deactive\");\n                    }\n                }\n\n                if (!panel.builded) controlPanel(panel, \"init\");\n                controlPanel(panel, \"active\");\n\n                pane = null;\n                panelIndex = null;\n                panel = null;\n                return this;\n                // todo : 액티브 패널이 변경되면 scrollLeft 조정\n            };\n\n            /**\n             * 패널 삭제하기\n             * @param clickedLabel\n             * @returns {ax5docker}\n             */\n            const closePanel = (clickedLabel) => {\n                let $clickedLabel = jQuery(clickedLabel),\n                    panelPath = $clickedLabel.attr(\"data-ax5docker-path\"),\n                    panel = getPanel(panelPath);\n\n                controlPanel(panel, \"destroy\");\n\n                $clickedLabel = null;\n                panelPath = null;\n                panel = null;\n                return this;\n            };\n\n            const openStackPanelMore = (stackPane, e) => {\n                let $stackPane = jQuery(stackPane),\n                    panePath = $stackPane.attr(\"data-ax5docker-path\"),\n                    pane = getPanel(panePath);\n\n                if (this.menu) {\n                    let menuItems = U.map(pane.panels, function (index) {\n                        return {\n                            label: this.name,\n                            index: index,\n                            panePath: panePath\n                        }\n                    });\n\n                    this.menu.setConfig({\n                        items: menuItems,\n                        onClick: function () {\n                            //console.log(pane);\n                            changeActiveStackPanel(getPanel(this.panePath), this.index);\n                        }\n                    });\n\n                    this.menu.popup(e);\n                } else {\n                    console.log(pane.panels);\n                    throw \"'ax5ui-menu' is required to implement the function.\";\n                }\n\n                $stackPane = null;\n                panePath = null;\n                pane = null;\n                return this;\n            };\n\n            const panelResizerEvent = {\n                \"on\": (_resizer) => {\n                    const $resizer = $(_resizer);\n                    const resizerPositionLeft = $resizer.offset().left;\n                    const dockerTargetOffsetLeft = this.$target.offset().left;\n\n                    jQuery(document.body)\n                        .bind(\"mousemove.ax5docker-\" + this.instanceId, function (e) {\n                            let mouseObj = getMousePosition(e);\n                            let da_grow;\n                            if (self.xvar.resizerLived) {\n                                if (self.xvar.resizerType == \"row\") {\n                                    self.xvar.__da = mouseObj.clientX - self.xvar.mousePosition.clientX;\n                                    da_grow = U.number(self.xvar.__da * 2 / self.xvar.resizerCanvasWidth, {round: 6});\n\n                                    self.xvar.resizer$dom.prev().css({\"flex-grow\": self.xvar.resizerPrevGrow + da_grow});\n                                    self.xvar.resizer$dom.next().css({\"flex-grow\": self.xvar.resizerNextGrow - da_grow});\n                                } else {\n                                    self.xvar.__da = mouseObj.clientY - self.xvar.mousePosition.clientY;\n                                    da_grow = U.number(self.xvar.__da * 2 / self.xvar.resizerCanvasHeight, {round: 6});\n\n                                    self.xvar.resizer$dom.prev().css({\"flex-grow\": self.xvar.resizerPrevGrow + da_grow});\n                                    self.xvar.resizer$dom.next().css({\"flex-grow\": self.xvar.resizerNextGrow - da_grow});\n                                }\n                            } else {\n                                self.xvar.resizerLived = true;\n                            }\n\n                            mouseObj = null;\n                            da_grow = null;\n                        })\n                        .bind(\"mouseup.ax5docker-\" + this.instanceId, function (e) {\n                            panelResizerEvent.off.call(self);\n                            U.stopEvent(e);\n                        })\n                        .bind(\"mouseleave.ax5docker-\" + this.instanceId, function (e) {\n                            panelResizerEvent.off.call(self);\n                            U.stopEvent(e);\n                        });\n\n                    jQuery(document.body)\n                        .attr('unselectable', 'on')\n                        .css('user-select', 'none')\n                        .on('selectstart', false);\n                },\n                \"off\": () => {\n                    self.xvar.resizerLived = false;\n\n                    if (typeof this.xvar.__da === \"undefined\") {\n\n                    }\n                    else {\n                        let $prevPanel = self.xvar.resizer$dom.prev(),\n                            $nextPanel = self.xvar.resizer$dom.next(),\n                            prevPane = getPanel($prevPanel.attr(\"data-ax5docker-path\")),\n                            nextPane = getPanel($nextPanel.attr(\"data-ax5docker-path\"));\n\n                        prevPane.flexGrow = U.number($prevPanel.css(\"flex-grow\"));\n                        nextPane.flexGrow = U.number($nextPanel.css(\"flex-grow\"));\n\n                        $prevPanel = null;\n                        $nextPanel = null;\n                        prevPane = null;\n                        nextPane = null;\n                    }\n\n                    jQuery(document.body)\n                        .unbind(\"mousemove.ax5docker-\" + this.instanceId)\n                        .unbind(\"mouseup.ax5docker-\" + this.instanceId)\n                        .unbind(\"mouseleave.ax5docker-\" + this.instanceId);\n\n                    jQuery(document.body)\n                        .removeAttr('unselectable')\n                        .css('user-select', 'auto')\n                        .off('selectstart');\n                }\n            };\n\n            /**\n             * stack type panel resize되면 탭 스크롤 처리 관련 처리\n             */\n            const debounceFn = ax5.util.debounce(function (fn) {\n                fn();\n            }, cfg.animateTime);\n\n            const alignStackPane = () => {\n                debounceFn((function () {\n                    this.$target.find('[data-ax5docker-pane-tabs]').each(function () {\n                        let $this = jQuery(this).parent();\n                        if (this.scrollWidth > this.clientWidth) {\n                            $this.addClass(\"tabs-scrolled\");\n                        } else {\n                            $this.removeClass(\"tabs-scrolled\");\n                        }\n                        $this = null;\n                    });\n                }).bind(this));\n            };\n\n            /**\n             * 패널중에 null이 된 요소를 찾아 panels를 정리 합니다.\n             * @returns {*}\n             */\n            const arrangePanel = () => {\n                // console.log(this.$target.find('[data-ax5docker-pane]'));\n                const panels = [];\n                const processor = {\n                    stack(myself){\n                        if (!U.isArray(myself.panels)) return false;\n\n                        let newObj = {\n                            type: \"stack\",\n                            panels: []\n                        };\n\n                        myself.panels.forEach(function (P, _pIndex) {\n                            if (P) {\n                                let _p = processor[P.type](P);\n                                if (_p) newObj.panels.push(_p);\n                                _p = null;\n                            }\n                        });\n\n                        if (newObj.panels.length == 0) {\n                            return null;\n                        } else if (newObj.panels.length < 2) {\n                            newObj = newObj.panels[0];\n                        }\n\n                        return newObj;\n                    },\n                    panel(myself){\n                        //console.log(myself);\n                        return myself;\n                    },\n                    row(myself){\n\n                        if (!U.isArray(myself.panels)) return false;\n\n                        let newObj = {\n                            type: \"row\",\n                            panels: []\n                        };\n\n                        myself.panels.forEach(function (P, _pIndex) {\n                            if (P) {\n                                let _p = processor[P.type](P);\n                                if (_p) newObj.panels.push(_p);\n                                _p = null;\n                            }\n                        });\n\n                        if (newObj.panels.length == 0) {\n                            return null;\n                        } else if (newObj.panels.length < 2) {\n                            newObj = newObj.panels[0];\n                        }\n\n                        return newObj;\n                    },\n                    column(myself){\n                        if (!U.isArray(myself.panels)) return false;\n\n                        let newObj = {\n                            type: \"column\",\n                            panels: []\n                        };\n\n                        myself.panels.forEach(function (P, _pIndex) {\n                            if (P) {\n                                let _p = processor[P.type](P);\n                                if (_p) newObj.panels.push(_p);\n                                _p = null;\n                            }\n                        });\n\n                        if (newObj.panels.length == 0) {\n                            return null;\n                        } else if (newObj.panels.length < 2) {\n                            newObj = newObj.panels[0];\n                        }\n\n                        return newObj;\n                    },\n                };\n\n                if (this.panels[0]) {\n                    this.panels[0] = processor[this.panels[0].type](this.panels[0]);\n                } else {\n                    this.panels = [];\n                }\n\n                repaintPanels();\n            };\n\n            /**\n             * @method ax5docker.setConfig\n             * @param {Object} config\n             * @param {Array} config.panels\n             */\n            this.init = function (_config) {\n                cfg = jQuery.extend(true, {}, cfg, _config);\n                if (!cfg.target) {\n                    console.log(ax5.info.getError(\"ax5docker\", \"401\", \"init\"));\n                    return this;\n                }\n                // memory target\n                this.$target = jQuery(cfg.target);\n                // set panels\n                this.panels = cfg.panels || [];\n                // event Functions\n                this.onStateChanged = cfg.onStateChanged;\n                this.onClick = cfg.onClick;\n                this.onLoad = cfg.onLoad;\n                this.onDataChanged = cfg.onDataChanged;\n\n                if (ax5.ui.menu) {\n                    this.menu = new ax5.ui.menu({\n                        theme: 'default',\n                        position: \"absolute\",\n                        icons: {\n                            'arrow': '▸'\n                        }\n                    });\n                }\n\n                jQuery(window).bind(\"resize.ax5docker-\" + this.id, function () {\n                    // stackPane tabs 스크롤처리\n                    alignStackPane();\n                });\n            };\n\n            /**\n             * @method ax5docker.setPanels\n             * @returns {ax5docker}\n             */\n            this.setPanels = function (_panels) {\n                // set panels\n                this.panels = _panels || [];\n\n                // 패널 다시 그리기\n                repaintPanels();\n                return this;\n            };\n\n            /**\n             * @method ax5docker.addModule\n             * @param modules\n             * @returns {ax5docker}\n             */\n            this.addModule = function (modules) {\n                if (U.isObject(modules)) {\n                    jQuery.extend(true, this.modules, modules);\n                }\n                return this;\n            };\n\n            /**\n             * repaint panels of docker\n             * @method ax5docker.repaint\n             * @returns {ax5docker}\n             */\n            this.repaint = function () {\n                // 패널 다시 그리기\n                repaintPanels();\n                return this;\n            };\n\n            /**\n             * @method ax5docker.addPanel\n             * @param {String} _addPath - Position path to add panel\n             * @param _addType\n             * @param _panel\n             * @param _panelIndex\n             * @returns {ax5docker}\n             * @example\n             * ```js\n             * myDocker.addPanel('0.1', 'stack', {type:'panel', name:'addPanel', moduleName: 'content'});\n             *\n             * ```\n             */\n            this.addPanel = function (_addPath, _addType, _panel, _panelIndex) {\n                if (_addPath == \"undefined\") _addPath = \"0\";\n                _addPath = _addPath\n                    .replace(/[a-zA-Z\\[\\]]+/g, \"\")\n                    .replace(/(\\d+)/g, function (a, b) {\n                        return \"panels[\" + a + \"]\";\n                    });\n\n                //_addPath = [].concat(_addPath.split(/[\\.]/g));\n                let pane = getPanel(_addPath);\n\n                console.log(pane);\n\n                let panelProcessor = {\n                    \"stack\"(_pane, _addType, _panel){\n                        let copyPanel = jQuery.extend({}, _pane),\n                            addProcessor = {\n                                \"stack\"(_pane, _panel){\n                                    _pane.panels.push(_panel);\n                                    arrangePanel();\n                                },\n                                \"row-left\"(_pane, _panel){\n                                    let parentPath = _addPath.substr(0, _addPath.lastIndexOf(\".\"));\n                                    let parentPane = getPanel(parentPath);\n                                    if (parentPane.type == \"row\") {\n                                        this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                    } else {\n                                        _pane = setPanel(_addPath, {\n                                            type: \"row\",\n                                            panels: []\n                                        });\n                                        _pane.panels.push(_panel);\n                                        _pane.panels.push(copyPanel);\n                                        arrangePanel();\n                                    }\n                                },\n                                \"row-right\"(_pane, _panel){\n                                    let parentPath = _addPath.substr(0, _addPath.lastIndexOf(\".\"));\n                                    let parentPane = getPanel(parentPath);\n                                    if (parentPane.type == \"row\") {\n                                        this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                    } else {\n                                        _pane = setPanel(_addPath, {\n                                            type: \"row\",\n                                            panels: []\n                                        });\n                                        _pane.panels.push(copyPanel);\n                                        _pane.panels.push(_panel);\n                                        arrangePanel();\n                                    }\n                                },\n                                \"column-top\"(_pane, _panel){\n                                    let parentPath = _addPath.substr(0, _addPath.lastIndexOf(\".\"));\n                                    let parentPane = getPanel(parentPath);\n                                    if (parentPane.type == \"column\") {\n                                        this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                    } else {\n                                        _pane = setPanel(_addPath, {\n                                            type: \"column\",\n                                            panels: []\n                                        });\n                                        _pane.panels.push(_panel);\n                                        _pane.panels.push(copyPanel);\n                                        arrangePanel();\n                                    }\n                                },\n                                \"column-bottom\"(_pane, _panel){\n                                    let parentPath = _addPath.substr(0, _addPath.lastIndexOf(\".\"));\n                                    let parentPane = getPanel(parentPath);\n                                    if (parentPane.type == \"column\") {\n                                        this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                    } else {\n                                        _pane = setPanel(_addPath, {\n                                            type: \"column\",\n                                            panels: []\n                                        });\n                                        _pane.panels.push(copyPanel);\n                                        _pane.panels.push(_panel);\n                                        arrangePanel();\n                                    }\n                                }\n                            };\n                        if (_addType in addProcessor) {\n                            addProcessor[_addType].call(this, _pane, _panel);\n                        }\n\n                        copyPanel = null;\n                        addProcessor = null;\n                    },\n                    \"row\"(_pane, _addType, _panel, _panelIndex){\n                        let copyPanel = jQuery.extend({}, _pane);\n                        let addProcessor = {\n                            \"stack\"(_pane, _panel){\n                                // 처리 할 수 없는 상황 첫번째 자식을 찾아 재 요청\n                                if (_pane.panels[0] && _pane.panels[0].panelPath) {\n                                    this.addPanel(_pane.panels[0].panelPath, _addType, _panel);\n                                }\n                            },\n                            \"row-left\"(_pane, _panel, _panelIndex){\n                                let parentPath = _addPath.substr(0, _addPath.lastIndexOf(\".\"));\n                                let parentPane = getPanel(parentPath);\n                                if (parentPane.type == \"row\") {\n                                    _pane.panels.splice(_panelIndex, 0, _panel);\n                                    arrangePanel();\n                                } else {\n                                    _pane = setPanel(_addPath, {\n                                        type: \"row\",\n                                        panels: []\n                                    });\n                                    _pane.panels.push(_panel);\n                                    _pane.panels.push(copyPanel);\n                                    arrangePanel();\n                                }\n                            },\n                            \"row-right\"(_pane, _panel, _panelIndex){\n                                let parentPath = _addPath.substr(0, _addPath.lastIndexOf(\".\"));\n                                let parentPane = getPanel(parentPath);\n                                if (parentPane.type == \"row\") {\n                                    _pane.panels.splice(_panelIndex + 1, 0, _panel);\n                                    arrangePanel();\n                                } else {\n                                    _pane = setPanel(_addPath, {\n                                        type: \"row\",\n                                        panels: []\n                                    });\n                                    _pane.panels.push(copyPanel);\n                                    _pane.panels.push(_panel);\n                                    arrangePanel();\n                                }\n                            },\n                            \"column-top\"(_pane, _panel, _panelIndex){\n                                let parentPath = _addPath.substr(0, _addPath.lastIndexOf(\".\"));\n                                let parentPane = getPanel(parentPath);\n                                if (parentPane.type == \"column\") {\n                                    this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                } else {\n                                    _pane = setPanel(_addPath, {\n                                        type: \"column\",\n                                        panels: []\n                                    });\n                                    _pane.panels.push(_panel);\n                                    _pane.panels.push(copyPanel);\n                                    arrangePanel();\n                                }\n                            },\n                            \"column-bottom\"(_pane, _panel, _panelIndex){\n                                let parentPath = _addPath.substr(0, _addPath.lastIndexOf(\".\"));\n                                let parentPane = getPanel(parentPath);\n                                if (parentPane.type == \"column\") {\n                                    this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                } else {\n                                    _pane = setPanel(_addPath, {\n                                        type: \"column\",\n                                        panels: []\n                                    });\n                                    _pane.panels.push(copyPanel);\n                                    _pane.panels.push(_panel);\n                                    arrangePanel();\n                                }\n                            }\n                        };\n                        if (_addType in addProcessor) {\n                            addProcessor[_addType].call(this, _pane, _panel, _panelIndex);\n                        }\n\n                        addProcessor = null;\n                        copyPanel = null;\n                    },\n                    \"column\"(_pane, _addType, _panel, _panelIndex){\n                        let copyPanel = jQuery.extend({}, _pane);\n                        let addProcessor = {\n                            \"stack\"(_pane, _panel){\n                                if (_pane.panels[0] && _pane.panels[0].panelPath) {\n                                    this.addPanel(_pane.panels[0].panelPath, _addType, _panel);\n                                }\n                            },\n                            \"row-left\"(_pane, _panel){\n                                let parentPath = _addPath.substr(0, _addPath.lastIndexOf(\".\"));\n                                let parentPane = getPanel(parentPath);\n                                if (parentPane.type == \"row\") {\n                                    this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                } else {\n                                    _pane = setPanel(_addPath, {\n                                        type: \"row\",\n                                        panels: []\n                                    });\n                                    _pane.panels.push(_panel);\n                                    _pane.panels.push(copyPanel);\n                                    arrangePanel();\n                                }\n                            },\n                            \"row-right\"(_pane, _panel){\n                                let parentPath = _addPath.substr(0, _addPath.lastIndexOf(\".\"));\n                                let parentPane = getPanel(parentPath);\n                                if (parentPane.type == \"row\") {\n                                    this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                } else {\n                                    _pane = setPanel(_addPath, {\n                                        type: \"row\",\n                                        panels: []\n                                    });\n                                    _pane.panels.push(copyPanel);\n                                    _pane.panels.push(_panel);\n                                    arrangePanel();\n                                }\n                            },\n                            \"column-top\"(_pane, _panel){\n                                _pane.panels.splice(_panelIndex, 0, _panel);\n                                arrangePanel();\n                            },\n                            \"column-bottom\"(_pane, _panel){\n                                _pane.panels.splice(_panelIndex + 1, 0, _panel);\n                                arrangePanel();\n                            }\n                        };\n                        if (_addType in addProcessor) {\n                            addProcessor[_addType].call(this, _pane, _panel);\n                        }\n\n                        addProcessor = null;\n                        copyPanel = null;\n                    },\n                    \"panel\"(_pane, _addType, _panel){\n                        let copyPanel = jQuery.extend({}, _pane),\n                            addProcessor = {\n                                \"stack\"(_pane, _panel){\n                                    // _pane stack으로 재구성\n                                    _pane = setPanel(_addPath, {\n                                        type: \"stack\",\n                                        panels: []\n                                    });\n                                    _pane.panels.push(copyPanel);\n                                    _pane.panels.push(_panel);\n                                    arrangePanel();\n                                },\n                                \"row-left\"(_pane, _panel){\n                                    let parentPath = _addPath.substr(0, _addPath.lastIndexOf(\".\"));\n                                    let parentPane = getPanel(parentPath);\n                                    if (parentPane.type == \"row\") {\n                                        this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                    } else {\n                                        _pane = setPanel(_addPath, {\n                                            type: \"row\",\n                                            panels: []\n                                        });\n                                        _pane.panels.push(_panel);\n                                        _pane.panels.push(copyPanel);\n                                        arrangePanel();\n                                    }\n                                },\n                                \"row-right\"(_pane, _panel){\n                                    let parentPath = _addPath.substr(0, _addPath.lastIndexOf(\".\"));\n                                    let parentPane = getPanel(parentPath);\n                                    if (parentPane.type == \"row\") {\n                                        this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                    } else {\n                                        _pane = setPanel(_addPath, {\n                                            type: \"row\",\n                                            panels: []\n                                        });\n                                        _pane.panels.push(copyPanel);\n                                        _pane.panels.push(_panel);\n                                        arrangePanel();\n                                    }\n                                },\n                                \"column-top\"(_pane, _panel){\n                                    let parentPath = _addPath.substr(0, _addPath.lastIndexOf(\".\"));\n                                    let parentPane = getPanel(parentPath);\n                                    if (parentPane.type == \"column\") {\n                                        this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                    } else {\n                                        _pane = setPanel(_addPath, {\n                                            type: \"column\",\n                                            panels: []\n                                        });\n                                        _pane.panels.push(_panel);\n                                        _pane.panels.push(copyPanel);\n                                        arrangePanel();\n                                    }\n                                },\n                                \"column-bottom\"(_pane, _panel){\n                                    let parentPath = _addPath.substr(0, _addPath.lastIndexOf(\".\"));\n                                    let parentPane = getPanel(parentPath);\n                                    if (parentPane.type == \"column\") {\n                                        this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                    } else {\n                                        _pane = setPanel(_addPath, {\n                                            type: \"column\",\n                                            panels: []\n                                        });\n                                        _pane.panels.push(copyPanel);\n                                        _pane.panels.push(_panel);\n                                        arrangePanel();\n                                    }\n                                }\n                            };\n\n                        if (_addType in addProcessor) {\n                            addProcessor[_addType].call(this, _pane, _panel);\n\n                        }\n\n                        copyPanel = null;\n                        addProcessor = null;\n                    }\n                };\n\n                panelProcessor[pane.type].call(this, pane, _addType, _panel, _panelIndex);\n                return this;\n            };\n\n            // 클래스 생성자\n            this.main = (function () {\n                if (arguments && U.isObject(arguments[0])) {\n                    this.setConfig(arguments[0]);\n                }\n            }).apply(this, arguments);\n\n        };\n\n        return ax5docker;\n    })());\n\n})();\n\n// todo : row > stack 구현 -- ok\n// todo : stack 패널 active change -- ok\n// todo : 패널삭제하기 -- ok ~ active 패널 정리.. -- ok\n// todo : 패널추가하기 -- ok\n// todo : 패널 스플릿 리사이즈 -- ok\n// todo : stack tab overflow 처리. -- ok\n// todo : 탭 포커싱와 탭 목록 메뉴 처리전\n// todo : 패널 drag & drop","// ax5.ui.docker.tmpl\n(function () {\n\n    let DOCKER = ax5.ui.docker;\n\n    let panels = function (columnKeys) {\n        return ` \n{{#panels}}\n{{#panels}}\n{{/panels}}\n{{^panels}}\n{{/panels}}\n{{/panels}}\n        `;\n    };\n\n    DOCKER.tmpl = {\n        \"panels\": panels,\n        get: function (tmplName, data, columnKeys) {\n            return ax5.mustache.render(DOCKER.tmpl[tmplName].call(this, columnKeys), data);\n        }\n    };\n\n})();"]}