{"version":3,"sources":["ax5docker.min.js","ax5docker.js","ax5docker-tmpl.js"],"names":["UI","ax5","ui","U","util","addClass","className","version","ax5docker","_this","this","cfg","instanceId","getGuid","config","theme","animateTime","columnKeys","panels","$panels","modules","repaintPanels","appendProcessor","stack","$parent","parent","myself","$dom","activeIndex","jQuery","append","isArray","forEach","P","pIndex","active","type","panel","$item","$label","name","icons","close","find","resizeHandel","row","column","$root","$target","html","init","_config","extend","target","onStateChanged","onClick","onLoad","onDataChanged","console","log","info","getError","setPanels","_panels","addModule","isObject","main","arguments","setConfig","apply","DOCKER","docker","tmpl","get","tmplName","data","mustache","render","call"],"mappings":"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","file":"ax5docker.min.js","sourcesContent":["\"use strict\";\n\n/*\n * Copyright (c) 2017. tom@axisj.com\n * - github.com/thomasjang\n * - www.axisj.com\n */\n\n(function () {\n\n    var UI = ax5.ui,\n        U = ax5.util;\n\n    UI.addClass({\n        className: \"docker\",\n        version: \"${VERSION}\"\n    }, function () {\n\n        /**\n         * @class ax5docker\n         * @classdesc\n         * @author tom@axisj.com\n         * @example\n         * ```\n         * var ax5docker = new ax5.ui.ax5docker();\n         * ```\n         */\n        var ax5docker = function ax5docker() {\n            var _this = this;\n\n            var self = this,\n                cfg = void 0;\n\n            this.instanceId = ax5.getGuid();\n            this.config = {\n                theme: 'default',\n                animateTime: 250,\n                columnKeys: {}\n            };\n            // 패널 정보\n            this.panels = [];\n            this.$panels = [];\n\n            // 패널의 컨텐츠 모듈\n            this.modules = {};\n\n            cfg = this.config;\n\n            var repaintPanels = function repaintPanels() {\n\n                var buildPanel = function buildPanel() {};\n\n                var appendProcessor = {\n                    stack: function stack($parent, parent, myself) {\n                        var $dom = void 0,\n                            activeIndex = -1;\n\n                        $dom = jQuery('<div data-ax5docker-pane=\"\">' + '<ul data-ax5docker-pane-tabs=\"\"></ul>' + '<div data-ax5docker-pane-item-views=\"\"></div>' + '</div>');\n                        $parent.append($dom);\n\n                        if (U.isArray(myself.panels)) {\n                            myself.panels.forEach(function (P, pIndex) {\n                                if (myself.active) activeIndex = pIndex;\n                            });\n                            if (activeIndex === -1) activeIndex = 0;\n                            myself.panels[activeIndex].active = true;\n\n                            myself.panels.forEach(function (P, pIndex) {\n                                appendProcessor[P.type]($dom, myself, P, pIndex);\n                            });\n                        }\n\n                        $dom = null;\n                        activeIndex = null;\n                    },\n                    panel: function panel($parent, parent, myself, pIndex) {\n                        var $dom = void 0,\n                            $item = void 0,\n                            $label = void 0;\n\n                        $label = jQuery('<li data-ax5docker-pane-tab=\"' + pIndex + '\">' + '<div class=\"title\">' + myself.name + '</div>' + '<div class=\"close-icon\">' + cfg.icons.close + '</div>' + '</li>');\n                        $item = jQuery('<div data-ax5docker-pane-item=\"' + pIndex + '\"></div>');\n\n                        if (parent && parent.type == \"stack\") {\n                            if (myself.active) {\n                                $label.addClass(\"active\");\n                                $item.addClass(\"active\");\n                            }\n                            $parent.find('[data-ax5docker-pane-tabs]').append($label);\n                            $parent.find('[data-ax5docker-pane-item-views]').append($item);\n                        } else {\n                            $dom = jQuery('<div data-ax5docker-pane=\"\">' + '<ul data-ax5docker-pane-tabs=\"\"></ul>' + '<div data-ax5docker-pane-item-views=\"\"></div>' + '</div>');\n\n                            $label.addClass(\"active\");\n                            $item.addClass(\"active\");\n\n                            $dom.find('[data-ax5docker-pane-tabs]').append($label);\n                            $dom.find('[data-ax5docker-pane-item-views]').append($item);\n\n                            $parent.append($dom);\n                        }\n\n                        $dom = null;\n                        $item = null;\n                        $label = null;\n                    },\n                    resizeHandel: function resizeHandel($parent, parent, myself) {\n                        var $dom = jQuery('<div data-ax5docker-resize-handle=\"\"></div>');\n                        $parent.append($dom);\n                        $dom = null;\n                    },\n                    row: function row($parent, parent, myself) {\n                        var $dom = void 0;\n\n                        $dom = jQuery('<div data-ax5docker-pane-axis=\"row\"></div>');\n                        $parent.append($dom);\n\n                        if (U.isArray(myself.panels)) {\n                            myself.panels.forEach(function (P, pIndex) {\n                                if (pIndex > 0) appendProcessor[\"resizeHandel\"]($dom, P, myself);\n                                appendProcessor[P.type]($dom, myself, P);\n                            });\n                        }\n\n                        $dom = null;\n                    },\n                    column: function column($parent, parent, myself) {\n                        var $dom = void 0;\n\n                        $dom = jQuery('<div data-ax5docker-pane-axis=\"column\"></div>');\n                        $parent.append($dom);\n\n                        if (U.isArray(myself.panels)) {\n                            myself.panels.forEach(function (P, pIndex) {\n                                if (pIndex > 0) appendProcessor[\"resizeHandel\"]($dom, P, myself);\n                                appendProcessor[P.type]($dom, myself, P);\n                            });\n                        }\n\n                        $dom = null;\n                    }\n                };\n\n                var $root = jQuery('<div data-ax5docker-panes=\"\"></div>');\n                appendProcessor[_this.panels[0].type]($root, null, _this.panels[0], 0);\n                _this.$target.html($root);\n\n                $root = null;\n            };\n\n            /**\n             * @method ax5docker.setConfig\n             * @param {Object} config\n             * @param {Array} config.panels\n             */\n            this.init = function (_config) {\n                cfg = jQuery.extend(true, {}, cfg, _config);\n                if (!cfg.target) {\n                    console.log(ax5.info.getError(\"ax5docker\", \"401\", \"init\"));\n                    return this;\n                }\n                // memory target\n                this.$target = jQuery(cfg.target);\n                // set panels\n                this.panels = cfg.panels || [];\n                // event Functions\n                this.onStateChanged = cfg.onStateChanged;\n                this.onClick = cfg.onClick;\n                this.onLoad = cfg.onLoad;\n                this.onDataChanged = cfg.onDataChanged;\n\n                // 패널 다시 그리기\n                repaintPanels();\n            };\n            /**\n             * @method ax5docker.setPanels\n             * @returns {ax5docker}\n             */\n            this.setPanels = function (_panels) {\n                // set panels\n                this.panels = _panels || [];\n\n                // 패널 다시 그리기\n                repaintPanels();\n                return this;\n            };\n\n            this.addModule = function (modules) {\n                if (U.isObject(modules)) {\n                    jQuery.extend(true, this.modules, modules);\n                }\n                return this;\n            };\n\n            // 클래스 생성자\n            this.main = function () {\n                if (arguments && U.isObject(arguments[0])) {\n                    this.setConfig(arguments[0]);\n                }\n            }.apply(this, arguments);\n        };\n\n        return ax5docker;\n    }());\n})();\n// ax5.ui.docker.tmpl\n(function () {\n\n    var DOCKER = ax5.ui.docker;\n\n    var panels = function panels(columnKeys) {\n        return \" \\n{{#panels}}\\n{{#panels}}\\n{{/panels}}\\n{{^panels}}\\n{{/panels}}\\n{{/panels}}\\n        \";\n    };\n\n    DOCKER.tmpl = {\n        \"panels\": panels,\n        get: function get(tmplName, data, columnKeys) {\n            return ax5.mustache.render(DOCKER.tmpl[tmplName].call(this, columnKeys), data);\n        }\n    };\n})();","/*\n * Copyright (c) 2017. tom@axisj.com\n * - github.com/thomasjang\n * - www.axisj.com\n */\n\n(function () {\n\n    let UI = ax5.ui,\n        U = ax5.util;\n\n    UI.addClass({\n        className: \"docker\",\n        version: \"${VERSION}\"\n    }, (function () {\n\n        /**\n         * @class ax5docker\n         * @classdesc\n         * @author tom@axisj.com\n         * @example\n         * ```\n         * var ax5docker = new ax5.ui.ax5docker();\n         * ```\n         */\n        let ax5docker = function () {\n            let self = this,\n                cfg;\n\n            this.instanceId = ax5.getGuid();\n            this.config = {\n                theme: 'default',\n                animateTime: 250,\n                columnKeys: {}\n            };\n            // 패널 정보\n            this.panels = [];\n            this.$panels = [];\n\n            // 패널의 컨텐츠 모듈\n            this.modules = {};\n\n            cfg = this.config;\n\n            let repaintPanels = () => {\n\n                let buildPanel = () => {\n\n                };\n\n                let appendProcessor = {\n                    stack($parent, parent, myself){\n                        let $dom, activeIndex = -1;\n\n                        $dom = jQuery('<div data-ax5docker-pane=\"\">' +\n                            '<ul data-ax5docker-pane-tabs=\"\"></ul>' +\n                            '<div data-ax5docker-pane-item-views=\"\"></div>' +\n                            '</div>');\n                        $parent.append($dom);\n\n                        if (U.isArray(myself.panels)) {\n                            myself.panels.forEach(function (P, pIndex) {\n                                if (myself.active) activeIndex = pIndex;\n                            });\n                            if (activeIndex === -1) activeIndex = 0;\n                            myself.panels[activeIndex].active = true;\n\n                            myself.panels.forEach(function (P, pIndex) {\n                                appendProcessor[P.type]($dom, myself, P, pIndex);\n                            });\n                        }\n\n                        $dom = null;\n                        activeIndex = null;\n                    },\n                    panel($parent, parent, myself, pIndex){\n                        let $dom, $item, $label;\n\n                        $label = jQuery('<li data-ax5docker-pane-tab=\"' + pIndex + '\">' +\n                            '<div class=\"title\">' + myself.name + '</div>' +\n                            '<div class=\"close-icon\">'+ cfg.icons.close +'</div>' +\n                            '</li>');\n                        $item = jQuery('<div data-ax5docker-pane-item=\"' + pIndex + '\"></div>');\n\n                        if (parent && parent.type == \"stack\") {\n                            if (myself.active) {\n                                $label.addClass(\"active\");\n                                $item.addClass(\"active\");\n                            }\n                            $parent.find('[data-ax5docker-pane-tabs]').append($label);\n                            $parent.find('[data-ax5docker-pane-item-views]').append($item);\n                        } else {\n                            $dom = jQuery('<div data-ax5docker-pane=\"\">' +\n                                '<ul data-ax5docker-pane-tabs=\"\"></ul>' +\n                                '<div data-ax5docker-pane-item-views=\"\"></div>' +\n                                '</div>');\n\n                            $label.addClass(\"active\");\n                            $item.addClass(\"active\");\n\n                            $dom.find('[data-ax5docker-pane-tabs]').append($label);\n                            $dom.find('[data-ax5docker-pane-item-views]').append($item);\n\n                            $parent.append($dom);\n                        }\n\n                        $dom = null;\n                        $item = null;\n                        $label = null;\n                    },\n                    resizeHandel($parent, parent, myself){\n                        let $dom = jQuery('<div data-ax5docker-resize-handle=\"\"></div>');\n                        $parent.append($dom);\n                        $dom = null;\n                    },\n                    row($parent, parent, myself){\n                        let $dom;\n\n                        $dom = jQuery('<div data-ax5docker-pane-axis=\"row\"></div>');\n                        $parent.append($dom);\n\n                        if (U.isArray(myself.panels)) {\n                            myself.panels.forEach(function (P, pIndex) {\n                                if (pIndex > 0) appendProcessor[\"resizeHandel\"]($dom, P, myself);\n                                appendProcessor[P.type]($dom, myself, P);\n                            });\n                        }\n\n                        $dom = null;\n                    },\n                    column($parent, parent, myself){\n                        let $dom;\n\n                        $dom = jQuery('<div data-ax5docker-pane-axis=\"column\"></div>');\n                        $parent.append($dom);\n\n                        if (U.isArray(myself.panels)) {\n                            myself.panels.forEach(function (P, pIndex) {\n                                if (pIndex > 0) appendProcessor[\"resizeHandel\"]($dom, P, myself);\n                                appendProcessor[P.type]($dom, myself, P);\n                            });\n                        }\n\n                        $dom = null;\n                    }\n                };\n\n                let $root = jQuery('<div data-ax5docker-panes=\"\"></div>');\n                appendProcessor[this.panels[0].type]($root, null, this.panels[0], 0);\n                this.$target.html($root);\n\n                $root = null;\n            };\n\n\n            /**\n             * @method ax5docker.setConfig\n             * @param {Object} config\n             * @param {Array} config.panels\n             */\n            this.init = function (_config) {\n                cfg = jQuery.extend(true, {}, cfg, _config);\n                if (!cfg.target) {\n                    console.log(ax5.info.getError(\"ax5docker\", \"401\", \"init\"));\n                    return this;\n                }\n                // memory target\n                this.$target = jQuery(cfg.target);\n                // set panels\n                this.panels = cfg.panels || [];\n                // event Functions\n                this.onStateChanged = cfg.onStateChanged;\n                this.onClick = cfg.onClick;\n                this.onLoad = cfg.onLoad;\n                this.onDataChanged = cfg.onDataChanged;\n\n                // 패널 다시 그리기\n                repaintPanels();\n            };\n            /**\n             * @method ax5docker.setPanels\n             * @returns {ax5docker}\n             */\n            this.setPanels = function (_panels) {\n                // set panels\n                this.panels = _panels || [];\n\n                // 패널 다시 그리기\n                repaintPanels();\n                return this;\n            };\n\n            this.addModule = function (modules) {\n                if(U.isObject(modules)) {\n                    jQuery.extend(true, this.modules, modules);\n                }\n                return this;\n            };\n\n            // 클래스 생성자\n            this.main = (function () {\n                if (arguments && U.isObject(arguments[0])) {\n                    this.setConfig(arguments[0]);\n                }\n            }).apply(this, arguments);\n\n        };\n\n        return ax5docker;\n    })());\n\n})();","// ax5.ui.docker.tmpl\n(function () {\n\n    let DOCKER = ax5.ui.docker;\n\n    let panels = function (columnKeys) {\n        return ` \n{{#panels}}\n{{#panels}}\n{{/panels}}\n{{^panels}}\n{{/panels}}\n{{/panels}}\n        `;\n    };\n\n    DOCKER.tmpl = {\n        \"panels\": panels,\n        get: function (tmplName, data, columnKeys) {\n            return ax5.mustache.render(DOCKER.tmpl[tmplName].call(this, columnKeys), data);\n        }\n    };\n\n})();"]}