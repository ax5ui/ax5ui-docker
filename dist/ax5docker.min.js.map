{"version":3,"sources":["ax5docker.min.js","ax5docker.js","ax5docker-tmpl.js"],"names":["UI","ax5","ui","U","util","addClass","className","version","ax5docker","_this","this","cfg","instanceId","getGuid","config","theme","animateTime","columnKeys","panels","panelId","modules","getPanelId","defaultModuleInit","container","state","html","name","getPanelPath","parent","pIndex","paths","panelPath","push","join","getPanel","_root","_panelPath","path","_path","concat","split","forEach","n","replace","Function","call","buildPanel","_panel","moduleState","jQuery","extend","moduleContainer","$element","$item","builded","moduleName","init","repaintPanels","appendProcessor","stack","$parent","myself","$dom","activeIndex","append","isArray","P","active","_pIndex","type","panel","$label","icons","close","find","resizeHandel","row","column","$root","$target","off","on","e","console","log","stopEvent","changeActivePanel","clickedLabel","$clickedLabel","$pane","parents","labelIndex","attr","hasClass","removeClass","_config","target","onStateChanged","onClick","onLoad","onDataChanged","info","getError","setPanels","_panels","addModule","isObject","repaint","main","arguments","setConfig","apply","DOCKER","docker","tmpl","get","tmplName","data","mustache","render"],"mappings":"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","file":"ax5docker.min.js","sourcesContent":["\"use strict\";\n\n/*\n * Copyright (c) 2017. tom@axisj.com\n * - github.com/thomasjang\n * - www.axisj.com\n */\n\n(function () {\n\n    var UI = ax5.ui,\n        U = ax5.util;\n\n    UI.addClass({\n        className: \"docker\",\n        version: \"${VERSION}\"\n    }, function () {\n\n        /**\n         * @class ax5docker\n         * @classdesc\n         * @author tom@axisj.com\n         * @example\n         * ```\n         * var ax5docker = new ax5.ui.ax5docker();\n         * ```\n         */\n        var ax5docker = function ax5docker() {\n            var _this = this;\n\n            var self = this,\n                cfg = void 0;\n\n            this.instanceId = ax5.getGuid();\n            this.config = {\n                theme: 'default',\n                animateTime: 250,\n                columnKeys: {}\n            };\n            // 패널 정보\n            this.panels = [];\n            this.panelId = 0;\n\n            // 패널의 컨텐츠 모듈\n            this.modules = {};\n\n            cfg = this.config;\n\n            var getPanelId = function getPanelId() {\n                return _this.panelId++;\n            };\n\n            var defaultModuleInit = function defaultModuleInit(container, state) {\n                container[\"$element\"].html(state.name);\n            };\n\n            var getPanelPath = function getPanelPath(parent, pIndex) {\n                var paths = [];\n                if (parent && typeof parent.panelPath !== \"undefined\") {\n                    paths.push(parent.panelPath);\n                }\n\n                paths.push('panels[' + (pIndex || 0) + ']');\n                return paths.join(\".\");\n            };\n\n            var getPanel = function getPanel(_root, _panelPath) {\n                var path = [],\n                    _path = [].concat(_panelPath.split(/[\\.\\[\\]]/g));\n                _path.forEach(function (n) {\n                    if (n !== \"\") path.push(\"[\\\"\" + n.replace(/['\\\"]/g, \"\") + \"\\\"]\");\n                });\n\n                // return (Function(\"val\", \"this\" + _path.join('') + \" = val;\")).call(this.model, value);\n                return Function(\"\", \"return this\" + path.join('') + \";\").call(_root);\n            };\n\n            var buildPanel = function buildPanel(_panel) {\n                var moduleState = jQuery.extend(_panel.moduleState, {\n                    name: _panel.name\n                }),\n                    moduleContainer = {\n                    '$element': _panel.$item\n                };\n\n                _panel.builded = true;\n                if (_panel.moduleName in _this.modules && 'init' in _this.modules[_panel.moduleName]) {\n                    _this.modules[_panel.moduleName].init(moduleContainer, moduleState);\n                } else {\n                    defaultModuleInit(moduleContainer, moduleState);\n                }\n            };\n\n            var repaintPanels = function repaintPanels() {\n\n                var appendProcessor = {\n                    stack: function stack($parent, parent, myself, pIndex) {\n\n                        var $dom = void 0,\n                            activeIndex = -1;\n                        myself.panelPath = getPanelPath(parent, pIndex);\n\n                        $dom = jQuery('<div data-ax5docker-pane=\"\" data-ax5docker-path=\"' + myself.panelPath + '\">' + '<ul data-ax5docker-pane-tabs=\"\"></ul>' + '<div data-ax5docker-pane-item-views=\"\"></div>' + '</div>');\n                        $parent.append($dom);\n\n                        if (U.isArray(myself.panels)) {\n                            myself.panels.forEach(function (P, pIndex) {\n                                if (myself.active) activeIndex = pIndex;\n                            });\n                            if (activeIndex === -1) activeIndex = 0;\n                            myself.panels[activeIndex].active = true;\n\n                            myself.panels.forEach(function (P, _pIndex) {\n                                appendProcessor[P.type]($dom, myself, P, _pIndex);\n                            });\n                        }\n\n                        $dom = null;\n                        activeIndex = null;\n                    },\n                    panel: function panel($parent, parent, myself, pIndex) {\n                        var $dom = void 0;\n                        myself.panelPath = getPanelPath(parent, pIndex);\n                        myself.$label = jQuery('<li data-ax5docker-pane-tab=\"' + pIndex + '\" data-ax5docker-path=\"' + myself.panelPath + '\">' + '<div class=\"title\">' + myself.name + '</div>' + '<div class=\"close-icon\">' + cfg.icons.close + '</div>' + '</li>');\n\n                        if (!myself.$item) {\n                            myself.$item = jQuery('<div data-ax5docker-pane-item=\"' + pIndex + '\" data-ax5docker-pane-id=\"' + getPanelId() + '\" data-ax5docker-path=\"' + myself.panelPath + '\"></div>');\n                        }\n\n                        if (parent && parent.type == \"stack\") {\n                            if (myself.active) {\n                                buildPanel(myself);\n                                myself.$label.addClass(\"active\");\n                                myself.$item.addClass(\"active\");\n                            }\n                            $parent.find('[data-ax5docker-pane-tabs]').append(myself.$label);\n                            $parent.find('[data-ax5docker-pane-item-views]').append(myself.$item);\n                        } else {\n                            $dom = jQuery('<div data-ax5docker-pane=\"\" data-ax5docker-path=\"' + myself.panelPath + '\">' + '<ul data-ax5docker-pane-tabs=\"\"></ul>' + '<div data-ax5docker-pane-item-views=\"\"></div>' + '</div>');\n\n                            buildPanel(myself);\n                            myself.$label.addClass(\"active\");\n                            myself.$item.addClass(\"active\");\n\n                            $dom.find('[data-ax5docker-pane-tabs]').append(myself.$label);\n                            $dom.find('[data-ax5docker-pane-item-views]').append(myself.$item);\n\n                            $parent.append($dom);\n                        }\n\n                        $dom = null;\n                    },\n                    resizeHandel: function resizeHandel($parent, parent, myself) {\n                        var $dom = jQuery('<div data-ax5docker-resize-handle=\"\"></div>');\n                        $parent.append($dom);\n                        $dom = null;\n                    },\n                    row: function row($parent, parent, myself, pIndex) {\n                        var $dom = void 0;\n                        myself.panelPath = getPanelPath(parent, pIndex);\n                        if (parent && parent.type == \"stack\") {\n                            throw \"The 'stack' type child nodes are allowed only for the 'panel' type.\";\n                        }\n                        $dom = jQuery('<div data-ax5docker-pane-axis=\"row\" data-ax5docker-path=\"' + myself.panelPath + '\"></div>');\n                        $parent.append($dom);\n\n                        if (U.isArray(myself.panels)) {\n                            myself.panels.forEach(function (P, _pIndex) {\n                                if (_pIndex > 0) appendProcessor[\"resizeHandel\"]($dom, P, myself, _pIndex);\n                                appendProcessor[P.type]($dom, myself, P, _pIndex);\n                            });\n                        }\n\n                        $dom = null;\n                    },\n                    column: function column($parent, parent, myself, pIndex) {\n                        var $dom = void 0;\n                        myself.panelPath = getPanelPath(parent, pIndex);\n                        if (parent && parent.type == \"stack\") {\n                            throw \"The 'stack' type child nodes are allowed only for the 'panel' type.\";\n                        }\n                        $dom = jQuery('<div data-ax5docker-pane-axis=\"column\" data-ax5docker-path=\"' + myself.panelPath + '\"></div>');\n                        $parent.append($dom);\n\n                        if (U.isArray(myself.panels)) {\n                            myself.panels.forEach(function (P, _pIndex) {\n                                if (pIndex > 0) appendProcessor[\"resizeHandel\"]($dom, P, myself, _pIndex);\n                                appendProcessor[P.type]($dom, myself, P, _pIndex);\n                            });\n                        }\n\n                        $dom = null;\n                    }\n                };\n\n                var $root = jQuery('<div data-ax5docker-panes=\"\"></div>');\n                appendProcessor[_this.panels[0].type]($root, null, _this.panels[0], 0);\n                _this.$target.html($root);\n\n                _this.$target.off(\"click\").on(\"click\", \"[data-ax5docker-pane-tab] .close-icon\", function (e) {\n                    console.log(\"close icon\");\n                    U.stopEvent(e);\n                }).on(\"click\", \"[data-ax5docker-pane-tab]\", function (e) {\n                    //console.log(e.originalEvent.target);\n                    //console.log(\"click pane-tab\");\n                    //console.log($(this).parents('[data-ax5docker-pane]'));\n\n                    changeActivePanel(this);\n\n                    U.stopEvent(e);\n                });\n                $root = null;\n            };\n\n            var changeActivePanel = function changeActivePanel(clickedLabel) {\n                var $clickedLabel = jQuery(clickedLabel),\n                    $pane = $clickedLabel.parents('[data-ax5docker-pane]'),\n                    labelIndex = $clickedLabel.attr(\"data-ax5docker-pane-tab\");\n\n                if ($clickedLabel.hasClass(\"active\")) {\n                    return false;\n                } else {\n                    $pane.find(\".active\").removeClass(\"active\");\n                    //labelIndex\n\n                    $pane.find('[data-ax5docker-pane-tab=\"' + labelIndex + '\"]').addClass(\"active\");\n                    $pane.find('[data-ax5docker-pane-item=\"' + labelIndex + '\"]').addClass(\"active\");\n\n                    // let pane = getPanel(this, $pane.attr(\"data-ax5docker-path\"));\n                    // todo : build 여부 판단후 build 실행\n                    var panel = getPanel(_this, $clickedLabel.attr(\"data-ax5docker-path\"));\n                    console.log(panel.builded);\n\n                    buildPanel(panel);\n                    // buildPanel 여부 판단.\n                    //myself.$item 이 필요해..\n                }\n            };\n\n            var closePanel = function closePanel() {};\n\n            /**\n             * @method ax5docker.setConfig\n             * @param {Object} config\n             * @param {Array} config.panels\n             */\n            this.init = function (_config) {\n                cfg = jQuery.extend(true, {}, cfg, _config);\n                if (!cfg.target) {\n                    console.log(ax5.info.getError(\"ax5docker\", \"401\", \"init\"));\n                    return this;\n                }\n                // memory target\n                this.$target = jQuery(cfg.target);\n                // set panels\n                this.panels = cfg.panels || [];\n                // event Functions\n                this.onStateChanged = cfg.onStateChanged;\n                this.onClick = cfg.onClick;\n                this.onLoad = cfg.onLoad;\n                this.onDataChanged = cfg.onDataChanged;\n            };\n            /**\n             * @method ax5docker.setPanels\n             * @returns {ax5docker}\n             */\n            this.setPanels = function (_panels) {\n                // set panels\n                this.panels = _panels || [];\n\n                // 패널 다시 그리기\n                repaintPanels();\n                return this;\n            };\n\n            this.addModule = function (modules) {\n                if (U.isObject(modules)) {\n                    jQuery.extend(true, this.modules, modules);\n                }\n                return this;\n            };\n\n            this.repaint = function () {\n                // 패널 다시 그리기\n                repaintPanels();\n            };\n\n            // 클래스 생성자\n            this.main = function () {\n                if (arguments && U.isObject(arguments[0])) {\n                    this.setConfig(arguments[0]);\n                }\n            }.apply(this, arguments);\n        };\n\n        return ax5docker;\n    }());\n})();\n\n// todo : active 된 패널만 표시하기 -- ok\n// todo : row > stack 구현 -- ok\n// todo : stack 패널 active change -- ok\n// todo : resize\n// todo : 패널 추가 / 삭제 / 재구성\n// todo : 패널 drag & drop\n\n// ax5.ui.docker.tmpl\n(function () {\n\n    var DOCKER = ax5.ui.docker;\n\n    var panels = function panels(columnKeys) {\n        return \" \\n{{#panels}}\\n{{#panels}}\\n{{/panels}}\\n{{^panels}}\\n{{/panels}}\\n{{/panels}}\\n        \";\n    };\n\n    DOCKER.tmpl = {\n        \"panels\": panels,\n        get: function get(tmplName, data, columnKeys) {\n            return ax5.mustache.render(DOCKER.tmpl[tmplName].call(this, columnKeys), data);\n        }\n    };\n})();","/*\n * Copyright (c) 2017. tom@axisj.com\n * - github.com/thomasjang\n * - www.axisj.com\n */\n\n(function () {\n\n    let UI = ax5.ui,\n        U = ax5.util;\n\n    UI.addClass({\n        className: \"docker\",\n        version: \"${VERSION}\"\n    }, (function () {\n\n        /**\n         * @class ax5docker\n         * @classdesc\n         * @author tom@axisj.com\n         * @example\n         * ```\n         * var ax5docker = new ax5.ui.ax5docker();\n         * ```\n         */\n        let ax5docker = function () {\n            let self = this,\n                cfg;\n\n            this.instanceId = ax5.getGuid();\n            this.config = {\n                theme: 'default',\n                animateTime: 250,\n                columnKeys: {}\n            };\n            // 패널 정보\n            this.panels = [];\n            this.panelId = 0;\n\n            // 패널의 컨텐츠 모듈\n            this.modules = {};\n\n            cfg = this.config;\n\n            const getPanelId = () => {\n                return this.panelId++;\n            };\n\n            const defaultModuleInit = (container, state) => {\n                container[\"$element\"].html(state.name);\n            };\n\n            const getPanelPath = (parent, pIndex) => {\n                let paths = [];\n                if (parent && typeof parent.panelPath !== \"undefined\") {\n                    paths.push(parent.panelPath);\n                }\n\n                paths.push('panels[' + (pIndex || 0) + ']');\n                return paths.join(\".\");\n            };\n\n            const getPanel = (_root, _panelPath) => {\n                let path = [], _path = [].concat(_panelPath.split(/[\\.\\[\\]]/g));\n                _path.forEach(function (n) {\n                    if (n !== \"\") path.push(\"[\\\"\" + n.replace(/['\\\"]/g, \"\") + \"\\\"]\");\n                });\n\n                // return (Function(\"val\", \"this\" + _path.join('') + \" = val;\")).call(this.model, value);\n                return (Function(\"\", \"return this\" + path.join('') + \";\")).call(_root);\n            };\n\n            const buildPanel = (_panel) => {\n                let moduleState = jQuery.extend(_panel.moduleState, {\n                        name: _panel.name\n                    }),\n                    moduleContainer = {\n                        '$element': _panel.$item\n                    };\n\n                _panel.builded = true;\n                if (_panel.moduleName in this.modules && 'init' in this.modules[_panel.moduleName]) {\n                    this.modules[_panel.moduleName].init(moduleContainer, moduleState);\n                } else {\n                    defaultModuleInit(moduleContainer, moduleState);\n                }\n            };\n\n            const repaintPanels = () => {\n\n                const appendProcessor = {\n                    stack($parent, parent, myself, pIndex){\n\n                        let $dom, activeIndex = -1;\n                        myself.panelPath = getPanelPath(parent, pIndex);\n\n                        $dom = jQuery('<div data-ax5docker-pane=\"\" data-ax5docker-path=\"' + myself.panelPath + '\">' +\n                            '<ul data-ax5docker-pane-tabs=\"\"></ul>' +\n                            '<div data-ax5docker-pane-item-views=\"\"></div>' +\n                            '</div>');\n                        $parent.append($dom);\n\n                        if (U.isArray(myself.panels)) {\n                            myself.panels.forEach(function (P, pIndex) {\n                                if (myself.active) activeIndex = pIndex;\n                            });\n                            if (activeIndex === -1) activeIndex = 0;\n                            myself.panels[activeIndex].active = true;\n\n                            myself.panels.forEach(function (P, _pIndex) {\n                                appendProcessor[P.type]($dom, myself, P, _pIndex);\n                            });\n                        }\n\n                        $dom = null;\n                        activeIndex = null;\n                    },\n                    panel($parent, parent, myself, pIndex){\n                        let $dom;\n                        myself.panelPath = getPanelPath(parent, pIndex);\n                        myself.$label = jQuery('<li data-ax5docker-pane-tab=\"' + pIndex + '\" data-ax5docker-path=\"' + myself.panelPath + '\">' +\n                            '<div class=\"title\">' + myself.name + '</div>' +\n                            '<div class=\"close-icon\">' + cfg.icons.close + '</div>' +\n                            '</li>');\n\n                        if (!myself.$item) {\n                            myself.$item = jQuery('<div data-ax5docker-pane-item=\"' + pIndex + '\" data-ax5docker-pane-id=\"' + getPanelId() + '\" data-ax5docker-path=\"' + myself.panelPath + '\"></div>');\n                        }\n\n                        if (parent && parent.type == \"stack\") {\n                            if (myself.active) {\n                                buildPanel(myself);\n                                myself.$label.addClass(\"active\");\n                                myself.$item.addClass(\"active\");\n                            }\n                            $parent.find('[data-ax5docker-pane-tabs]').append(myself.$label);\n                            $parent.find('[data-ax5docker-pane-item-views]').append(myself.$item);\n                        } else {\n                            $dom = jQuery('<div data-ax5docker-pane=\"\" data-ax5docker-path=\"' + myself.panelPath + '\">' +\n                                '<ul data-ax5docker-pane-tabs=\"\"></ul>' +\n                                '<div data-ax5docker-pane-item-views=\"\"></div>' +\n                                '</div>');\n\n                            buildPanel(myself);\n                            myself.$label.addClass(\"active\");\n                            myself.$item.addClass(\"active\");\n\n                            $dom.find('[data-ax5docker-pane-tabs]').append(myself.$label);\n                            $dom.find('[data-ax5docker-pane-item-views]').append(myself.$item);\n\n                            $parent.append($dom);\n                        }\n\n                        $dom = null;\n                    },\n                    resizeHandel($parent, parent, myself){\n                        let $dom = jQuery('<div data-ax5docker-resize-handle=\"\"></div>');\n                        $parent.append($dom);\n                        $dom = null;\n                    },\n                    row($parent, parent, myself, pIndex){\n                        let $dom;\n                        myself.panelPath = getPanelPath(parent, pIndex);\n                        if (parent && parent.type == \"stack\") {\n                            throw \"The 'stack' type child nodes are allowed only for the 'panel' type.\";\n                        }\n                        $dom = jQuery('<div data-ax5docker-pane-axis=\"row\" data-ax5docker-path=\"' + myself.panelPath + '\"></div>');\n                        $parent.append($dom);\n\n                        if (U.isArray(myself.panels)) {\n                            myself.panels.forEach(function (P, _pIndex) {\n                                if (_pIndex > 0) appendProcessor[\"resizeHandel\"]($dom, P, myself, _pIndex);\n                                appendProcessor[P.type]($dom, myself, P, _pIndex);\n                            });\n                        }\n\n                        $dom = null;\n                    },\n                    column($parent, parent, myself, pIndex){\n                        let $dom;\n                        myself.panelPath = getPanelPath(parent, pIndex);\n                        if (parent && parent.type == \"stack\") {\n                            throw \"The 'stack' type child nodes are allowed only for the 'panel' type.\";\n                        }\n                        $dom = jQuery('<div data-ax5docker-pane-axis=\"column\" data-ax5docker-path=\"' + myself.panelPath + '\"></div>');\n                        $parent.append($dom);\n\n                        if (U.isArray(myself.panels)) {\n                            myself.panels.forEach(function (P, _pIndex) {\n                                if (pIndex > 0) appendProcessor[\"resizeHandel\"]($dom, P, myself, _pIndex);\n                                appendProcessor[P.type]($dom, myself, P, _pIndex);\n                            });\n                        }\n\n                        $dom = null;\n                    }\n                };\n\n                let $root = jQuery('<div data-ax5docker-panes=\"\"></div>');\n                appendProcessor[this.panels[0].type]($root, null, this.panels[0], 0);\n                this.$target.html($root);\n\n                this.$target\n                    .off(\"click\")\n                    .on(\"click\", \"[data-ax5docker-pane-tab] .close-icon\", function (e) {\n                        console.log(\"close icon\");\n                        U.stopEvent(e);\n                    })\n                    .on(\"click\", \"[data-ax5docker-pane-tab]\", function (e) {\n                        //console.log(e.originalEvent.target);\n                        //console.log(\"click pane-tab\");\n                        //console.log($(this).parents('[data-ax5docker-pane]'));\n\n                        changeActivePanel(this);\n\n                        U.stopEvent(e);\n                    });\n                $root = null;\n            };\n\n            const changeActivePanel = (clickedLabel) => {\n                let $clickedLabel = jQuery(clickedLabel),\n                    $pane = $clickedLabel.parents('[data-ax5docker-pane]'),\n                    labelIndex = $clickedLabel.attr(\"data-ax5docker-pane-tab\");\n\n                if ($clickedLabel.hasClass(\"active\")) {\n                    return false;\n                } else {\n                    $pane.find(\".active\").removeClass(\"active\");\n                    //labelIndex\n\n                    $pane.find('[data-ax5docker-pane-tab=\"' + labelIndex + '\"]').addClass(\"active\");\n                    $pane.find('[data-ax5docker-pane-item=\"' + labelIndex + '\"]').addClass(\"active\");\n\n                    // let pane = getPanel(this, $pane.attr(\"data-ax5docker-path\"));\n                    // todo : build 여부 판단후 build 실행\n                    let panel = getPanel(this, $clickedLabel.attr(\"data-ax5docker-path\"));\n                    console.log(panel.builded);\n\n                    buildPanel(panel);\n                    // buildPanel 여부 판단.\n                    //myself.$item 이 필요해..\n                }\n            };\n\n            const closePanel = () => {\n\n            };\n\n            /**\n             * @method ax5docker.setConfig\n             * @param {Object} config\n             * @param {Array} config.panels\n             */\n            this.init = function (_config) {\n                cfg = jQuery.extend(true, {}, cfg, _config);\n                if (!cfg.target) {\n                    console.log(ax5.info.getError(\"ax5docker\", \"401\", \"init\"));\n                    return this;\n                }\n                // memory target\n                this.$target = jQuery(cfg.target);\n                // set panels\n                this.panels = cfg.panels || [];\n                // event Functions\n                this.onStateChanged = cfg.onStateChanged;\n                this.onClick = cfg.onClick;\n                this.onLoad = cfg.onLoad;\n                this.onDataChanged = cfg.onDataChanged;\n            };\n            /**\n             * @method ax5docker.setPanels\n             * @returns {ax5docker}\n             */\n            this.setPanels = function (_panels) {\n                // set panels\n                this.panels = _panels || [];\n\n                // 패널 다시 그리기\n                repaintPanels();\n                return this;\n            };\n\n            this.addModule = function (modules) {\n                if (U.isObject(modules)) {\n                    jQuery.extend(true, this.modules, modules);\n                }\n                return this;\n            };\n\n            this.repaint = function () {\n                // 패널 다시 그리기\n                repaintPanels();\n            };\n\n            // 클래스 생성자\n            this.main = (function () {\n                if (arguments && U.isObject(arguments[0])) {\n                    this.setConfig(arguments[0]);\n                }\n            }).apply(this, arguments);\n\n        };\n\n        return ax5docker;\n    })());\n\n})();\n\n// todo : active 된 패널만 표시하기 -- ok\n// todo : row > stack 구현 -- ok\n// todo : stack 패널 active change -- ok\n// todo : resize\n// todo : 패널 추가 / 삭제 / 재구성\n// todo : 패널 drag & drop\n","// ax5.ui.docker.tmpl\n(function () {\n\n    let DOCKER = ax5.ui.docker;\n\n    let panels = function (columnKeys) {\n        return ` \n{{#panels}}\n{{#panels}}\n{{/panels}}\n{{^panels}}\n{{/panels}}\n{{/panels}}\n        `;\n    };\n\n    DOCKER.tmpl = {\n        \"panels\": panels,\n        get: function (tmplName, data, columnKeys) {\n            return ax5.mustache.render(DOCKER.tmpl[tmplName].call(this, columnKeys), data);\n        }\n    };\n\n})();"]}