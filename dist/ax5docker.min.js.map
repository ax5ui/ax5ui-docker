{"version":3,"sources":["ax5docker.min.js","ax5docker.js","ax5docker-tmpl.js"],"names":["UI","ax5","ui","U","util","addClass","className","version","ax5docker","_this","this","cfg","instanceId","getGuid","config","theme","animateTime","columnKeys","control","panels","panelId","modules","getPanelId","defaultModule","init","container","state","html","name","active","deactive","destroy","getPanelPath","parent","pIndex","paths","panelPath","push","join","getPanel","_panelPath","path","_path","concat","split","forEach","n","replace","Function","call","setPanel","_value","controlPanel","_panel","_control","moduleState","jQuery","extend","moduleContainer","$element","$item","module","processor","builded","moduleName","$label","removeClass","arrangePanel","that","panel","controlType","runProcessor","isFunction","after","before","repaintPanels","appendProcessor","stack","$parent","myself","$dom","activeIndex","append","isArray","P","_pIndex","type","icons","close","find","resizeHandel","row","column","$root","$target","off","on","e","closePanel","$","parents","stopEvent","changeActiveStackPanel","clickedLabel","$clickedLabel","$pane","pane","attr","hasClass","p","pl","length","newObj","_config","target","onStateChanged","onClick","onLoad","onDataChanged","console","log","info","getError","setPanels","_panels","addModule","isObject","repaint","addPanel","_addPath","_appPosition","main","arguments","setConfig","apply","DOCKER","docker","tmpl","get","tmplName","data","mustache","render"],"mappings":"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","file":"ax5docker.min.js","sourcesContent":["\"use strict\";\n\n/*\n * Copyright (c) 2017. tom@axisj.com\n * - github.com/thomasjang\n * - www.axisj.com\n */\n\n(function () {\n\n    var UI = ax5.ui,\n        U = ax5.util;\n\n    UI.addClass({\n        className: \"docker\",\n        version: \"${VERSION}\"\n    }, function () {\n\n        /**\n         * @class ax5docker\n         * @classdesc\n         * @author tom@axisj.com\n         * @example\n         * ```\n         * var ax5docker = new ax5.ui.ax5docker();\n         * ```\n         */\n        var ax5docker = function ax5docker() {\n            var _this = this;\n\n            var self = this,\n                cfg = void 0;\n\n            this.instanceId = ax5.getGuid();\n            this.config = {\n                theme: 'default',\n                animateTime: 250,\n                columnKeys: {},\n                control: {}\n            };\n            // 패널 정보\n            this.panels = [];\n            this.panelId = 0;\n\n            // 패널의 컨텐츠 모듈\n            this.modules = {};\n\n            cfg = this.config;\n\n            var getPanelId = function getPanelId() {\n                return _this.panelId++;\n            },\n                defaultModule = {\n                init: function init(container, state) {\n                    container[\"$element\"].html(state.name);\n                },\n                active: function active(container, state) {},\n                deactive: function deactive(container, state) {},\n                destroy: function destroy(container, state) {}\n            },\n                getPanelPath = function getPanelPath(parent, pIndex) {\n                var paths = [];\n                if (parent && typeof parent.panelPath !== \"undefined\") {\n                    paths.push(parent.panelPath);\n                }\n\n                paths.push('panels[' + (pIndex || 0) + ']');\n                return paths.join(\".\");\n            },\n                getPanel = function getPanel(_panelPath) {\n                var path = [],\n                    _path = [].concat(_panelPath.split(/[\\.\\[\\]]/g));\n                _path.forEach(function (n) {\n                    if (n !== \"\") path.push(\"[\\\"\" + n.replace(/['\\\"]/g, \"\") + \"\\\"]\");\n                });\n\n                return Function(\"\", \"return this\" + path.join('') + \";\").call(_this);\n                // return (Function(\"val\", \"this\" + _path.join('') + \" = val;\")).call(this.model, value);\n            },\n                setPanel = function setPanel(_panelPath, _value) {\n                var path = [],\n                    _path = [].concat(_panelPath.split(/[\\.\\[\\]]/g));\n                _path.forEach(function (n) {\n                    if (n !== \"\") path.push(\"[\\\"\" + n.replace(/['\\\"]/g, \"\") + \"\\\"]\");\n                });\n\n                return Function(\"val\", \"this\" + path.join('') + \" = val;\").call(_this, _value);\n            };\n\n            var controlPanel = function controlPanel(_panel, _control) {\n                var moduleState = jQuery.extend(_panel.moduleState, {\n                    name: _panel.name\n                }),\n                    moduleContainer = {\n                    '$element': _panel.$item\n                },\n                    module = void 0;\n\n                var processor = {\n                    init: function init() {\n                        _panel.builded = true;\n                        module = _panel.moduleName in _this.modules && 'init' in _this.modules[_panel.moduleName] ? _this.modules[_panel.moduleName] : defaultModule;\n                        module.init(moduleContainer, moduleState);\n                    },\n                    active: function active() {\n                        _panel.active = true;\n                        _panel.$label.addClass(\"active\");\n                        _panel.$item.addClass(\"active\");\n                        module = _panel.moduleName in _this.modules && 'active' in _this.modules[_panel.moduleName] ? _this.modules[_panel.moduleName] : defaultModule;\n                        module.active(moduleContainer, moduleState);\n                    },\n                    deactive: function deactive() {\n                        _panel.active = false;\n                        _panel.$label.removeClass(\"active\");\n                        _panel.$item.removeClass(\"active\");\n                        module = _panel.moduleName in _this.modules && 'deactive' in _this.modules[_panel.moduleName] ? _this.modules[_panel.moduleName] : defaultModule;\n                        module.deactive(moduleContainer, moduleState);\n                    },\n                    destroy: function destroy() {\n                        module = _panel.moduleName in _this.modules && 'destroy' in _this.modules[_panel.moduleName] ? _this.modules[_panel.moduleName] : defaultModule;\n                        module.destroy(moduleContainer, moduleState);\n\n                        // 패널 데이터 제거.\n                        setPanel(_panel.panelPath, null);\n                        // 현재 패널 정보를 검사하여 패널 정보를 재 구성합니다.\n                        arrangePanel();\n                    }\n                };\n\n                // 사용자정의 함수 control.before, control.after에 전달할 인자 = that\n                var that = {\n                    panel: _panel,\n                    controlType: _control\n                };\n\n                // 비동기 처리 상황에 대응하기 위해 runProcessor를 별도 처리\n                var runProcessor = function runProcessor() {\n                    processor[_control]();\n                    module = null;\n\n                    if (U.isFunction(cfg.control.after)) {\n                        cfg.control.after.call(that, that);\n                    }\n                };\n\n                if (processor[_control]) {\n                    if (U.isFunction(cfg.control.before)) {\n                        cfg.control.before.call(that, that, function () {\n                            runProcessor();\n                        });\n                    } else {\n                        runProcessor();\n                    }\n                }\n            };\n\n            var repaintPanels = function repaintPanels() {\n                var appendProcessor = {\n                    stack: function stack($parent, parent, myself, pIndex) {\n\n                        var $dom = void 0,\n                            activeIndex = -1;\n                        myself.panelPath = getPanelPath(parent, pIndex);\n\n                        $dom = jQuery('<div data-ax5docker-pane=\"\" data-ax5docker-path=\"' + myself.panelPath + '\">' + '<ul data-ax5docker-pane-tabs=\"\"></ul>' + '<div data-ax5docker-pane-item-views=\"\"></div>' + '</div>');\n                        $parent.append($dom);\n\n                        if (U.isArray(myself.panels)) {\n                            myself.panels.forEach(function (P, pIndex) {\n                                if (P.active) activeIndex = pIndex;\n                            });\n                            if (activeIndex === -1) activeIndex = 0;\n                            myself.panels[activeIndex].active = true;\n\n                            myself.panels.forEach(function (P, _pIndex) {\n                                appendProcessor[P.type]($dom, myself, P, _pIndex);\n                            });\n                        }\n\n                        $dom = null;\n                        activeIndex = null;\n                    },\n                    panel: function panel($parent, parent, myself, pIndex) {\n                        var $dom = void 0;\n                        myself.panelPath = getPanelPath(parent, pIndex);\n                        myself.$label = jQuery('<li data-ax5docker-pane-tab=\"' + pIndex + '\" data-ax5docker-path=\"' + myself.panelPath + '\">' + '<div class=\"title\">' + myself.name + '</div>' + '<div class=\"close-icon\">' + cfg.icons.close + '</div>' + '</li>');\n\n                        if (!myself.$item) {\n                            myself.$item = jQuery('<div data-ax5docker-pane-item=\"' + pIndex + '\" data-ax5docker-pane-id=\"' + getPanelId() + '\" data-ax5docker-path=\"' + myself.panelPath + '\"></div>');\n                        }\n\n                        if (parent && parent.type == \"stack\") {\n                            if (myself.active) {\n                                if (!myself.builded) controlPanel(myself, \"init\");\n                                controlPanel(myself, \"active\");\n                            }\n                            $parent.find('[data-ax5docker-pane-tabs]').append(myself.$label);\n                            $parent.find('[data-ax5docker-pane-item-views]').append(myself.$item);\n                        } else {\n                            $dom = jQuery('<div data-ax5docker-pane=\"\" data-ax5docker-path=\"' + myself.panelPath + '\">' + '<ul data-ax5docker-pane-tabs=\"\"></ul>' + '<div data-ax5docker-pane-item-views=\"\"></div>' + '</div>');\n\n                            if (!myself.builded) controlPanel(myself, \"init\");\n                            controlPanel(myself, \"active\");\n\n                            $dom.find('[data-ax5docker-pane-tabs]').append(myself.$label);\n                            $dom.find('[data-ax5docker-pane-item-views]').append(myself.$item);\n\n                            $parent.append($dom);\n                        }\n\n                        $dom = null;\n                    },\n                    resizeHandel: function resizeHandel($parent, parent, myself) {\n                        var $dom = jQuery('<div data-ax5docker-resize-handle=\"\"></div>');\n                        $parent.append($dom);\n                        $dom = null;\n                    },\n                    row: function row($parent, parent, myself, pIndex) {\n                        var $dom = void 0;\n                        myself.panelPath = getPanelPath(parent, pIndex);\n                        if (parent && parent.type == \"stack\") {\n                            throw \"The 'stack' type child nodes are allowed only for the 'panel' type.\";\n                        }\n                        $dom = jQuery('<div data-ax5docker-pane-axis=\"row\" data-ax5docker-path=\"' + myself.panelPath + '\"></div>');\n                        $parent.append($dom);\n\n                        if (U.isArray(myself.panels)) {\n                            myself.panels.forEach(function (P, _pIndex) {\n                                if (_pIndex > 0) appendProcessor[\"resizeHandel\"]($dom, P, myself, _pIndex);\n                                appendProcessor[P.type]($dom, myself, P, _pIndex);\n                            });\n                        }\n\n                        $dom = null;\n                    },\n                    column: function column($parent, parent, myself, pIndex) {\n                        var $dom = void 0;\n                        myself.panelPath = getPanelPath(parent, pIndex);\n                        if (parent && parent.type == \"stack\") {\n                            throw \"The 'stack' type child nodes are allowed only for the 'panel' type.\";\n                        }\n                        $dom = jQuery('<div data-ax5docker-pane-axis=\"column\" data-ax5docker-path=\"' + myself.panelPath + '\"></div>');\n                        $parent.append($dom);\n\n                        if (U.isArray(myself.panels)) {\n                            myself.panels.forEach(function (P, _pIndex) {\n                                if (pIndex > 0) appendProcessor[\"resizeHandel\"]($dom, P, myself, _pIndex);\n                                appendProcessor[P.type]($dom, myself, P, _pIndex);\n                            });\n                        }\n\n                        $dom = null;\n                    }\n                };\n\n                var $root = jQuery('<div data-ax5docker-panes=\"\"></div>');\n                if (_this.panels[0]) appendProcessor[_this.panels[0].type]($root, null, _this.panels[0], 0);\n                _this.$target.html($root);\n\n                _this.$target.off(\"click\").on(\"click\", \"[data-ax5docker-pane-tab] .close-icon\", function (e) {\n                    closePanel($(this).parents('[data-ax5docker-pane-tab]'));\n                    U.stopEvent(e);\n                }).on(\"click\", \"[data-ax5docker-pane-tab]\", function (e) {\n                    changeActiveStackPanel(this);\n                    U.stopEvent(e);\n                });\n                $root = null;\n            };\n\n            /**\n             * 액티브 패널 변경(stack인 상황에서)\n             * @param clickedLabel\n             * @returns {boolean}\n             */\n            var changeActiveStackPanel = function changeActiveStackPanel(clickedLabel) {\n                var $clickedLabel = jQuery(clickedLabel),\n                    $pane = $clickedLabel.parents('[data-ax5docker-pane]'),\n                    labelIndex = $clickedLabel.attr(\"data-ax5docker-pane-tab\"),\n                    pane = getPanel($pane.attr(\"data-ax5docker-path\")),\n                    panel = getPanel($clickedLabel.attr(\"data-ax5docker-path\"));\n\n                if ($clickedLabel.hasClass(\"active\")) {\n                    return false;\n                } else {\n                    for (var p = 0, pl = pane.panels.length; p < pl; p++) {\n                        if (pane.panels[p].active) {\n                            controlPanel(pane.panels[p], \"deactive\");\n                        }\n                    }\n\n                    if (!panel.builded) controlPanel(panel, \"init\");\n                    controlPanel(panel, \"active\");\n                }\n                return _this;\n            };\n\n            /**\n             * 패널 삭제하기\n             * @param clickedLabel\n             * @returns {ax5docker}\n             */\n            var closePanel = function closePanel(clickedLabel) {\n                var $clickedLabel = jQuery(clickedLabel),\n                    panelPath = $clickedLabel.attr(\"data-ax5docker-path\"),\n                    panel = getPanel(panelPath);\n\n                controlPanel(panel, \"destroy\");\n                return _this;\n            };\n\n            /**\n             * 패널중에 null이 된 요소를 찾아 panels를 정리 합니다.\n             * @returns {*}\n             */\n            var arrangePanel = function arrangePanel() {\n                // console.log(this.$target.find('[data-ax5docker-pane]'));\n                var panels = [];\n                var processor = {\n                    stack: function stack(myself) {\n                        if (!U.isArray(myself.panels)) return false;\n\n                        var newObj = {\n                            type: \"stack\",\n                            panels: []\n                        };\n\n                        myself.panels.forEach(function (P, _pIndex) {\n                            if (P) {\n                                newObj.panels.push(P);\n                            }\n                        });\n\n                        if (newObj.panels.length < 2) {\n                            newObj = newObj.panels[0];\n                        }\n\n                        if (U.isArray(newObj.panels)) {\n                            for (var p = 0, pl = newObj.panels.length; p < pl; p++) {\n                                newObj.panels[p] = processor[newObj.panels[p].type](newObj.panels[p]);\n                            }\n                        }\n\n                        return newObj;\n                    },\n                    panel: function panel(myself) {\n                        //console.log(myself);\n                        return myself;\n                    },\n                    row: function row(myself) {\n\n                        if (!U.isArray(myself.panels)) return false;\n\n                        var newObj = {\n                            type: \"row\",\n                            panels: []\n                        };\n\n                        myself.panels.forEach(function (P, _pIndex) {\n                            if (P) {\n                                newObj.panels.push(P);\n                            }\n                        });\n\n                        if (newObj.panels.length < 2) {\n                            newObj = newObj.panels[0];\n                        }\n\n                        if (U.isArray(newObj.panels)) {\n                            for (var p = 0, pl = newObj.panels.length; p < pl; p++) {\n                                newObj.panels[p] = processor[newObj.panels[p].type](newObj.panels[p]);\n                            }\n                        }\n\n                        return newObj;\n                    },\n                    column: function column(myself) {\n                        if (!U.isArray(myself.panels)) return false;\n\n                        var newObj = {\n                            type: \"column\",\n                            panels: []\n                        };\n\n                        myself.panels.forEach(function (P, _pIndex) {\n                            if (P) {\n                                newObj.panels.push(P);\n                            }\n                        });\n\n                        if (newObj.panels.length < 2) {\n                            newObj = newObj.panels[0];\n                        }\n\n                        if (U.isArray(newObj.panels)) {\n                            for (var p = 0, pl = newObj.panels.length; p < pl; p++) {\n                                newObj.panels[p] = processor[newObj.panels[p].type](newObj.panels[p]);\n                            }\n                        }\n\n                        return newObj;\n                    }\n                };\n\n                if (_this.panels[0]) {\n                    _this.panels[0] = processor[_this.panels[0].type](_this.panels[0]);\n                } else {\n                    _this.panels = [];\n                }\n\n                repaintPanels();\n            };\n\n            /**\n             * @method ax5docker.setConfig\n             * @param {Object} config\n             * @param {Array} config.panels\n             */\n            this.init = function (_config) {\n                cfg = jQuery.extend(true, {}, cfg, _config);\n                if (!cfg.target) {\n                    console.log(ax5.info.getError(\"ax5docker\", \"401\", \"init\"));\n                    return this;\n                }\n                // memory target\n                this.$target = jQuery(cfg.target);\n                // set panels\n                this.panels = cfg.panels || [];\n                // event Functions\n                this.onStateChanged = cfg.onStateChanged;\n                this.onClick = cfg.onClick;\n                this.onLoad = cfg.onLoad;\n                this.onDataChanged = cfg.onDataChanged;\n            };\n\n            /**\n             * @method ax5docker.setPanels\n             * @returns {ax5docker}\n             */\n            this.setPanels = function (_panels) {\n                // set panels\n                this.panels = _panels || [];\n\n                // 패널 다시 그리기\n                repaintPanels();\n                return this;\n            };\n\n            /**\n             * @method ax5docker.addModule\n             * @param modules\n             * @returns {ax5docker}\n             */\n            this.addModule = function (modules) {\n                if (U.isObject(modules)) {\n                    jQuery.extend(true, this.modules, modules);\n                }\n                return this;\n            };\n\n            /**\n             * repaint panels of docker\n             * @method ax5docker.repaint\n             * @returns {ax5docker}\n             */\n            this.repaint = function () {\n                // 패널 다시 그리기\n                repaintPanels();\n                return this;\n            };\n\n            /**\n             * @method ax5docker.addPanel\n             * @param _addPath\n             * @param _appPosition\n             * @param _panel\n             * @returns {ax5docker}\n             */\n            this.addPanel = function (_addPath, _appPosition, _panel) {\n\n                return this;\n            };\n\n            // 클래스 생성자\n            this.main = function () {\n                if (arguments && U.isObject(arguments[0])) {\n                    this.setConfig(arguments[0]);\n                }\n            }.apply(this, arguments);\n        };\n\n        return ax5docker;\n    }());\n})();\n\n// todo : active 된 패널만 표시하기 -- ok\n// todo : row > stack 구현 -- ok\n// todo : stack 패널 active change -- ok\n// todo : 패널삭제하기 -- ok ~ active 패널 정리.. -- ok\n// todo : 패널추가하기\n// todo : 패널 drag & drop\n\n// ax5.ui.docker.tmpl\n(function () {\n\n    var DOCKER = ax5.ui.docker;\n\n    var panels = function panels(columnKeys) {\n        return \" \\n{{#panels}}\\n{{#panels}}\\n{{/panels}}\\n{{^panels}}\\n{{/panels}}\\n{{/panels}}\\n        \";\n    };\n\n    DOCKER.tmpl = {\n        \"panels\": panels,\n        get: function get(tmplName, data, columnKeys) {\n            return ax5.mustache.render(DOCKER.tmpl[tmplName].call(this, columnKeys), data);\n        }\n    };\n})();","/*\n * Copyright (c) 2017. tom@axisj.com\n * - github.com/thomasjang\n * - www.axisj.com\n */\n\n(function () {\n\n    let UI = ax5.ui,\n        U = ax5.util;\n\n    UI.addClass({\n        className: \"docker\",\n        version: \"${VERSION}\"\n    }, (function () {\n\n        /**\n         * @class ax5docker\n         * @classdesc\n         * @author tom@axisj.com\n         * @example\n         * ```\n         * var ax5docker = new ax5.ui.ax5docker();\n         * ```\n         */\n        let ax5docker = function () {\n            let self = this,\n                cfg;\n\n            this.instanceId = ax5.getGuid();\n            this.config = {\n                theme: 'default',\n                animateTime: 250,\n                columnKeys: {},\n                control: {}\n            };\n            // 패널 정보\n            this.panels = [];\n            this.panelId = 0;\n\n            // 패널의 컨텐츠 모듈\n            this.modules = {};\n\n            cfg = this.config;\n\n            const getPanelId = () => {\n                    return this.panelId++;\n                },\n                defaultModule = {\n                    init(container, state){\n                        container[\"$element\"].html(state.name);\n                    },\n                    active(container, state){\n\n                    },\n                    deactive(container, state){\n\n                    },\n                    destroy(container, state){\n\n                    }\n                },\n                getPanelPath = (parent, pIndex) => {\n                    let paths = [];\n                    if (parent && typeof parent.panelPath !== \"undefined\") {\n                        paths.push(parent.panelPath);\n                    }\n\n                    paths.push('panels[' + (pIndex || 0) + ']');\n                    return paths.join(\".\");\n                },\n                getPanel = (_panelPath) => {\n                    let path = [], _path = [].concat(_panelPath.split(/[\\.\\[\\]]/g));\n                    _path.forEach(function (n) {\n                        if (n !== \"\") path.push(\"[\\\"\" + n.replace(/['\\\"]/g, \"\") + \"\\\"]\");\n                    });\n\n                    return (Function(\"\", \"return this\" + path.join('') + \";\")).call(this);\n                    // return (Function(\"val\", \"this\" + _path.join('') + \" = val;\")).call(this.model, value);\n                },\n                setPanel = (_panelPath, _value) => {\n                    let path = [], _path = [].concat(_panelPath.split(/[\\.\\[\\]]/g));\n                    _path.forEach(function (n) {\n                        if (n !== \"\") path.push(\"[\\\"\" + n.replace(/['\\\"]/g, \"\") + \"\\\"]\");\n                    });\n\n                    return (Function(\"val\", \"this\" + path.join('') + \" = val;\")).call(this, _value);\n                };\n\n            const controlPanel = (_panel, _control) => {\n                let moduleState = jQuery.extend(_panel.moduleState, {\n                        name: _panel.name\n                    }),\n                    moduleContainer = {\n                        '$element': _panel.$item\n                    },\n                    module;\n\n                let processor = {\n                    init: () => {\n                        _panel.builded = true;\n                        module = (_panel.moduleName in this.modules && 'init' in this.modules[_panel.moduleName]) ? this.modules[_panel.moduleName] : defaultModule;\n                        module.init(moduleContainer, moduleState);\n                    },\n                    active: () => {\n                        _panel.active = true;\n                        _panel.$label.addClass(\"active\");\n                        _panel.$item.addClass(\"active\");\n                        module = (_panel.moduleName in this.modules && 'active' in this.modules[_panel.moduleName]) ? this.modules[_panel.moduleName] : defaultModule;\n                        module.active(moduleContainer, moduleState);\n                    },\n                    deactive: () => {\n                        _panel.active = false;\n                        _panel.$label.removeClass(\"active\");\n                        _panel.$item.removeClass(\"active\");\n                        module = (_panel.moduleName in this.modules && 'deactive' in this.modules[_panel.moduleName]) ? this.modules[_panel.moduleName] : defaultModule;\n                        module.deactive(moduleContainer, moduleState);\n                    },\n                    destroy: () => {\n                        module = (_panel.moduleName in this.modules && 'destroy' in this.modules[_panel.moduleName]) ? this.modules[_panel.moduleName] : defaultModule;\n                        module.destroy(moduleContainer, moduleState);\n\n                        // 패널 데이터 제거.\n                        setPanel(_panel.panelPath, null);\n                        // 현재 패널 정보를 검사하여 패널 정보를 재 구성합니다.\n                        arrangePanel();\n                    }\n                };\n\n                // 사용자정의 함수 control.before, control.after에 전달할 인자 = that\n                let that = {\n                    panel: _panel,\n                    controlType: _control\n                };\n\n                // 비동기 처리 상황에 대응하기 위해 runProcessor를 별도 처리\n                let runProcessor = () => {\n                    processor[_control]();\n                    module = null;\n\n                    if (U.isFunction(cfg.control.after)) {\n                        cfg.control.after.call(that, that);\n                    }\n                };\n\n                if (processor[_control]) {\n                    if (U.isFunction(cfg.control.before)) {\n                        cfg.control.before.call(that, that, function () {\n                            runProcessor();\n                        });\n                    }\n                    else {\n                        runProcessor();\n                    }\n                }\n            };\n\n            const repaintPanels = () => {\n                const appendProcessor = {\n                    stack($parent, parent, myself, pIndex){\n\n                        let $dom, activeIndex = -1;\n                        myself.panelPath = getPanelPath(parent, pIndex);\n\n                        $dom = jQuery('<div data-ax5docker-pane=\"\" data-ax5docker-path=\"' + myself.panelPath + '\">' +\n                            '<ul data-ax5docker-pane-tabs=\"\"></ul>' +\n                            '<div data-ax5docker-pane-item-views=\"\"></div>' +\n                            '</div>');\n                        $parent.append($dom);\n\n                        if (U.isArray(myself.panels)) {\n                            myself.panels.forEach(function (P, pIndex) {\n                                if (P.active) activeIndex = pIndex;\n                            });\n                            if (activeIndex === -1) activeIndex = 0;\n                            myself.panels[activeIndex].active = true;\n\n                            myself.panels.forEach(function (P, _pIndex) {\n                                appendProcessor[P.type]($dom, myself, P, _pIndex);\n                            });\n                        }\n\n                        $dom = null;\n                        activeIndex = null;\n                    },\n                    panel($parent, parent, myself, pIndex){\n                        let $dom;\n                        myself.panelPath = getPanelPath(parent, pIndex);\n                        myself.$label = jQuery('<li data-ax5docker-pane-tab=\"' + pIndex + '\" data-ax5docker-path=\"' + myself.panelPath + '\">' +\n                            '<div class=\"title\">' + myself.name + '</div>' +\n                            '<div class=\"close-icon\">' + cfg.icons.close + '</div>' +\n                            '</li>');\n\n                        if (!myself.$item) {\n                            myself.$item = jQuery('<div data-ax5docker-pane-item=\"' + pIndex + '\" data-ax5docker-pane-id=\"' + getPanelId() + '\" data-ax5docker-path=\"' + myself.panelPath + '\"></div>');\n                        }\n\n                        if (parent && parent.type == \"stack\") {\n                            if (myself.active) {\n                                if (!myself.builded) controlPanel(myself, \"init\");\n                                controlPanel(myself, \"active\");\n                            }\n                            $parent.find('[data-ax5docker-pane-tabs]').append(myself.$label);\n                            $parent.find('[data-ax5docker-pane-item-views]').append(myself.$item);\n                        } else {\n                            $dom = jQuery('<div data-ax5docker-pane=\"\" data-ax5docker-path=\"' + myself.panelPath + '\">' +\n                                '<ul data-ax5docker-pane-tabs=\"\"></ul>' +\n                                '<div data-ax5docker-pane-item-views=\"\"></div>' +\n                                '</div>');\n\n                            if (!myself.builded) controlPanel(myself, \"init\");\n                            controlPanel(myself, \"active\");\n\n                            $dom.find('[data-ax5docker-pane-tabs]').append(myself.$label);\n                            $dom.find('[data-ax5docker-pane-item-views]').append(myself.$item);\n\n                            $parent.append($dom);\n                        }\n\n                        $dom = null;\n                    },\n                    resizeHandel($parent, parent, myself){\n                        let $dom = jQuery('<div data-ax5docker-resize-handle=\"\"></div>');\n                        $parent.append($dom);\n                        $dom = null;\n                    },\n                    row($parent, parent, myself, pIndex){\n                        let $dom;\n                        myself.panelPath = getPanelPath(parent, pIndex);\n                        if (parent && parent.type == \"stack\") {\n                            throw \"The 'stack' type child nodes are allowed only for the 'panel' type.\";\n                        }\n                        $dom = jQuery('<div data-ax5docker-pane-axis=\"row\" data-ax5docker-path=\"' + myself.panelPath + '\"></div>');\n                        $parent.append($dom);\n\n                        if (U.isArray(myself.panels)) {\n                            myself.panels.forEach(function (P, _pIndex) {\n                                if (_pIndex > 0) appendProcessor[\"resizeHandel\"]($dom, P, myself, _pIndex);\n                                appendProcessor[P.type]($dom, myself, P, _pIndex);\n                            });\n                        }\n\n                        $dom = null;\n                    },\n                    column($parent, parent, myself, pIndex){\n                        let $dom;\n                        myself.panelPath = getPanelPath(parent, pIndex);\n                        if (parent && parent.type == \"stack\") {\n                            throw \"The 'stack' type child nodes are allowed only for the 'panel' type.\";\n                        }\n                        $dom = jQuery('<div data-ax5docker-pane-axis=\"column\" data-ax5docker-path=\"' + myself.panelPath + '\"></div>');\n                        $parent.append($dom);\n\n                        if (U.isArray(myself.panels)) {\n                            myself.panels.forEach(function (P, _pIndex) {\n                                if (pIndex > 0) appendProcessor[\"resizeHandel\"]($dom, P, myself, _pIndex);\n                                appendProcessor[P.type]($dom, myself, P, _pIndex);\n                            });\n                        }\n\n                        $dom = null;\n                    }\n                };\n\n                let $root = jQuery('<div data-ax5docker-panes=\"\"></div>');\n                if (this.panels[0]) appendProcessor[this.panels[0].type]($root, null, this.panels[0], 0);\n                this.$target.html($root);\n\n                this.$target\n                    .off(\"click\")\n                    .on(\"click\", \"[data-ax5docker-pane-tab] .close-icon\", function (e) {\n                        closePanel($(this).parents('[data-ax5docker-pane-tab]'));\n                        U.stopEvent(e);\n                    })\n                    .on(\"click\", \"[data-ax5docker-pane-tab]\", function (e) {\n                        changeActiveStackPanel(this);\n                        U.stopEvent(e);\n                    });\n                $root = null;\n            };\n\n            /**\n             * 액티브 패널 변경(stack인 상황에서)\n             * @param clickedLabel\n             * @returns {boolean}\n             */\n            const changeActiveStackPanel = (clickedLabel) => {\n                let $clickedLabel = jQuery(clickedLabel),\n                    $pane = $clickedLabel.parents('[data-ax5docker-pane]'),\n                    labelIndex = $clickedLabel.attr(\"data-ax5docker-pane-tab\"),\n                    pane = getPanel($pane.attr(\"data-ax5docker-path\")),\n                    panel = getPanel($clickedLabel.attr(\"data-ax5docker-path\"));\n\n                if ($clickedLabel.hasClass(\"active\")) {\n                    return false;\n                } else {\n                    for (let p = 0, pl = pane.panels.length; p < pl; p++) {\n                        if (pane.panels[p].active) {\n                            controlPanel(pane.panels[p], \"deactive\");\n                        }\n                    }\n\n                    if (!panel.builded) controlPanel(panel, \"init\");\n                    controlPanel(panel, \"active\");\n                }\n                return this;\n            };\n\n            /**\n             * 패널 삭제하기\n             * @param clickedLabel\n             * @returns {ax5docker}\n             */\n            const closePanel = (clickedLabel) => {\n                let $clickedLabel = jQuery(clickedLabel),\n                    panelPath = $clickedLabel.attr(\"data-ax5docker-path\"),\n                    panel = getPanel(panelPath);\n\n                controlPanel(panel, \"destroy\");\n                return this;\n            };\n\n            /**\n             * 패널중에 null이 된 요소를 찾아 panels를 정리 합니다.\n             * @returns {*}\n             */\n            const arrangePanel = () => {\n                // console.log(this.$target.find('[data-ax5docker-pane]'));\n                const panels = [];\n                const processor = {\n                    stack(myself){\n                        if (!U.isArray(myself.panels)) return false;\n\n                        let newObj = {\n                            type: \"stack\",\n                            panels: []\n                        };\n\n                        myself.panels.forEach(function (P, _pIndex) {\n                            if (P) {\n                                newObj.panels.push(P);\n                            }\n                        });\n\n                        if (newObj.panels.length < 2) {\n                            newObj = newObj.panels[0];\n                        }\n\n                        if (U.isArray(newObj.panels)) {\n                            for (let p = 0, pl = newObj.panels.length; p < pl; p++) {\n                                newObj.panels[p] = processor[newObj.panels[p].type](newObj.panels[p]);\n                            }\n                        }\n\n                        return newObj;\n                    },\n                    panel(myself){\n                        //console.log(myself);\n                        return myself;\n                    },\n                    row(myself){\n\n                        if (!U.isArray(myself.panels)) return false;\n\n                        let newObj = {\n                            type: \"row\",\n                            panels: []\n                        };\n\n                        myself.panels.forEach(function (P, _pIndex) {\n                            if (P) {\n                                newObj.panels.push(P);\n                            }\n                        });\n\n                        if (newObj.panels.length < 2) {\n                            newObj = newObj.panels[0];\n                        }\n\n                        if (U.isArray(newObj.panels)) {\n                            for (let p = 0, pl = newObj.panels.length; p < pl; p++) {\n                                newObj.panels[p] = processor[newObj.panels[p].type](newObj.panels[p]);\n                            }\n                        }\n\n                        return newObj;\n                    },\n                    column(myself){\n                        if (!U.isArray(myself.panels)) return false;\n\n                        let newObj = {\n                            type: \"column\",\n                            panels: []\n                        };\n\n                        myself.panels.forEach(function (P, _pIndex) {\n                            if (P) {\n                                newObj.panels.push(P);\n                            }\n                        });\n\n                        if (newObj.panels.length < 2) {\n                            newObj = newObj.panels[0];\n                        }\n\n                        if (U.isArray(newObj.panels)) {\n                            for (let p = 0, pl = newObj.panels.length; p < pl; p++) {\n                                newObj.panels[p] = processor[newObj.panels[p].type](newObj.panels[p]);\n                            }\n                        }\n\n                        return newObj;\n                    },\n                };\n\n                if (this.panels[0]) {\n                    this.panels[0] = processor[this.panels[0].type](this.panels[0]);\n                } else {\n                    this.panels = [];\n                }\n\n                repaintPanels();\n            };\n\n            /**\n             * @method ax5docker.setConfig\n             * @param {Object} config\n             * @param {Array} config.panels\n             */\n            this.init = function (_config) {\n                cfg = jQuery.extend(true, {}, cfg, _config);\n                if (!cfg.target) {\n                    console.log(ax5.info.getError(\"ax5docker\", \"401\", \"init\"));\n                    return this;\n                }\n                // memory target\n                this.$target = jQuery(cfg.target);\n                // set panels\n                this.panels = cfg.panels || [];\n                // event Functions\n                this.onStateChanged = cfg.onStateChanged;\n                this.onClick = cfg.onClick;\n                this.onLoad = cfg.onLoad;\n                this.onDataChanged = cfg.onDataChanged;\n            };\n\n            /**\n             * @method ax5docker.setPanels\n             * @returns {ax5docker}\n             */\n            this.setPanels = function (_panels) {\n                // set panels\n                this.panels = _panels || [];\n\n                // 패널 다시 그리기\n                repaintPanels();\n                return this;\n            };\n\n            /**\n             * @method ax5docker.addModule\n             * @param modules\n             * @returns {ax5docker}\n             */\n            this.addModule = function (modules) {\n                if (U.isObject(modules)) {\n                    jQuery.extend(true, this.modules, modules);\n                }\n                return this;\n            };\n\n            /**\n             * repaint panels of docker\n             * @method ax5docker.repaint\n             * @returns {ax5docker}\n             */\n            this.repaint = function () {\n                // 패널 다시 그리기\n                repaintPanels();\n                return this;\n            };\n\n            /**\n             * @method ax5docker.addPanel\n             * @param _addPath\n             * @param _appPosition\n             * @param _panel\n             * @returns {ax5docker}\n             */\n            this.addPanel = function (_addPath, _appPosition, _panel) {\n\n                return this;\n            };\n\n            // 클래스 생성자\n            this.main = (function () {\n                if (arguments && U.isObject(arguments[0])) {\n                    this.setConfig(arguments[0]);\n                }\n            }).apply(this, arguments);\n\n        };\n\n        return ax5docker;\n    })());\n\n})();\n\n// todo : active 된 패널만 표시하기 -- ok\n// todo : row > stack 구현 -- ok\n// todo : stack 패널 active change -- ok\n// todo : 패널삭제하기 -- ok ~ active 패널 정리.. -- ok\n// todo : 패널추가하기\n// todo : 패널 drag & drop\n","// ax5.ui.docker.tmpl\n(function () {\n\n    let DOCKER = ax5.ui.docker;\n\n    let panels = function (columnKeys) {\n        return ` \n{{#panels}}\n{{#panels}}\n{{/panels}}\n{{^panels}}\n{{/panels}}\n{{/panels}}\n        `;\n    };\n\n    DOCKER.tmpl = {\n        \"panels\": panels,\n        get: function (tmplName, data, columnKeys) {\n            return ax5.mustache.render(DOCKER.tmpl[tmplName].call(this, columnKeys), data);\n        }\n    };\n\n})();"]}